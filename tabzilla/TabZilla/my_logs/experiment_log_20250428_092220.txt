2025-04-28 09:22:20,795 - INFO - Starting experiments with config: tabzilla_experiment_config_gpu.yml
2025-04-28 09:22:20,795 - INFO - Log file: /scratch2/victoriaflores/transformers/tabzilla/TabZilla/my_logs/experiment_log_20250428_092220.txt
2025-04-28 09:23:33,105 - INFO - Success: XGBoost - openml__credit-g__31_100pct
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__credit-g__31_100pct', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.69976
[20]	eval-auc:0.69619
[0]	eval-auc:0.63690
[41]	eval-auc:0.74857
[0]	eval-auc:0.73524
[21]	eval-auc:0.76286
[0]	eval-auc:0.73952
[43]	eval-auc:0.75048
[0]	eval-auc:0.65405
[31]	eval-auc:0.74476
[0]	eval-auc:0.75571
[31]	eval-auc:0.79333
[0]	eval-auc:0.81476
[35]	eval-auc:0.82714
[0]	eval-auc:0.64571
[26]	eval-auc:0.70048
[0]	eval-auc:0.66405
[51]	eval-auc:0.71476
[0]	eval-auc:0.74690
[99]	eval-auc:0.84000
Trial 1 complete
[0]	eval-auc:0.66381
[81]	eval-auc:0.71190
[0]	eval-auc:0.68810
[46]	eval-auc:0.74810
[0]	eval-auc:0.74143
[48]	eval-auc:0.75952
[0]	eval-auc:0.69238
[39]	eval-auc:0.76905
[0]	eval-auc:0.66000
[30]	eval-auc:0.74048
[0]	eval-auc:0.75810
[32]	eval-auc:0.78429
[0]	eval-auc:0.77667
[43]	eval-auc:0.83381
[0]	eval-auc:0.63190
[32]	eval-auc:0.71429
[0]	eval-auc:0.67643
[35]	eval-auc:0.70714
[0]	eval-auc:0.74833
[64]	eval-auc:0.81333
Trial 2 complete
[0]	eval-auc:0.66381
[99]	eval-auc:0.73429
[0]	eval-auc:0.68810
[48]	eval-auc:0.75333
[0]	eval-auc:0.74143
[40]	eval-auc:0.75095
[0]	eval-auc:0.69238
[32]	eval-auc:0.75238
[0]	eval-auc:0.66000
[23]	eval-auc:0.74571
[0]	eval-auc:0.75810
[31]	eval-auc:0.79571
[0]	eval-auc:0.77667
[39]	eval-auc:0.82667
[0]	eval-auc:0.63190
[27]	eval-auc:0.72143
[0]	eval-auc:0.67643
[30]	eval-auc:0.68429
[0]	eval-auc:0.74833
[86]	eval-auc:0.83952
Trial 3 complete
[0]	eval-auc:0.69976
[20]	eval-auc:0.70476
[0]	eval-auc:0.63690
[38]	eval-auc:0.73619
[0]	eval-auc:0.73524
[23]	eval-auc:0.76333
[0]	eval-auc:0.73952
[36]	eval-auc:0.75095
[0]	eval-auc:0.65405
[32]	eval-auc:0.76381
[0]	eval-auc:0.75571
[31]	eval-auc:0.78524
[0]	eval-auc:0.81476
[38]	eval-auc:0.82667
[0]	eval-auc:0.64571
[23]	eval-auc:0.71762
[0]	eval-auc:0.66405
[27]	eval-auc:0.73048
[0]	eval-auc:0.74690
[95]	eval-auc:0.83238
Trial 4 complete
[0]	eval-auc:0.61881
[39]	eval-auc:0.72524
[0]	eval-auc:0.68167
[42]	eval-auc:0.72905
[0]	eval-auc:0.68857
[43]	eval-auc:0.75571
[0]	eval-auc:0.74619
[36]	eval-auc:0.73095
[0]	eval-auc:0.77595
[60]	eval-auc:0.81857
[0]	eval-auc:0.74286
[32]	eval-auc:0.79571
[0]	eval-auc:0.75286
[21]	eval-auc:0.76667
[0]	eval-auc:0.62857
[22]	eval-auc:0.66524
[0]	eval-auc:0.69786
[21]	eval-auc:0.70333
[0]	eval-auc:0.77405
[46]	eval-auc:0.82571
Trial 5 complete
[0]	eval-auc:0.68143
[78]	eval-auc:0.75714
[0]	eval-auc:0.70500
[31]	eval-auc:0.74048
[0]	eval-auc:0.72929
[33]	eval-auc:0.74048
[0]	eval-auc:0.71214
[24]	eval-auc:0.74238
[0]	eval-auc:0.67095
[45]	eval-auc:0.78048
[0]	eval-auc:0.75571
[20]	eval-auc:0.76190
[0]	eval-auc:0.78143
[23]	eval-auc:0.82143
[0]	eval-auc:0.68095
[50]	eval-auc:0.75905
[0]	eval-auc:0.68976
[41]	eval-auc:0.74667
[0]	eval-auc:0.71595
[38]	eval-auc:0.81619
Trial 6 complete
[0]	eval-auc:0.68381
[39]	eval-auc:0.72095
[0]	eval-auc:0.64310
[99]	eval-auc:0.73524
[0]	eval-auc:0.68500
[80]	eval-auc:0.74571
[0]	eval-auc:0.72357
[34]	eval-auc:0.73619
[0]	eval-auc:0.68667
[43]	eval-auc:0.72381
[0]	eval-auc:0.73714
[78]	eval-auc:0.79762
[0]	eval-auc:0.74167
[96]	eval-auc:0.78476
[0]	eval-auc:0.64143
[99]	eval-auc:0.69905
[0]	eval-auc:0.66881
[28]	eval-auc:0.69786
[0]	eval-auc:0.72429
[99]	eval-auc:0.83286
Trial 7 complete
[0]	eval-auc:0.68000
[67]	eval-auc:0.75000
[0]	eval-auc:0.69762
[64]	eval-auc:0.74381
[0]	eval-auc:0.73667
[37]	eval-auc:0.74810
[0]	eval-auc:0.71000
[31]	eval-auc:0.72190
[0]	eval-auc:0.68929
[77]	eval-auc:0.79619
[0]	eval-auc:0.71667
[36]	eval-auc:0.76762
[0]	eval-auc:0.79762
[68]	eval-auc:0.84571
[0]	eval-auc:0.68119
[72]	eval-auc:0.77857
[0]	eval-auc:0.67095
[38]	eval-auc:0.71143
[0]	eval-auc:0.75000
[69]	eval-auc:0.80952
Trial 8 complete
[0]	eval-auc:0.58952
[43]	eval-auc:0.68095
[0]	eval-auc:0.66524
[45]	eval-auc:0.74048
[0]	eval-auc:0.66357
[38]	eval-auc:0.79048
[0]	eval-auc:0.75119
[25]	eval-auc:0.73095
[0]	eval-auc:0.72643
[99]	eval-auc:0.81762
[0]	eval-auc:0.73167
[32]	eval-auc:0.81095
[0]	eval-auc:0.73333
[59]	eval-auc:0.76762
[0]	eval-auc:0.69833
[32]	eval-auc:0.71952
[0]	eval-auc:0.67429
[24]	eval-auc:0.68238
[0]	eval-auc:0.77952
[62]	eval-auc:0.84000
Trial 9 complete
[0]	eval-auc:0.68000
[78]	eval-auc:0.73905
[0]	eval-auc:0.69762
[88]	eval-auc:0.72429
[0]	eval-auc:0.73667
[21]	eval-auc:0.73738
[0]	eval-auc:0.71000
[73]	eval-auc:0.72952
[0]	eval-auc:0.68929
[55]	eval-auc:0.76714
[0]	eval-auc:0.71667
[99]	eval-auc:0.77048
[0]	eval-auc:0.79762
[48]	eval-auc:0.81810
[0]	eval-auc:0.68119
[99]	eval-auc:0.75333
[0]	eval-auc:0.67095
[62]	eval-auc:0.72071
[0]	eval-auc:0.75000
[22]	eval-auc:0.74952
Trial 10 complete
[0]	eval-auc:0.67643
[55]	eval-auc:0.73571
[0]	eval-auc:0.61214
[32]	eval-auc:0.72714
[0]	eval-auc:0.72524
[61]	eval-auc:0.76048
[0]	eval-auc:0.70905
[29]	eval-auc:0.70762
[0]	eval-auc:0.60310
[58]	eval-auc:0.76429
[0]	eval-auc:0.75000
[33]	eval-auc:0.80762
[0]	eval-auc:0.78119
[54]	eval-auc:0.79190
[0]	eval-auc:0.65357
[21]	eval-auc:0.69238
[0]	eval-auc:0.65119
[25]	eval-auc:0.71333
[0]	eval-auc:0.77381
[37]	eval-auc:0.82571
Trial 11 complete
[0]	eval-auc:0.67571
[57]	eval-auc:0.71429
[0]	eval-auc:0.70500
[60]	eval-auc:0.74857
[0]	eval-auc:0.72976
[33]	eval-auc:0.74095
[0]	eval-auc:0.71214
[26]	eval-auc:0.72667
[0]	eval-auc:0.67095
[55]	eval-auc:0.78762
[0]	eval-auc:0.75571
[30]	eval-auc:0.75857
[0]	eval-auc:0.78143
[28]	eval-auc:0.83571
[0]	eval-auc:0.68095
[67]	eval-auc:0.77571
[0]	eval-auc:0.68976
[47]	eval-auc:0.73286
[0]	eval-auc:0.71595
[66]	eval-auc:0.81524
Trial 12 complete
[0]	eval-auc:0.67571
[96]	eval-auc:0.75524
[0]	eval-auc:0.70500
[44]	eval-auc:0.74810
[0]	eval-auc:0.72976
[51]	eval-auc:0.75143
[0]	eval-auc:0.71214
[30]	eval-auc:0.77000
[0]	eval-auc:0.67095
[46]	eval-auc:0.78524
[0]	eval-auc:0.75571
[36]	eval-auc:0.76143
[0]	eval-auc:0.78143
[56]	eval-auc:0.84095
[0]	eval-auc:0.68095
[99]	eval-auc:0.77714
[0]	eval-auc:0.68976
[35]	eval-auc:0.73476
[0]	eval-auc:0.71595
[99]	eval-auc:0.82238
Trial 13 complete
[0]	eval-auc:0.63833
[49]	eval-auc:0.73238
[0]	eval-auc:0.63024
[38]	eval-auc:0.73238
[0]	eval-auc:0.72524
[25]	eval-auc:0.75095
[0]	eval-auc:0.70905
[25]	eval-auc:0.70952
[0]	eval-auc:0.62238
[99]	eval-auc:0.78619
[0]	eval-auc:0.75000
[24]	eval-auc:0.81048
[0]	eval-auc:0.79429
[32]	eval-auc:0.81190
[0]	eval-auc:0.65357
[32]	eval-auc:0.70286
[0]	eval-auc:0.65119
[27]	eval-auc:0.70429
[0]	eval-auc:0.77381
[43]	eval-auc:0.82524
Trial 14 complete
[0]	eval-auc:0.66429
[40]	eval-auc:0.69881
[0]	eval-auc:0.63690
[99]	eval-auc:0.74857
[0]	eval-auc:0.73286
[27]	eval-auc:0.76452
[0]	eval-auc:0.69333
[75]	eval-auc:0.76762
[0]	eval-auc:0.67167
[50]	eval-auc:0.75571
[0]	eval-auc:0.76429
[50]	eval-auc:0.79667
[0]	eval-auc:0.80643
[20]	eval-auc:0.79190
[0]	eval-auc:0.66833
[31]	eval-auc:0.71976
[0]	eval-auc:0.66214
[85]	eval-auc:0.71476
[0]	eval-auc:0.74690
[20]	eval-auc:0.74500
Trial 15 complete
[0]	eval-auc:0.66167
[26]	eval-auc:0.70476
[0]	eval-auc:0.58881
[96]	eval-auc:0.73095
[0]	eval-auc:0.71786
[37]	eval-auc:0.74905
[0]	eval-auc:0.69500
[27]	eval-auc:0.73762
[0]	eval-auc:0.63333
[27]	eval-auc:0.71000
[0]	eval-auc:0.71500
[38]	eval-auc:0.80810
[0]	eval-auc:0.74190
[66]	eval-auc:0.79524
[0]	eval-auc:0.62833
[21]	eval-auc:0.68762
[0]	eval-auc:0.65548
[64]	eval-auc:0.70905
[0]	eval-auc:0.70286
[87]	eval-auc:0.84810
Trial 16 complete
[0]	eval-auc:0.67571
[86]	eval-auc:0.73143
[0]	eval-auc:0.70500
[99]	eval-auc:0.75476
[0]	eval-auc:0.72976
[99]	eval-auc:0.76667
[0]	eval-auc:0.71214
[30]	eval-auc:0.76857
[0]	eval-auc:0.67095
[41]	eval-auc:0.76071
[0]	eval-auc:0.75571
[38]	eval-auc:0.77310
[0]	eval-auc:0.78143
[59]	eval-auc:0.82905
[0]	eval-auc:0.68095
[23]	eval-auc:0.69119
[0]	eval-auc:0.68976
[49]	eval-auc:0.73190
[0]	eval-auc:0.71595
[99]	eval-auc:0.80571
Trial 17 complete
[0]	eval-auc:0.67571
[99]	eval-auc:0.73714
[0]	eval-auc:0.70500
[99]	eval-auc:0.75571
[0]	eval-auc:0.72976
[99]	eval-auc:0.76238
[0]	eval-auc:0.71214
[29]	eval-auc:0.76810
[0]	eval-auc:0.67095
[39]	eval-auc:0.76119
[0]	eval-auc:0.75571
[44]	eval-auc:0.77690
[0]	eval-auc:0.78143
[56]	eval-auc:0.83000
[0]	eval-auc:0.68095
[24]	eval-auc:0.69786
[0]	eval-auc:0.68976
[47]	eval-auc:0.72786
[0]	eval-auc:0.71595
[88]	eval-auc:0.79857
Trial 18 complete
[0]	eval-auc:0.65476
[26]	eval-auc:0.70548
[0]	eval-auc:0.59571
[89]	eval-auc:0.72762
[0]	eval-auc:0.74738
[26]	eval-auc:0.74905
[0]	eval-auc:0.70238
[59]	eval-auc:0.75190
[0]	eval-auc:0.66238
[99]	eval-auc:0.77095
[0]	eval-auc:0.75071
[40]	eval-auc:0.80952
[0]	eval-auc:0.80786
[20]	eval-auc:0.78929
[0]	eval-auc:0.69024
[22]	eval-auc:0.73143
[0]	eval-auc:0.68357
[47]	eval-auc:0.70524
[0]	eval-auc:0.79167
[99]	eval-auc:0.83190
Trial 19 complete
[0]	eval-auc:0.68000
[77]	eval-auc:0.73714
[0]	eval-auc:0.69762
[99]	eval-auc:0.72952
[0]	eval-auc:0.73667
[21]	eval-auc:0.73738
[0]	eval-auc:0.71000
[43]	eval-auc:0.73167
[0]	eval-auc:0.68929
[56]	eval-auc:0.77190
[0]	eval-auc:0.71667
[94]	eval-auc:0.77143
[0]	eval-auc:0.79762
[44]	eval-auc:0.81667
[0]	eval-auc:0.68119
[99]	eval-auc:0.74857
[0]	eval-auc:0.67095
[56]	eval-auc:0.72738
[0]	eval-auc:0.75000
[23]	eval-auc:0.74905
Trial 20 complete
[0]	eval-auc:0.69095
[42]	eval-auc:0.72810
[0]	eval-auc:0.60524
[52]	eval-auc:0.73857
[0]	eval-auc:0.73310
[68]	eval-auc:0.77190
[0]	eval-auc:0.70095
[30]	eval-auc:0.72952
[0]	eval-auc:0.67310
[55]	eval-auc:0.79667
[0]	eval-auc:0.72595
[25]	eval-auc:0.78524
[0]	eval-auc:0.78714
[47]	eval-auc:0.80571
[0]	eval-auc:0.75738
[20]	eval-auc:0.72238
[0]	eval-auc:0.67976
[74]	eval-auc:0.71524
[0]	eval-auc:0.78429
[95]	eval-auc:0.86286
Trial 21 complete
[0]	eval-auc:0.68000
[96]	eval-auc:0.73857
[0]	eval-auc:0.69762
[99]	eval-auc:0.72548
[0]	eval-auc:0.73667
[22]	eval-auc:0.73310
[0]	eval-auc:0.71000
[40]	eval-auc:0.72405
[0]	eval-auc:0.68929
[87]	eval-auc:0.76952
[0]	eval-auc:0.71667
[99]	eval-auc:0.77905
[0]	eval-auc:0.79762
[59]	eval-auc:0.81714
[0]	eval-auc:0.68119
[99]	eval-auc:0.73929
[0]	eval-auc:0.67095
[71]	eval-auc:0.73952
[0]	eval-auc:0.75000
[23]	eval-auc:0.73738
Trial 22 complete
[0]	eval-auc:0.67571
[73]	eval-auc:0.76143
[0]	eval-auc:0.70500
[35]	eval-auc:0.74333
[0]	eval-auc:0.72976
[29]	eval-auc:0.73857
[0]	eval-auc:0.71214
[39]	eval-auc:0.73143
[0]	eval-auc:0.67095
[46]	eval-auc:0.78952
[0]	eval-auc:0.75571
[21]	eval-auc:0.76333
[0]	eval-auc:0.78143
[35]	eval-auc:0.83143
[0]	eval-auc:0.68095
[44]	eval-auc:0.78000
[0]	eval-auc:0.68976
[34]	eval-auc:0.72190
[0]	eval-auc:0.71595
[51]	eval-auc:0.81667
Trial 23 complete
[0]	eval-auc:0.66381
[42]	eval-auc:0.69857
[0]	eval-auc:0.69024
[66]	eval-auc:0.72286
[0]	eval-auc:0.77333
[21]	eval-auc:0.76000
[0]	eval-auc:0.69333
[47]	eval-auc:0.77286
[0]	eval-auc:0.65190
[99]	eval-auc:0.79762
[0]	eval-auc:0.74976
[37]	eval-auc:0.80000
[0]	eval-auc:0.80238
[46]	eval-auc:0.81619
[0]	eval-auc:0.68810
[28]	eval-auc:0.70952
[0]	eval-auc:0.65524
[32]	eval-auc:0.68762
[0]	eval-auc:0.74810
[99]	eval-auc:0.83714
Trial 24 complete
[0]	eval-auc:0.63000
[99]	eval-auc:0.71286
[0]	eval-auc:0.67476
[55]	eval-auc:0.74286
[0]	eval-auc:0.72881
[62]	eval-auc:0.77333
[0]	eval-auc:0.76024
[68]	eval-auc:0.76381
[0]	eval-auc:0.71452
[71]	eval-auc:0.76714
[0]	eval-auc:0.73833
[28]	eval-auc:0.80143
[0]	eval-auc:0.76500
[35]	eval-auc:0.80476
[0]	eval-auc:0.66214
[30]	eval-auc:0.71571
[0]	eval-auc:0.66214
[23]	eval-auc:0.68619
[0]	eval-auc:0.74000
[99]	eval-auc:0.84762
Trial 25 complete
[0]	eval-auc:0.70238
[36]	eval-auc:0.71714
[0]	eval-auc:0.63048
[99]	eval-auc:0.74810
[0]	eval-auc:0.68500
[99]	eval-auc:0.76857
[0]	eval-auc:0.72357
[48]	eval-auc:0.72524
[0]	eval-auc:0.68833
[99]	eval-auc:0.77048
[0]	eval-auc:0.73167
[88]	eval-auc:0.80571
[0]	eval-auc:0.72952
[78]	eval-auc:0.78000
[0]	eval-auc:0.64143
[22]	eval-auc:0.65310
[0]	eval-auc:0.66881
[94]	eval-auc:0.73333
[0]	eval-auc:0.72429
[99]	eval-auc:0.83048
Trial 26 complete
[0]	eval-auc:0.68143
[46]	eval-auc:0.73762
[0]	eval-auc:0.70500
[50]	eval-auc:0.75524
[0]	eval-auc:0.72976
[31]	eval-auc:0.74714
[0]	eval-auc:0.71214
[25]	eval-auc:0.74571
[0]	eval-auc:0.67095
[22]	eval-auc:0.76190
[0]	eval-auc:0.75571
[28]	eval-auc:0.76429
[0]	eval-auc:0.78143
[29]	eval-auc:0.84190
[0]	eval-auc:0.68095
[71]	eval-auc:0.76000
[0]	eval-auc:0.68976
[39]	eval-auc:0.73286
[0]	eval-auc:0.71595
[54]	eval-auc:0.79762
Trial 27 complete
[0]	eval-auc:0.62881
[52]	eval-auc:0.71238
[0]	eval-auc:0.68810
[30]	eval-auc:0.71476
[0]	eval-auc:0.74143
[30]	eval-auc:0.74429
[0]	eval-auc:0.69238
[20]	eval-auc:0.73810
[0]	eval-auc:0.66000
[43]	eval-auc:0.77095
[0]	eval-auc:0.75810
[33]	eval-auc:0.78714
[0]	eval-auc:0.77667
[25]	eval-auc:0.83095
[0]	eval-auc:0.63190
[33]	eval-auc:0.75048
[0]	eval-auc:0.67643
[41]	eval-auc:0.72714
[0]	eval-auc:0.74833
[36]	eval-auc:0.81429
Trial 28 complete
[0]	eval-auc:0.71310
[27]	eval-auc:0.70143
[0]	eval-auc:0.55976
[50]	eval-auc:0.71476
[0]	eval-auc:0.73167
[24]	eval-auc:0.73714
[0]	eval-auc:0.69262
[41]	eval-auc:0.73714
[0]	eval-auc:0.61286
[99]	eval-auc:0.76238
[0]	eval-auc:0.75571
[41]	eval-auc:0.80714
[0]	eval-auc:0.77167
[89]	eval-auc:0.80000
[0]	eval-auc:0.65619
[28]	eval-auc:0.69238
[0]	eval-auc:0.65905
[64]	eval-auc:0.72857
[0]	eval-auc:0.77548
[99]	eval-auc:0.85619
Trial 29 complete
[0]	eval-auc:0.67476
[22]	eval-auc:0.72905
[0]	eval-auc:0.58857
[34]	eval-auc:0.71095
[0]	eval-auc:0.71167
[63]	eval-auc:0.77476
[0]	eval-auc:0.70119
[26]	eval-auc:0.73952
[0]	eval-auc:0.63857
[99]	eval-auc:0.77286
[0]	eval-auc:0.71500
[31]	eval-auc:0.79095
[0]	eval-auc:0.73405
[33]	eval-auc:0.79905
[0]	eval-auc:0.64738
[21]	eval-auc:0.66905
[0]	eval-auc:0.65786
[24]	eval-auc:0.69619
[0]	eval-auc:0.72429
[40]	eval-auc:0.83762
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 09:24:38,424 - INFO - Success: XGBoost - openml__credit-g__31_25pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__credit-g__31_25pct_missing', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.55857
[27]	eval-auc:0.53976
[0]	eval-auc:0.52452
[42]	eval-auc:0.58548
[0]	eval-auc:0.43476
[19]	eval-auc:0.40095
[0]	eval-auc:0.57238
[99]	eval-auc:0.65976
[0]	eval-auc:0.54143
[19]	eval-auc:0.50190
[0]	eval-auc:0.51381
[41]	eval-auc:0.59095
[0]	eval-auc:0.54905
[58]	eval-auc:0.59095
[0]	eval-auc:0.55500
[24]	eval-auc:0.58952
[0]	eval-auc:0.56452
[41]	eval-auc:0.65429
[0]	eval-auc:0.36119
[99]	eval-auc:0.47810
Trial 1 complete
[0]	eval-auc:0.55881
[26]	eval-auc:0.52690
[0]	eval-auc:0.50167
[56]	eval-auc:0.59571
[0]	eval-auc:0.43357
[20]	eval-auc:0.36452
[0]	eval-auc:0.58190
[71]	eval-auc:0.64357
[0]	eval-auc:0.53310
[20]	eval-auc:0.50786
[0]	eval-auc:0.48929
[53]	eval-auc:0.59619
[0]	eval-auc:0.54310
[99]	eval-auc:0.59262
[0]	eval-auc:0.53452
[34]	eval-auc:0.59833
[0]	eval-auc:0.57619
[24]	eval-auc:0.65095
[0]	eval-auc:0.41333
[64]	eval-auc:0.45405
Trial 2 complete
[0]	eval-auc:0.55881
[31]	eval-auc:0.54286
[0]	eval-auc:0.50167
[62]	eval-auc:0.58810
[0]	eval-auc:0.43357
[19]	eval-auc:0.38571
[0]	eval-auc:0.58190
[24]	eval-auc:0.63429
[0]	eval-auc:0.53310
[21]	eval-auc:0.50310
[0]	eval-auc:0.48929
[43]	eval-auc:0.58095
[0]	eval-auc:0.54310
[72]	eval-auc:0.60929
[0]	eval-auc:0.53452
[27]	eval-auc:0.60405
[0]	eval-auc:0.57619
[46]	eval-auc:0.64643
[0]	eval-auc:0.41333
[41]	eval-auc:0.45190
Trial 3 complete
[0]	eval-auc:0.55857
[29]	eval-auc:0.52786
[0]	eval-auc:0.52452
[39]	eval-auc:0.56024
[0]	eval-auc:0.43476
[19]	eval-auc:0.37571
[0]	eval-auc:0.57238
[99]	eval-auc:0.66143
[0]	eval-auc:0.54143
[20]	eval-auc:0.49738
[0]	eval-auc:0.51381
[41]	eval-auc:0.60143
[0]	eval-auc:0.54905
[26]	eval-auc:0.58500
[0]	eval-auc:0.55500
[28]	eval-auc:0.59071
[0]	eval-auc:0.56452
[29]	eval-auc:0.66333
[0]	eval-auc:0.36119
[26]	eval-auc:0.41048
Trial 4 complete
[0]	eval-auc:0.56286
[19]	eval-auc:0.54024
[0]	eval-auc:0.55690
[25]	eval-auc:0.56190
[0]	eval-auc:0.43095
[19]	eval-auc:0.41714
[0]	eval-auc:0.61119
[37]	eval-auc:0.67452
[0]	eval-auc:0.49262
[25]	eval-auc:0.48214
[0]	eval-auc:0.57071
[29]	eval-auc:0.56167
[0]	eval-auc:0.60262
[28]	eval-auc:0.61524
[0]	eval-auc:0.58881
[85]	eval-auc:0.61857
[0]	eval-auc:0.61952
[20]	eval-auc:0.59762
[0]	eval-auc:0.45929
[46]	eval-auc:0.46190
Trial 5 complete
[0]	eval-auc:0.50976
[35]	eval-auc:0.52286
[0]	eval-auc:0.52690
[31]	eval-auc:0.56643
[0]	eval-auc:0.44071
[36]	eval-auc:0.44048
[0]	eval-auc:0.56738
[99]	eval-auc:0.65143
[0]	eval-auc:0.54143
[20]	eval-auc:0.50619
[0]	eval-auc:0.46429
[35]	eval-auc:0.56333
[0]	eval-auc:0.52548
[62]	eval-auc:0.57952
[0]	eval-auc:0.47857
[36]	eval-auc:0.60952
[0]	eval-auc:0.54833
[51]	eval-auc:0.61690
[0]	eval-auc:0.44095
[25]	eval-auc:0.45405
Trial 6 complete
[0]	eval-auc:0.51786
[28]	eval-auc:0.57500
[0]	eval-auc:0.52833
[28]	eval-auc:0.58167
[0]	eval-auc:0.53286
[21]	eval-auc:0.47571
[0]	eval-auc:0.62381
[33]	eval-auc:0.62024
[0]	eval-auc:0.47262
[26]	eval-auc:0.54214
[0]	eval-auc:0.53405
[56]	eval-auc:0.59310
[0]	eval-auc:0.58452
[48]	eval-auc:0.61214
[0]	eval-auc:0.56524
[19]	eval-auc:0.55238
[0]	eval-auc:0.64119
[21]	eval-auc:0.59095
[0]	eval-auc:0.41357
[25]	eval-auc:0.41500
Trial 7 complete
[0]	eval-auc:0.50238
[23]	eval-auc:0.51905
[0]	eval-auc:0.53000
[54]	eval-auc:0.57190
[0]	eval-auc:0.42619
[76]	eval-auc:0.46595
[0]	eval-auc:0.57000
[34]	eval-auc:0.62667
[0]	eval-auc:0.48786
[23]	eval-auc:0.46833
[0]	eval-auc:0.48571
[52]	eval-auc:0.56810
[0]	eval-auc:0.51262
[62]	eval-auc:0.58476
[0]	eval-auc:0.48571
[76]	eval-auc:0.62881
[0]	eval-auc:0.52571
[63]	eval-auc:0.66000
[0]	eval-auc:0.43500
[35]	eval-auc:0.46452
Trial 8 complete
[0]	eval-auc:0.55762
[24]	eval-auc:0.55190
[0]	eval-auc:0.54905
[33]	eval-auc:0.57381
[0]	eval-auc:0.42690
[21]	eval-auc:0.37357
[0]	eval-auc:0.62167
[79]	eval-auc:0.67119
[0]	eval-auc:0.46500
[27]	eval-auc:0.48619
[0]	eval-auc:0.51548
[54]	eval-auc:0.57500
[0]	eval-auc:0.56381
[36]	eval-auc:0.60833
[0]	eval-auc:0.55976
[27]	eval-auc:0.58190
[0]	eval-auc:0.61905
[35]	eval-auc:0.60714
[0]	eval-auc:0.44429
[19]	eval-auc:0.44286
Trial 9 complete
[0]	eval-auc:0.50238
[41]	eval-auc:0.49667
[0]	eval-auc:0.53000
[19]	eval-auc:0.50738
[0]	eval-auc:0.42619
[25]	eval-auc:0.39595
[0]	eval-auc:0.57000
[53]	eval-auc:0.64286
[0]	eval-auc:0.48786
[23]	eval-auc:0.48524
[0]	eval-auc:0.48571
[99]	eval-auc:0.57548
[0]	eval-auc:0.51262
[64]	eval-auc:0.58786
[0]	eval-auc:0.48571
[99]	eval-auc:0.64524
[0]	eval-auc:0.49071
[93]	eval-auc:0.65357
[0]	eval-auc:0.43500
[20]	eval-auc:0.40929
Trial 10 complete
[0]	eval-auc:0.54143
[26]	eval-auc:0.52048
[0]	eval-auc:0.53571
[24]	eval-auc:0.56167
[0]	eval-auc:0.52833
[20]	eval-auc:0.47071
[0]	eval-auc:0.59286
[23]	eval-auc:0.63619
[0]	eval-auc:0.48786
[23]	eval-auc:0.49357
[0]	eval-auc:0.48905
[26]	eval-auc:0.57310
[0]	eval-auc:0.58190
[27]	eval-auc:0.57357
[0]	eval-auc:0.54619
[37]	eval-auc:0.60381
[0]	eval-auc:0.63381
[22]	eval-auc:0.60238
[0]	eval-auc:0.43048
[66]	eval-auc:0.45810
Trial 11 complete
[0]	eval-auc:0.50976
[21]	eval-auc:0.53810
[0]	eval-auc:0.52690
[40]	eval-auc:0.53976
[0]	eval-auc:0.44071
[20]	eval-auc:0.38714
[0]	eval-auc:0.56738
[40]	eval-auc:0.63024
[0]	eval-auc:0.54405
[20]	eval-auc:0.51286
[0]	eval-auc:0.46429
[41]	eval-auc:0.58119
[0]	eval-auc:0.52548
[61]	eval-auc:0.56381
[0]	eval-auc:0.47857
[47]	eval-auc:0.60024
[0]	eval-auc:0.48905
[46]	eval-auc:0.64071
[0]	eval-auc:0.44095
[52]	eval-auc:0.43452
Trial 12 complete
[0]	eval-auc:0.50976
[24]	eval-auc:0.50857
[0]	eval-auc:0.52690
[60]	eval-auc:0.57571
[0]	eval-auc:0.44071
[20]	eval-auc:0.38262
[0]	eval-auc:0.56738
[52]	eval-auc:0.64405
[0]	eval-auc:0.54143
[20]	eval-auc:0.47262
[0]	eval-auc:0.46429
[56]	eval-auc:0.58524
[0]	eval-auc:0.52548
[57]	eval-auc:0.60286
[0]	eval-auc:0.47857
[43]	eval-auc:0.59119
[0]	eval-auc:0.48905
[60]	eval-auc:0.69381
[0]	eval-auc:0.44095
[22]	eval-auc:0.43905
Trial 13 complete
[0]	eval-auc:0.54143
[22]	eval-auc:0.52262
[0]	eval-auc:0.53571
[22]	eval-auc:0.52833
[0]	eval-auc:0.52690
[20]	eval-auc:0.44929
[0]	eval-auc:0.59286
[66]	eval-auc:0.67929
[0]	eval-auc:0.48786
[22]	eval-auc:0.49762
[0]	eval-auc:0.48905
[24]	eval-auc:0.52762
[0]	eval-auc:0.58190
[28]	eval-auc:0.59310
[0]	eval-auc:0.54619
[92]	eval-auc:0.65190
[0]	eval-auc:0.55143
[28]	eval-auc:0.58167
[0]	eval-auc:0.43048
[62]	eval-auc:0.43667
Trial 14 complete
[0]	eval-auc:0.55071
[37]	eval-auc:0.56405
[0]	eval-auc:0.52548
[66]	eval-auc:0.58238
[0]	eval-auc:0.43786
[19]	eval-auc:0.39214
[0]	eval-auc:0.57238
[41]	eval-auc:0.61500
[0]	eval-auc:0.53929
[21]	eval-auc:0.51810
[0]	eval-auc:0.51381
[81]	eval-auc:0.59476
[0]	eval-auc:0.57048
[21]	eval-auc:0.52714
[0]	eval-auc:0.55500
[30]	eval-auc:0.57262
[0]	eval-auc:0.55167
[21]	eval-auc:0.58452
[0]	eval-auc:0.38071
[46]	eval-auc:0.41381
Trial 15 complete
[0]	eval-auc:0.53310
[28]	eval-auc:0.53643
[0]	eval-auc:0.53619
[30]	eval-auc:0.57976
[0]	eval-auc:0.53262
[20]	eval-auc:0.44810
[0]	eval-auc:0.59286
[23]	eval-auc:0.61714
[0]	eval-auc:0.48095
[36]	eval-auc:0.52381
[0]	eval-auc:0.51905
[40]	eval-auc:0.57905
[0]	eval-auc:0.59667
[29]	eval-auc:0.56881
[0]	eval-auc:0.55476
[25]	eval-auc:0.56500
[0]	eval-auc:0.63405
[21]	eval-auc:0.62357
[0]	eval-auc:0.39786
[64]	eval-auc:0.47857
Trial 16 complete
[0]	eval-auc:0.50976
[41]	eval-auc:0.45786
[0]	eval-auc:0.52690
[20]	eval-auc:0.50452
[0]	eval-auc:0.44071
[20]	eval-auc:0.40286
[0]	eval-auc:0.56738
[58]	eval-auc:0.61357
[0]	eval-auc:0.54405
[20]	eval-auc:0.49357
[0]	eval-auc:0.46429
[89]	eval-auc:0.59286
[0]	eval-auc:0.52548
[60]	eval-auc:0.57881
[0]	eval-auc:0.47857
[44]	eval-auc:0.57905
[0]	eval-auc:0.48905
[57]	eval-auc:0.60595
[0]	eval-auc:0.44095
[34]	eval-auc:0.43357
Trial 17 complete
[0]	eval-auc:0.50976
[40]	eval-auc:0.46405
[0]	eval-auc:0.52690
[20]	eval-auc:0.50238
[0]	eval-auc:0.44071
[19]	eval-auc:0.40333
[0]	eval-auc:0.56738
[56]	eval-auc:0.61476
[0]	eval-auc:0.54405
[19]	eval-auc:0.49619
[0]	eval-auc:0.46429
[99]	eval-auc:0.59405
[0]	eval-auc:0.52548
[74]	eval-auc:0.58333
[0]	eval-auc:0.47857
[41]	eval-auc:0.59095
[0]	eval-auc:0.48905
[64]	eval-auc:0.63619
[0]	eval-auc:0.44095
[36]	eval-auc:0.43452
Trial 18 complete
[0]	eval-auc:0.55071
[32]	eval-auc:0.56048
[0]	eval-auc:0.53571
[37]	eval-auc:0.58286
[0]	eval-auc:0.54048
[20]	eval-auc:0.37167
[0]	eval-auc:0.56714
[99]	eval-auc:0.64095
[0]	eval-auc:0.50405
[33]	eval-auc:0.50476
[0]	eval-auc:0.49762
[48]	eval-auc:0.57857
[0]	eval-auc:0.54738
[30]	eval-auc:0.57429
[0]	eval-auc:0.54619
[27]	eval-auc:0.57881
[0]	eval-auc:0.54119
[95]	eval-auc:0.65643
[0]	eval-auc:0.39738
[99]	eval-auc:0.47405
Trial 19 complete
[0]	eval-auc:0.50238
[41]	eval-auc:0.49667
[0]	eval-auc:0.53000
[20]	eval-auc:0.50714
[0]	eval-auc:0.42619
[24]	eval-auc:0.39881
[0]	eval-auc:0.57000
[55]	eval-auc:0.61762
[0]	eval-auc:0.48786
[22]	eval-auc:0.48524
[0]	eval-auc:0.48571
[99]	eval-auc:0.58714
[0]	eval-auc:0.51262
[85]	eval-auc:0.56810
[0]	eval-auc:0.48571
[77]	eval-auc:0.61881
[0]	eval-auc:0.49071
[83]	eval-auc:0.63952
[0]	eval-auc:0.43500
[20]	eval-auc:0.39833
Trial 20 complete
[0]	eval-auc:0.55071
[23]	eval-auc:0.52476
[0]	eval-auc:0.52595
[35]	eval-auc:0.54429
[0]	eval-auc:0.41762
[48]	eval-auc:0.44429
[0]	eval-auc:0.58619
[40]	eval-auc:0.66833
[0]	eval-auc:0.50690
[37]	eval-auc:0.48810
[0]	eval-auc:0.49762
[32]	eval-auc:0.55119
[0]	eval-auc:0.54738
[56]	eval-auc:0.56143
[0]	eval-auc:0.56048
[35]	eval-auc:0.56214
[0]	eval-auc:0.60881
[21]	eval-auc:0.62857
[0]	eval-auc:0.45048
[51]	eval-auc:0.47714
Trial 21 complete
[0]	eval-auc:0.50238
[48]	eval-auc:0.49714
[0]	eval-auc:0.53000
[20]	eval-auc:0.52929
[0]	eval-auc:0.42619
[24]	eval-auc:0.40548
[0]	eval-auc:0.57000
[60]	eval-auc:0.63952
[0]	eval-auc:0.48786
[23]	eval-auc:0.48381
[0]	eval-auc:0.48571
[86]	eval-auc:0.55429
[0]	eval-auc:0.51262
[25]	eval-auc:0.50452
[0]	eval-auc:0.48571
[43]	eval-auc:0.58714
[0]	eval-auc:0.49071
[29]	eval-auc:0.58667
[0]	eval-auc:0.43500
[20]	eval-auc:0.42190
Trial 22 complete
[0]	eval-auc:0.50976
[22]	eval-auc:0.56381
[0]	eval-auc:0.52690
[38]	eval-auc:0.56690
[0]	eval-auc:0.44071
[20]	eval-auc:0.40548
[0]	eval-auc:0.56738
[35]	eval-auc:0.64143
[0]	eval-auc:0.54405
[20]	eval-auc:0.50238
[0]	eval-auc:0.46429
[38]	eval-auc:0.59643
[0]	eval-auc:0.52548
[43]	eval-auc:0.57095
[0]	eval-auc:0.47857
[37]	eval-auc:0.60976
[0]	eval-auc:0.48905
[22]	eval-auc:0.59690
[0]	eval-auc:0.44095
[46]	eval-auc:0.45310
Trial 23 complete
[0]	eval-auc:0.55048
[33]	eval-auc:0.56643
[0]	eval-auc:0.53881
[70]	eval-auc:0.58452
[0]	eval-auc:0.41381
[20]	eval-auc:0.40262
[0]	eval-auc:0.57238
[24]	eval-auc:0.60429
[0]	eval-auc:0.53929
[20]	eval-auc:0.50000
[0]	eval-auc:0.51381
[58]	eval-auc:0.59310
[0]	eval-auc:0.57048
[29]	eval-auc:0.58048
[0]	eval-auc:0.55429
[45]	eval-auc:0.58881
[0]	eval-auc:0.55167
[34]	eval-auc:0.62405
[0]	eval-auc:0.42738
[25]	eval-auc:0.36690
Trial 24 complete
[0]	eval-auc:0.51095
[30]	eval-auc:0.54881
[0]	eval-auc:0.61405
[20]	eval-auc:0.57929
[0]	eval-auc:0.39762
[25]	eval-auc:0.36024
[0]	eval-auc:0.61405
[86]	eval-auc:0.64405
[0]	eval-auc:0.48619
[41]	eval-auc:0.50643
[0]	eval-auc:0.60095
[19]	eval-auc:0.57595
[0]	eval-auc:0.58524
[24]	eval-auc:0.59286
[0]	eval-auc:0.57524
[29]	eval-auc:0.57119
[0]	eval-auc:0.57571
[23]	eval-auc:0.60881
[0]	eval-auc:0.42929
[21]	eval-auc:0.39929
Trial 25 complete
[0]	eval-auc:0.51786
[35]	eval-auc:0.54738
[0]	eval-auc:0.52833
[47]	eval-auc:0.57024
[0]	eval-auc:0.53548
[27]	eval-auc:0.47738
[0]	eval-auc:0.62381
[27]	eval-auc:0.61905
[0]	eval-auc:0.47452
[34]	eval-auc:0.51095
[0]	eval-auc:0.53405
[50]	eval-auc:0.59310
[0]	eval-auc:0.58452
[32]	eval-auc:0.59738
[0]	eval-auc:0.56571
[28]	eval-auc:0.56286
[0]	eval-auc:0.62095
[21]	eval-auc:0.59048
[0]	eval-auc:0.41357
[21]	eval-auc:0.39429
Trial 26 complete
[0]	eval-auc:0.50976
[22]	eval-auc:0.54667
[0]	eval-auc:0.52690
[31]	eval-auc:0.57667
[0]	eval-auc:0.44071
[48]	eval-auc:0.44762
[0]	eval-auc:0.56738
[27]	eval-auc:0.63214
[0]	eval-auc:0.54143
[20]	eval-auc:0.46571
[0]	eval-auc:0.46429
[42]	eval-auc:0.59762
[0]	eval-auc:0.52548
[54]	eval-auc:0.58357
[0]	eval-auc:0.47857
[31]	eval-auc:0.61119
[0]	eval-auc:0.48905
[24]	eval-auc:0.64048
[0]	eval-auc:0.44095
[31]	eval-auc:0.46452
Trial 27 complete
[0]	eval-auc:0.55881
[20]	eval-auc:0.55619
[0]	eval-auc:0.50167
[34]	eval-auc:0.58286
[0]	eval-auc:0.43357
[22]	eval-auc:0.42667
[0]	eval-auc:0.58190
[31]	eval-auc:0.62643
[0]	eval-auc:0.53262
[20]	eval-auc:0.50833
[0]	eval-auc:0.48929
[29]	eval-auc:0.58952
[0]	eval-auc:0.54310
[62]	eval-auc:0.57571
[0]	eval-auc:0.53452
[48]	eval-auc:0.60524
[0]	eval-auc:0.54619
[34]	eval-auc:0.66381
[0]	eval-auc:0.41333
[28]	eval-auc:0.48619
Trial 28 complete
[0]	eval-auc:0.52548
[31]	eval-auc:0.54857
[0]	eval-auc:0.53929
[43]	eval-auc:0.58738
[0]	eval-auc:0.53119
[21]	eval-auc:0.38167
[0]	eval-auc:0.58524
[24]	eval-auc:0.63238
[0]	eval-auc:0.48786
[22]	eval-auc:0.49929
[0]	eval-auc:0.49881
[40]	eval-auc:0.59714
[0]	eval-auc:0.56905
[44]	eval-auc:0.57405
[0]	eval-auc:0.55095
[22]	eval-auc:0.57357
[0]	eval-auc:0.60071
[21]	eval-auc:0.62357
[0]	eval-auc:0.41024
[25]	eval-auc:0.42619
Trial 29 complete
[0]	eval-auc:0.53310
[25]	eval-auc:0.49738
[0]	eval-auc:0.53619
[24]	eval-auc:0.54952
[0]	eval-auc:0.53262
[21]	eval-auc:0.46190
[0]	eval-auc:0.59286
[29]	eval-auc:0.65333
[0]	eval-auc:0.48119
[23]	eval-auc:0.50833
[0]	eval-auc:0.51905
[23]	eval-auc:0.55690
[0]	eval-auc:0.59667
[38]	eval-auc:0.59881
[0]	eval-auc:0.55476
[21]	eval-auc:0.57857
[0]	eval-auc:0.63405
[24]	eval-auc:0.64619
[0]	eval-auc:0.39810
[64]	eval-auc:0.45048
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 09:25:34,496 - INFO - Success: XGBoost - openml__credit-g__31_50pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__credit-g__31_50pct_missing', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50714
[20]	eval-auc:0.50714
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50714
[19]	eval-auc:0.50714
[0]	eval-auc:0.47857
[20]	eval-auc:0.47857
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.48333
[19]	eval-auc:0.48333
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 1 complete
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50714
[19]	eval-auc:0.50714
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50714
[19]	eval-auc:0.50714
[0]	eval-auc:0.47857
[19]	eval-auc:0.47857
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 2 complete
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.50714
[20]	eval-auc:0.50714
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.48333
[19]	eval-auc:0.48333
[0]	eval-auc:0.50714
[19]	eval-auc:0.50714
[0]	eval-auc:0.47857
[19]	eval-auc:0.47857
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 3 complete
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.50714
[19]	eval-auc:0.50714
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50714
[20]	eval-auc:0.50714
[0]	eval-auc:0.47857
[19]	eval-auc:0.47857
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 4 complete
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.50000
[20]	eval-auc:0.48333
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.47857
[19]	eval-auc:0.47857
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 5 complete
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.50000
[20]	eval-auc:0.48333
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.47857
[20]	eval-auc:0.47857
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 6 complete
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.50714
[20]	eval-auc:0.50714
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50714
[20]	eval-auc:0.50714
[0]	eval-auc:0.47857
[19]	eval-auc:0.47857
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 7 complete
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.48333
[19]	eval-auc:0.48333
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.47857
[20]	eval-auc:0.47857
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.48333
[19]	eval-auc:0.48333
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 8 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.49286
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.47857
[20]	eval-auc:0.47857
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[31]	eval-auc:0.51667
Trial 9 complete
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.48333
[19]	eval-auc:0.48333
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.47857
[20]	eval-auc:0.47857
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.48333
[19]	eval-auc:0.48333
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 10 complete
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50714
[19]	eval-auc:0.50714
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.48333
[19]	eval-auc:0.48333
[0]	eval-auc:0.50714
[19]	eval-auc:0.50714
[0]	eval-auc:0.47857
[19]	eval-auc:0.47857
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 11 complete
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.50714
[19]	eval-auc:0.50714
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50714
[20]	eval-auc:0.50714
[0]	eval-auc:0.47857
[20]	eval-auc:0.47857
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.48333
[19]	eval-auc:0.48333
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 12 complete
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50714
[19]	eval-auc:0.50714
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50714
[19]	eval-auc:0.50714
[0]	eval-auc:0.47857
[19]	eval-auc:0.47857
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 13 complete
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50714
[19]	eval-auc:0.50714
[0]	eval-auc:0.47857
[19]	eval-auc:0.47857
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.48333
[19]	eval-auc:0.48333
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 14 complete
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.47857
[20]	eval-auc:0.47857
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 15 complete
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50714
[19]	eval-auc:0.50714
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.48333
[19]	eval-auc:0.48333
[0]	eval-auc:0.50714
[20]	eval-auc:0.50714
[0]	eval-auc:0.47857
[19]	eval-auc:0.47857
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.48333
[19]	eval-auc:0.48333
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 16 complete
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50714
[20]	eval-auc:0.50714
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50714
[19]	eval-auc:0.50714
[0]	eval-auc:0.47857
[20]	eval-auc:0.47857
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 17 complete
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.50714
[20]	eval-auc:0.50714
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.48333
[19]	eval-auc:0.48333
[0]	eval-auc:0.50714
[20]	eval-auc:0.50714
[0]	eval-auc:0.47857
[20]	eval-auc:0.47857
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.48333
[19]	eval-auc:0.48333
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 18 complete
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.48333
[19]	eval-auc:0.48333
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.47857
[19]	eval-auc:0.47857
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 19 complete
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.48333
[19]	eval-auc:0.48333
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.47857
[20]	eval-auc:0.47857
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.48333
[19]	eval-auc:0.48333
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 20 complete
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.50000
[20]	eval-auc:0.48333
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.47857
[19]	eval-auc:0.47857
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 21 complete
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.47857
[20]	eval-auc:0.47857
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.48333
[19]	eval-auc:0.48333
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 22 complete
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50714
[19]	eval-auc:0.50714
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50714
[19]	eval-auc:0.50714
[0]	eval-auc:0.47857
[19]	eval-auc:0.47857
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.48333
[19]	eval-auc:0.48333
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 23 complete
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.47857
[20]	eval-auc:0.47857
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[38]	eval-auc:0.51667
Trial 24 complete
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.47857
[20]	eval-auc:0.47857
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 25 complete
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.50714
[20]	eval-auc:0.50714
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50714
[20]	eval-auc:0.50714
[0]	eval-auc:0.47857
[19]	eval-auc:0.47857
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 26 complete
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50714
[19]	eval-auc:0.50714
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50714
[19]	eval-auc:0.50714
[0]	eval-auc:0.47857
[20]	eval-auc:0.47857
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 27 complete
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.47857
[20]	eval-auc:0.47857
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 28 complete
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50714
[20]	eval-auc:0.50714
[0]	eval-auc:0.49286
[20]	eval-auc:0.49286
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50714
[20]	eval-auc:0.50714
[0]	eval-auc:0.47857
[19]	eval-auc:0.47857
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 29 complete
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.50714
[19]	eval-auc:0.50714
[0]	eval-auc:0.49286
[19]	eval-auc:0.49286
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50714
[20]	eval-auc:0.50714
[0]	eval-auc:0.47857
[19]	eval-auc:0.47857
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.48333
[20]	eval-auc:0.48333
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 09:26:29,780 - INFO - Success: XGBoost - openml__credit-g__31_75pct_missing
Output:
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__credit-g__31_75pct_missing', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 1 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 2 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 3 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 4 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 5 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 6 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 7 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 8 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 9 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 10 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 11 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 12 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 13 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 14 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 15 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 16 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 17 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 18 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 19 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 20 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 21 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 22 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 23 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 24 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 25 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 26 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 27 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 28 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 29 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 09:27:36,266 - INFO - Success: XGBoost - openml__diabetes__37_100pct
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__diabetes__37_100pct', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.71148
[82]	eval-auc:0.76296
[0]	eval-auc:0.83111
[25]	eval-auc:0.85630
[0]	eval-auc:0.75889
[49]	eval-auc:0.80444
[0]	eval-auc:0.80000
[19]	eval-auc:0.77519
[0]	eval-auc:0.85519
[26]	eval-auc:0.87259
[0]	eval-auc:0.80444
[22]	eval-auc:0.81333
[0]	eval-auc:0.85444
[42]	eval-auc:0.87185
[0]	eval-auc:0.74423
[60]	eval-auc:0.82692
[0]	eval-auc:0.73538
[36]	eval-auc:0.77308
[0]	eval-auc:0.82148
[35]	eval-auc:0.87407
Trial 1 complete
[0]	eval-auc:0.75222
[25]	eval-auc:0.75667
[0]	eval-auc:0.82074
[24]	eval-auc:0.84074
[0]	eval-auc:0.73111
[29]	eval-auc:0.78630
[0]	eval-auc:0.78074
[41]	eval-auc:0.79111
[0]	eval-auc:0.82148
[27]	eval-auc:0.87926
[0]	eval-auc:0.79111
[25]	eval-auc:0.79704
[0]	eval-auc:0.88333
[19]	eval-auc:0.87370
[0]	eval-auc:0.75115
[76]	eval-auc:0.81692
[0]	eval-auc:0.75000
[75]	eval-auc:0.78846
[0]	eval-auc:0.87407
[20]	eval-auc:0.87556
Trial 2 complete
[0]	eval-auc:0.75222
[21]	eval-auc:0.74963
[0]	eval-auc:0.82074
[64]	eval-auc:0.85926
[0]	eval-auc:0.73111
[56]	eval-auc:0.81037
[0]	eval-auc:0.78074
[39]	eval-auc:0.78148
[0]	eval-auc:0.89222
[25]	eval-auc:0.87481
[0]	eval-auc:0.79111
[64]	eval-auc:0.81185
[0]	eval-auc:0.88333
[19]	eval-auc:0.86963
[0]	eval-auc:0.75115
[81]	eval-auc:0.81769
[0]	eval-auc:0.75000
[30]	eval-auc:0.77385
[0]	eval-auc:0.87407
[37]	eval-auc:0.87852
Trial 3 complete
[0]	eval-auc:0.71148
[60]	eval-auc:0.74667
[0]	eval-auc:0.83111
[62]	eval-auc:0.86741
[0]	eval-auc:0.75889
[67]	eval-auc:0.79630
[0]	eval-auc:0.80000
[20]	eval-auc:0.76296
[0]	eval-auc:0.85519
[25]	eval-auc:0.87630
[0]	eval-auc:0.80444
[23]	eval-auc:0.82148
[0]	eval-auc:0.85444
[33]	eval-auc:0.86963
[0]	eval-auc:0.74423
[52]	eval-auc:0.81538
[0]	eval-auc:0.73538
[38]	eval-auc:0.78385
[0]	eval-auc:0.82148
[60]	eval-auc:0.88296
Trial 4 complete
[0]	eval-auc:0.71519
[41]	eval-auc:0.73556
[0]	eval-auc:0.76444
[42]	eval-auc:0.83704
[0]	eval-auc:0.72296
[67]	eval-auc:0.80000
[0]	eval-auc:0.74296
[42]	eval-auc:0.75481
[0]	eval-auc:0.81778
[25]	eval-auc:0.81037
[0]	eval-auc:0.79556
[58]	eval-auc:0.82519
[0]	eval-auc:0.84481
[23]	eval-auc:0.86370
[0]	eval-auc:0.79269
[47]	eval-auc:0.79846
[0]	eval-auc:0.78500
[39]	eval-auc:0.78231
[0]	eval-auc:0.85481
[46]	eval-auc:0.88593
Trial 5 complete
[0]	eval-auc:0.72481
[40]	eval-auc:0.74370
[0]	eval-auc:0.78778
[56]	eval-auc:0.88000
[0]	eval-auc:0.70296
[60]	eval-auc:0.81407
[0]	eval-auc:0.79889
[26]	eval-auc:0.80333
[0]	eval-auc:0.86370
[26]	eval-auc:0.86667
[0]	eval-auc:0.75111
[40]	eval-auc:0.81111
[0]	eval-auc:0.87963
[19]	eval-auc:0.85481
[0]	eval-auc:0.77231
[31]	eval-auc:0.83538
[0]	eval-auc:0.71308
[26]	eval-auc:0.77385
[0]	eval-auc:0.89741
[20]	eval-auc:0.88296
Trial 6 complete
[0]	eval-auc:0.74741
[20]	eval-auc:0.72037
[0]	eval-auc:0.77926
[19]	eval-auc:0.76000
[0]	eval-auc:0.75111
[47]	eval-auc:0.78000
[0]	eval-auc:0.71889
[19]	eval-auc:0.71074
[0]	eval-auc:0.80926
[39]	eval-auc:0.85778
[0]	eval-auc:0.76778
[21]	eval-auc:0.78519
[0]	eval-auc:0.82852
[73]	eval-auc:0.88741
[0]	eval-auc:0.74885
[20]	eval-auc:0.74500
[0]	eval-auc:0.75154
[24]	eval-auc:0.76615
[0]	eval-auc:0.83889
[22]	eval-auc:0.84852
Trial 7 complete
[0]	eval-auc:0.64852
[63]	eval-auc:0.77889
[0]	eval-auc:0.76741
[55]	eval-auc:0.88222
[0]	eval-auc:0.67074
[99]	eval-auc:0.82815
[0]	eval-auc:0.78704
[23]	eval-auc:0.80667
[0]	eval-auc:0.80926
[29]	eval-auc:0.86963
[0]	eval-auc:0.71481
[70]	eval-auc:0.82444
[0]	eval-auc:0.76370
[40]	eval-auc:0.85185
[0]	eval-auc:0.75115
[92]	eval-auc:0.84154
[0]	eval-auc:0.71000
[25]	eval-auc:0.80769
[0]	eval-auc:0.81185
[85]	eval-auc:0.90667
Trial 8 complete
[0]	eval-auc:0.73296
[20]	eval-auc:0.72370
[0]	eval-auc:0.79148
[46]	eval-auc:0.81259
[0]	eval-auc:0.73259
[58]	eval-auc:0.78741
[0]	eval-auc:0.72889
[24]	eval-auc:0.72889
[0]	eval-auc:0.81333
[25]	eval-auc:0.83556
[0]	eval-auc:0.83222
[19]	eval-auc:0.81111
[0]	eval-auc:0.86259
[25]	eval-auc:0.88074
[0]	eval-auc:0.78962
[51]	eval-auc:0.81231
[0]	eval-auc:0.77077
[43]	eval-auc:0.77769
[0]	eval-auc:0.84296
[45]	eval-auc:0.89185
Trial 9 complete
[0]	eval-auc:0.64852
[82]	eval-auc:0.76889
[0]	eval-auc:0.76741
[27]	eval-auc:0.83889
[0]	eval-auc:0.67074
[46]	eval-auc:0.79000
[0]	eval-auc:0.78704
[23]	eval-auc:0.81778
[0]	eval-auc:0.80926
[52]	eval-auc:0.89259
[0]	eval-auc:0.71481
[26]	eval-auc:0.76333
[0]	eval-auc:0.76370
[87]	eval-auc:0.85185
[0]	eval-auc:0.75115
[60]	eval-auc:0.81654
[0]	eval-auc:0.71000
[54]	eval-auc:0.80192
[0]	eval-auc:0.81185
[31]	eval-auc:0.88296
Trial 10 complete
[0]	eval-auc:0.75000
[20]	eval-auc:0.71556
[0]	eval-auc:0.77259
[47]	eval-auc:0.82667
[0]	eval-auc:0.74778
[49]	eval-auc:0.78593
[0]	eval-auc:0.72296
[25]	eval-auc:0.70741
[0]	eval-auc:0.82296
[24]	eval-auc:0.84370
[0]	eval-auc:0.77926
[32]	eval-auc:0.81704
[0]	eval-auc:0.82926
[27]	eval-auc:0.86000
[0]	eval-auc:0.73962
[71]	eval-auc:0.79769
[0]	eval-auc:0.76885
[38]	eval-auc:0.77231
[0]	eval-auc:0.81667
[29]	eval-auc:0.89333
Trial 11 complete
[0]	eval-auc:0.72481
[28]	eval-auc:0.75333
[0]	eval-auc:0.78778
[67]	eval-auc:0.86444
[0]	eval-auc:0.70296
[88]	eval-auc:0.83259
[0]	eval-auc:0.79889
[24]	eval-auc:0.81000
[0]	eval-auc:0.86370
[25]	eval-auc:0.87630
[0]	eval-auc:0.75111
[43]	eval-auc:0.80815
[0]	eval-auc:0.87963
[24]	eval-auc:0.86296
[0]	eval-auc:0.76615
[53]	eval-auc:0.83462
[0]	eval-auc:0.71308
[27]	eval-auc:0.77923
[0]	eval-auc:0.84444
[23]	eval-auc:0.88222
Trial 12 complete
[0]	eval-auc:0.72481
[75]	eval-auc:0.76593
[0]	eval-auc:0.78778
[22]	eval-auc:0.84741
[0]	eval-auc:0.70296
[37]	eval-auc:0.80519
[0]	eval-auc:0.79889
[26]	eval-auc:0.80926
[0]	eval-auc:0.86370
[26]	eval-auc:0.88074
[0]	eval-auc:0.75111
[75]	eval-auc:0.81556
[0]	eval-auc:0.87963
[28]	eval-auc:0.86889
[0]	eval-auc:0.76615
[99]	eval-auc:0.84769
[0]	eval-auc:0.71308
[34]	eval-auc:0.77692
[0]	eval-auc:0.84444
[24]	eval-auc:0.87926
Trial 13 complete
[0]	eval-auc:0.73148
[19]	eval-auc:0.71630
[0]	eval-auc:0.77222
[45]	eval-auc:0.82519
[0]	eval-auc:0.74778
[45]	eval-auc:0.80889
[0]	eval-auc:0.72296
[38]	eval-auc:0.74222
[0]	eval-auc:0.82963
[36]	eval-auc:0.83556
[0]	eval-auc:0.76148
[49]	eval-auc:0.80741
[0]	eval-auc:0.82926
[31]	eval-auc:0.84296
[0]	eval-auc:0.73962
[61]	eval-auc:0.79692
[0]	eval-auc:0.76885
[35]	eval-auc:0.76923
[0]	eval-auc:0.83296
[42]	eval-auc:0.86741
Trial 14 complete
[0]	eval-auc:0.70926
[99]	eval-auc:0.75926
[0]	eval-auc:0.81741
[38]	eval-auc:0.84259
[0]	eval-auc:0.75519
[99]	eval-auc:0.79630
[0]	eval-auc:0.79778
[19]	eval-auc:0.76556
[0]	eval-auc:0.84407
[36]	eval-auc:0.87778
[0]	eval-auc:0.80963
[36]	eval-auc:0.82296
[0]	eval-auc:0.87519
[20]	eval-auc:0.85963
[0]	eval-auc:0.75500
[52]	eval-auc:0.79231
[0]	eval-auc:0.75846
[80]	eval-auc:0.77231
[0]	eval-auc:0.85593
[25]	eval-auc:0.86185
Trial 15 complete
[0]	eval-auc:0.74815
[20]	eval-auc:0.69704
[0]	eval-auc:0.72630
[79]	eval-auc:0.83556
[0]	eval-auc:0.75741
[28]	eval-auc:0.76519
[0]	eval-auc:0.70222
[46]	eval-auc:0.74667
[0]	eval-auc:0.80963
[32]	eval-auc:0.85185
[0]	eval-auc:0.71407
[88]	eval-auc:0.81630
[0]	eval-auc:0.82296
[49]	eval-auc:0.86815
[0]	eval-auc:0.73654
[87]	eval-auc:0.80769
[0]	eval-auc:0.74154
[21]	eval-auc:0.73692
[0]	eval-auc:0.76926
[65]	eval-auc:0.89259
Trial 16 complete
[0]	eval-auc:0.72481
[22]	eval-auc:0.74111
[0]	eval-auc:0.78778
[25]	eval-auc:0.83630
[0]	eval-auc:0.70296
[34]	eval-auc:0.79259
[0]	eval-auc:0.79889
[43]	eval-auc:0.80852
[0]	eval-auc:0.86370
[29]	eval-auc:0.89185
[0]	eval-auc:0.75111
[27]	eval-auc:0.77926
[0]	eval-auc:0.87963
[21]	eval-auc:0.86815
[0]	eval-auc:0.76615
[99]	eval-auc:0.83923
[0]	eval-auc:0.71308
[64]	eval-auc:0.79192
[0]	eval-auc:0.84444
[20]	eval-auc:0.88704
Trial 17 complete
[0]	eval-auc:0.72481
[22]	eval-auc:0.74259
[0]	eval-auc:0.78778
[26]	eval-auc:0.83704
[0]	eval-auc:0.70296
[28]	eval-auc:0.78667
[0]	eval-auc:0.79889
[38]	eval-auc:0.80148
[0]	eval-auc:0.86370
[30]	eval-auc:0.89407
[0]	eval-auc:0.75111
[22]	eval-auc:0.77741
[0]	eval-auc:0.87963
[20]	eval-auc:0.86296
[0]	eval-auc:0.76615
[35]	eval-auc:0.80692
[0]	eval-auc:0.71308
[66]	eval-auc:0.79385
[0]	eval-auc:0.84444
[21]	eval-auc:0.88704
Trial 18 complete
[0]	eval-auc:0.74259
[35]	eval-auc:0.74519
[0]	eval-auc:0.80370
[96]	eval-auc:0.86000
[0]	eval-auc:0.77963
[30]	eval-auc:0.78074
[0]	eval-auc:0.78333
[20]	eval-auc:0.75889
[0]	eval-auc:0.86037
[33]	eval-auc:0.86741
[0]	eval-auc:0.76370
[26]	eval-auc:0.80519
[0]	eval-auc:0.83741
[49]	eval-auc:0.87778
[0]	eval-auc:0.79038
[57]	eval-auc:0.81615
[0]	eval-auc:0.77346
[20]	eval-auc:0.76692
[0]	eval-auc:0.84000
[29]	eval-auc:0.86370
Trial 19 complete
[0]	eval-auc:0.64852
[84]	eval-auc:0.76889
[0]	eval-auc:0.76741
[26]	eval-auc:0.84259
[0]	eval-auc:0.67074
[99]	eval-auc:0.80259
[0]	eval-auc:0.78704
[23]	eval-auc:0.81778
[0]	eval-auc:0.80926
[56]	eval-auc:0.89111
[0]	eval-auc:0.71481
[26]	eval-auc:0.76630
[0]	eval-auc:0.76370
[81]	eval-auc:0.85185
[0]	eval-auc:0.75115
[61]	eval-auc:0.81885
[0]	eval-auc:0.71000
[48]	eval-auc:0.80808
[0]	eval-auc:0.81185
[31]	eval-auc:0.88296
Trial 20 complete
[0]	eval-auc:0.72852
[42]	eval-auc:0.74741
[0]	eval-auc:0.75296
[56]	eval-auc:0.84593
[0]	eval-auc:0.75556
[34]	eval-auc:0.80296
[0]	eval-auc:0.78333
[20]	eval-auc:0.75259
[0]	eval-auc:0.84667
[20]	eval-auc:0.84889
[0]	eval-auc:0.77333
[29]	eval-auc:0.80222
[0]	eval-auc:0.85704
[27]	eval-auc:0.86370
[0]	eval-auc:0.81000
[40]	eval-auc:0.82231
[0]	eval-auc:0.76808
[21]	eval-auc:0.77692
[0]	eval-auc:0.88481
[29]	eval-auc:0.87556
Trial 21 complete
[0]	eval-auc:0.64852
[81]	eval-auc:0.76741
[0]	eval-auc:0.76741
[34]	eval-auc:0.84148
[0]	eval-auc:0.67074
[99]	eval-auc:0.79630
[0]	eval-auc:0.78704
[22]	eval-auc:0.81963
[0]	eval-auc:0.80926
[67]	eval-auc:0.89111
[0]	eval-auc:0.71481
[33]	eval-auc:0.76370
[0]	eval-auc:0.76370
[99]	eval-auc:0.85111
[0]	eval-auc:0.75115
[66]	eval-auc:0.82038
[0]	eval-auc:0.71000
[55]	eval-auc:0.81154
[0]	eval-auc:0.81185
[34]	eval-auc:0.88259
Trial 22 complete
[0]	eval-auc:0.72481
[40]	eval-auc:0.76741
[0]	eval-auc:0.78778
[46]	eval-auc:0.87630
[0]	eval-auc:0.70296
[59]	eval-auc:0.81111
[0]	eval-auc:0.79889
[22]	eval-auc:0.80148
[0]	eval-auc:0.86370
[21]	eval-auc:0.87704
[0]	eval-auc:0.75111
[53]	eval-auc:0.83185
[0]	eval-auc:0.87963
[23]	eval-auc:0.85704
[0]	eval-auc:0.76615
[58]	eval-auc:0.82385
[0]	eval-auc:0.71308
[23]	eval-auc:0.77462
[0]	eval-auc:0.84444
[35]	eval-auc:0.88741
Trial 23 complete
[0]	eval-auc:0.68593
[85]	eval-auc:0.75630
[0]	eval-auc:0.80963
[41]	eval-auc:0.84815
[0]	eval-auc:0.75333
[75]	eval-auc:0.80444
[0]	eval-auc:0.79963
[20]	eval-auc:0.77889
[0]	eval-auc:0.84333
[26]	eval-auc:0.86074
[0]	eval-auc:0.81407
[29]	eval-auc:0.83481
[0]	eval-auc:0.88370
[38]	eval-auc:0.88370
[0]	eval-auc:0.78423
[36]	eval-auc:0.79308
[0]	eval-auc:0.77538
[19]	eval-auc:0.76462
[0]	eval-auc:0.86333
[80]	eval-auc:0.88815
Trial 24 complete
[0]	eval-auc:0.71000
[89]	eval-auc:0.75185
[0]	eval-auc:0.82185
[20]	eval-auc:0.80963
[0]	eval-auc:0.75111
[32]	eval-auc:0.78519
[0]	eval-auc:0.76037
[24]	eval-auc:0.77333
[0]	eval-auc:0.82444
[25]	eval-auc:0.81556
[0]	eval-auc:0.80259
[36]	eval-auc:0.81111
[0]	eval-auc:0.85370
[43]	eval-auc:0.87926
[0]	eval-auc:0.75654
[36]	eval-auc:0.78615
[0]	eval-auc:0.79115
[20]	eval-auc:0.75538
[0]	eval-auc:0.86074
[74]	eval-auc:0.87111
Trial 25 complete
[0]	eval-auc:0.76444
[19]	eval-auc:0.72852
[0]	eval-auc:0.77963
[19]	eval-auc:0.77037
[0]	eval-auc:0.75111
[52]	eval-auc:0.78296
[0]	eval-auc:0.71407
[44]	eval-auc:0.71963
[0]	eval-auc:0.81185
[38]	eval-auc:0.83630
[0]	eval-auc:0.76074
[62]	eval-auc:0.79926
[0]	eval-auc:0.82852
[37]	eval-auc:0.87111
[0]	eval-auc:0.74885
[99]	eval-auc:0.79692
[0]	eval-auc:0.75154
[25]	eval-auc:0.75692
[0]	eval-auc:0.82630
[64]	eval-auc:0.88815
Trial 26 complete
[0]	eval-auc:0.72481
[42]	eval-auc:0.76667
[0]	eval-auc:0.78778
[43]	eval-auc:0.86296
[0]	eval-auc:0.70296
[74]	eval-auc:0.81333
[0]	eval-auc:0.79889
[23]	eval-auc:0.79333
[0]	eval-auc:0.86370
[21]	eval-auc:0.88111
[0]	eval-auc:0.75111
[58]	eval-auc:0.82370
[0]	eval-auc:0.87963
[23]	eval-auc:0.85778
[0]	eval-auc:0.76615
[32]	eval-auc:0.84000
[0]	eval-auc:0.71308
[30]	eval-auc:0.77769
[0]	eval-auc:0.84444
[23]	eval-auc:0.87741
Trial 27 complete
[0]	eval-auc:0.75111
[40]	eval-auc:0.75778
[0]	eval-auc:0.83074
[40]	eval-auc:0.86889
[0]	eval-auc:0.72815
[37]	eval-auc:0.79111
[0]	eval-auc:0.78074
[24]	eval-auc:0.78667
[0]	eval-auc:0.89222
[19]	eval-auc:0.87333
[0]	eval-auc:0.79111
[74]	eval-auc:0.82889
[0]	eval-auc:0.88333
[22]	eval-auc:0.87556
[0]	eval-auc:0.75115
[29]	eval-auc:0.81923
[0]	eval-auc:0.75000
[28]	eval-auc:0.76231
[0]	eval-auc:0.86741
[48]	eval-auc:0.88148
Trial 28 complete
[0]	eval-auc:0.71519
[44]	eval-auc:0.75630
[0]	eval-auc:0.79704
[90]	eval-auc:0.85333
[0]	eval-auc:0.75407
[39]	eval-auc:0.79556
[0]	eval-auc:0.74259
[20]	eval-auc:0.73185
[0]	eval-auc:0.83889
[27]	eval-auc:0.83556
[0]	eval-auc:0.76889
[22]	eval-auc:0.81333
[0]	eval-auc:0.82889
[30]	eval-auc:0.88000
[0]	eval-auc:0.77346
[91]	eval-auc:0.81000
[0]	eval-auc:0.75385
[21]	eval-auc:0.76154
[0]	eval-auc:0.81444
[43]	eval-auc:0.88667
Trial 29 complete
[0]	eval-auc:0.74333
[20]	eval-auc:0.72000
[0]	eval-auc:0.74296
[54]	eval-auc:0.83111
[0]	eval-auc:0.74741
[43]	eval-auc:0.77778
[0]	eval-auc:0.69370
[37]	eval-auc:0.71704
[0]	eval-auc:0.82037
[23]	eval-auc:0.81259
[0]	eval-auc:0.74556
[66]	eval-auc:0.82296
[0]	eval-auc:0.80593
[28]	eval-auc:0.85333
[0]	eval-auc:0.73154
[63]	eval-auc:0.79692
[0]	eval-auc:0.73615
[49]	eval-auc:0.76923
[0]	eval-auc:0.80259
[31]	eval-auc:0.89778
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 09:28:39,069 - INFO - Success: XGBoost - openml__diabetes__37_25pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__diabetes__37_25pct_missing', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.46741
[25]	eval-auc:0.51296
[0]	eval-auc:0.52407
[61]	eval-auc:0.59222
[0]	eval-auc:0.58407
[50]	eval-auc:0.65185
[0]	eval-auc:0.49926
[64]	eval-auc:0.55481
[0]	eval-auc:0.56296
[55]	eval-auc:0.63519
[0]	eval-auc:0.49296
[52]	eval-auc:0.56889
[0]	eval-auc:0.51778
[26]	eval-auc:0.63074
[0]	eval-auc:0.52769
[34]	eval-auc:0.55692
[0]	eval-auc:0.51000
[32]	eval-auc:0.57115
[0]	eval-auc:0.57407
[50]	eval-auc:0.65889
Trial 1 complete
[0]	eval-auc:0.48704
[24]	eval-auc:0.48963
[0]	eval-auc:0.50593
[81]	eval-auc:0.60296
[0]	eval-auc:0.56074
[65]	eval-auc:0.63963
[0]	eval-auc:0.50926
[20]	eval-auc:0.50370
[0]	eval-auc:0.56296
[36]	eval-auc:0.60259
[0]	eval-auc:0.54407
[20]	eval-auc:0.53148
[0]	eval-auc:0.50815
[48]	eval-auc:0.64407
[0]	eval-auc:0.49000
[44]	eval-auc:0.53923
[0]	eval-auc:0.50885
[32]	eval-auc:0.53038
[0]	eval-auc:0.53704
[64]	eval-auc:0.63148
Trial 2 complete
[0]	eval-auc:0.48704
[26]	eval-auc:0.47704
[0]	eval-auc:0.50593
[57]	eval-auc:0.60370
[0]	eval-auc:0.56074
[37]	eval-auc:0.64481
[0]	eval-auc:0.50926
[21]	eval-auc:0.52111
[0]	eval-auc:0.56296
[29]	eval-auc:0.60741
[0]	eval-auc:0.54407
[20]	eval-auc:0.53481
[0]	eval-auc:0.50815
[31]	eval-auc:0.64556
[0]	eval-auc:0.49000
[35]	eval-auc:0.53731
[0]	eval-auc:0.50885
[37]	eval-auc:0.57538
[0]	eval-auc:0.53704
[50]	eval-auc:0.63963
Trial 3 complete
[0]	eval-auc:0.46741
[50]	eval-auc:0.54037
[0]	eval-auc:0.52407
[45]	eval-auc:0.59667
[0]	eval-auc:0.58407
[47]	eval-auc:0.64815
[0]	eval-auc:0.49926
[57]	eval-auc:0.56296
[0]	eval-auc:0.56296
[38]	eval-auc:0.62111
[0]	eval-auc:0.49296
[47]	eval-auc:0.59852
[0]	eval-auc:0.51778
[50]	eval-auc:0.65148
[0]	eval-auc:0.52769
[33]	eval-auc:0.52923
[0]	eval-auc:0.51000
[40]	eval-auc:0.57654
[0]	eval-auc:0.57407
[45]	eval-auc:0.64407
Trial 4 complete
[0]	eval-auc:0.47741
[39]	eval-auc:0.54926
[0]	eval-auc:0.50000
[35]	eval-auc:0.58444
[0]	eval-auc:0.60296
[29]	eval-auc:0.66148
[0]	eval-auc:0.50185
[38]	eval-auc:0.54222
[0]	eval-auc:0.67259
[20]	eval-auc:0.62000
[0]	eval-auc:0.53444
[35]	eval-auc:0.61000
[0]	eval-auc:0.62259
[24]	eval-auc:0.69407
[0]	eval-auc:0.56423
[23]	eval-auc:0.52308
[0]	eval-auc:0.54692
[34]	eval-auc:0.57077
[0]	eval-auc:0.66333
[21]	eval-auc:0.65037
Trial 5 complete
[0]	eval-auc:0.49704
[39]	eval-auc:0.54926
[0]	eval-auc:0.49741
[39]	eval-auc:0.60037
[0]	eval-auc:0.54407
[38]	eval-auc:0.65556
[0]	eval-auc:0.50926
[42]	eval-auc:0.55037
[0]	eval-auc:0.56296
[36]	eval-auc:0.66000
[0]	eval-auc:0.54407
[37]	eval-auc:0.56111
[0]	eval-auc:0.49000
[36]	eval-auc:0.61370
[0]	eval-auc:0.49000
[40]	eval-auc:0.55000
[0]	eval-auc:0.49923
[37]	eval-auc:0.56538
[0]	eval-auc:0.50000
[37]	eval-auc:0.65370
Trial 6 complete
[0]	eval-auc:0.48296
[63]	eval-auc:0.54259
[0]	eval-auc:0.54148
[25]	eval-auc:0.59000
[0]	eval-auc:0.62185
[43]	eval-auc:0.67926
[0]	eval-auc:0.48111
[52]	eval-auc:0.51556
[0]	eval-auc:0.64556
[23]	eval-auc:0.59000
[0]	eval-auc:0.53111
[60]	eval-auc:0.58556
[0]	eval-auc:0.62222
[40]	eval-auc:0.65667
[0]	eval-auc:0.54385
[39]	eval-auc:0.58538
[0]	eval-auc:0.46038
[66]	eval-auc:0.57769
[0]	eval-auc:0.55407
[55]	eval-auc:0.67407
Trial 7 complete
[0]	eval-auc:0.51704
[21]	eval-auc:0.52296
[0]	eval-auc:0.49667
[82]	eval-auc:0.60444
[0]	eval-auc:0.51704
[54]	eval-auc:0.62630
[0]	eval-auc:0.50926
[22]	eval-auc:0.47296
[0]	eval-auc:0.54481
[64]	eval-auc:0.65333
[0]	eval-auc:0.51704
[55]	eval-auc:0.55630
[0]	eval-auc:0.49000
[30]	eval-auc:0.63222
[0]	eval-auc:0.50000
[37]	eval-auc:0.53538
[0]	eval-auc:0.50000
[79]	eval-auc:0.61154
[0]	eval-auc:0.50000
[63]	eval-auc:0.68370
Trial 8 complete
[0]	eval-auc:0.48593
[54]	eval-auc:0.53296
[0]	eval-auc:0.53259
[47]	eval-auc:0.58963
[0]	eval-auc:0.59444
[45]	eval-auc:0.65037
[0]	eval-auc:0.50370
[27]	eval-auc:0.52037
[0]	eval-auc:0.64556
[42]	eval-auc:0.63741
[0]	eval-auc:0.52593
[38]	eval-auc:0.56333
[0]	eval-auc:0.62259
[28]	eval-auc:0.67556
[0]	eval-auc:0.55538
[27]	eval-auc:0.54423
[0]	eval-auc:0.55423
[67]	eval-auc:0.53500
[0]	eval-auc:0.66111
[23]	eval-auc:0.64556
Trial 9 complete
[0]	eval-auc:0.51704
[23]	eval-auc:0.54481
[0]	eval-auc:0.49667
[33]	eval-auc:0.51741
[0]	eval-auc:0.51704
[46]	eval-auc:0.59000
[0]	eval-auc:0.50926
[25]	eval-auc:0.49593
[0]	eval-auc:0.54481
[65]	eval-auc:0.62778
[0]	eval-auc:0.51704
[19]	eval-auc:0.49370
[0]	eval-auc:0.49000
[55]	eval-auc:0.65963
[0]	eval-auc:0.50000
[20]	eval-auc:0.49000
[0]	eval-auc:0.50000
[99]	eval-auc:0.58308
[0]	eval-auc:0.50000
[34]	eval-auc:0.55407
Trial 10 complete
[0]	eval-auc:0.49222
[32]	eval-auc:0.54556
[0]	eval-auc:0.50778
[31]	eval-auc:0.58185
[0]	eval-auc:0.60037
[31]	eval-auc:0.68037
[0]	eval-auc:0.50778
[38]	eval-auc:0.54481
[0]	eval-auc:0.61778
[21]	eval-auc:0.63593
[0]	eval-auc:0.48519
[29]	eval-auc:0.56296
[0]	eval-auc:0.57111
[25]	eval-auc:0.67148
[0]	eval-auc:0.54615
[20]	eval-auc:0.57000
[0]	eval-auc:0.54000
[27]	eval-auc:0.55577
[0]	eval-auc:0.57889
[23]	eval-auc:0.66148
Trial 11 complete
[0]	eval-auc:0.49704
[42]	eval-auc:0.54926
[0]	eval-auc:0.49741
[35]	eval-auc:0.58556
[0]	eval-auc:0.54407
[35]	eval-auc:0.61926
[0]	eval-auc:0.50926
[53]	eval-auc:0.55741
[0]	eval-auc:0.56296
[28]	eval-auc:0.63667
[0]	eval-auc:0.54407
[19]	eval-auc:0.53704
[0]	eval-auc:0.49000
[27]	eval-auc:0.62037
[0]	eval-auc:0.49000
[25]	eval-auc:0.56269
[0]	eval-auc:0.49923
[52]	eval-auc:0.57077
[0]	eval-auc:0.50000
[36]	eval-auc:0.65704
Trial 12 complete
[0]	eval-auc:0.49704
[27]	eval-auc:0.50963
[0]	eval-auc:0.49741
[62]	eval-auc:0.58963
[0]	eval-auc:0.54407
[44]	eval-auc:0.62815
[0]	eval-auc:0.50926
[21]	eval-auc:0.48074
[0]	eval-auc:0.56296
[77]	eval-auc:0.68519
[0]	eval-auc:0.54407
[19]	eval-auc:0.52963
[0]	eval-auc:0.49000
[29]	eval-auc:0.64556
[0]	eval-auc:0.49000
[41]	eval-auc:0.54846
[0]	eval-auc:0.49923
[44]	eval-auc:0.58346
[0]	eval-auc:0.50000
[58]	eval-auc:0.68111
Trial 13 complete
[0]	eval-auc:0.49222
[28]	eval-auc:0.54481
[0]	eval-auc:0.50778
[26]	eval-auc:0.59148
[0]	eval-auc:0.60037
[23]	eval-auc:0.65148
[0]	eval-auc:0.50778
[32]	eval-auc:0.55074
[0]	eval-auc:0.59407
[25]	eval-auc:0.63963
[0]	eval-auc:0.50000
[26]	eval-auc:0.57222
[0]	eval-auc:0.57111
[27]	eval-auc:0.64815
[0]	eval-auc:0.54615
[21]	eval-auc:0.52923
[0]	eval-auc:0.54000
[28]	eval-auc:0.57846
[0]	eval-auc:0.57889
[23]	eval-auc:0.68481
Trial 14 complete
[0]	eval-auc:0.46741
[34]	eval-auc:0.50148
[0]	eval-auc:0.51593
[99]	eval-auc:0.60037
[0]	eval-auc:0.58407
[98]	eval-auc:0.68407
[0]	eval-auc:0.49926
[21]	eval-auc:0.49407
[0]	eval-auc:0.56296
[55]	eval-auc:0.60444
[0]	eval-auc:0.49296
[99]	eval-auc:0.58667
[0]	eval-auc:0.51778
[55]	eval-auc:0.66185
[0]	eval-auc:0.52769
[50]	eval-auc:0.57269
[0]	eval-auc:0.53538
[53]	eval-auc:0.54154
[0]	eval-auc:0.57407
[97]	eval-auc:0.63852
Trial 15 complete
[0]	eval-auc:0.48296
[48]	eval-auc:0.54593
[0]	eval-auc:0.53407
[50]	eval-auc:0.59222
[0]	eval-auc:0.60889
[41]	eval-auc:0.66815
[0]	eval-auc:0.48185
[30]	eval-auc:0.49889
[0]	eval-auc:0.64444
[21]	eval-auc:0.63593
[0]	eval-auc:0.50111
[42]	eval-auc:0.58000
[0]	eval-auc:0.59519
[34]	eval-auc:0.66222
[0]	eval-auc:0.54615
[20]	eval-auc:0.59231
[0]	eval-auc:0.53538
[35]	eval-auc:0.57808
[0]	eval-auc:0.56148
[44]	eval-auc:0.68222
Trial 16 complete
[0]	eval-auc:0.49704
[40]	eval-auc:0.48296
[0]	eval-auc:0.49741
[99]	eval-auc:0.58519
[0]	eval-auc:0.54407
[53]	eval-auc:0.59704
[0]	eval-auc:0.50926
[31]	eval-auc:0.49815
[0]	eval-auc:0.56296
[57]	eval-auc:0.61259
[0]	eval-auc:0.54407
[20]	eval-auc:0.49667
[0]	eval-auc:0.49000
[45]	eval-auc:0.63296
[0]	eval-auc:0.49000
[84]	eval-auc:0.57462
[0]	eval-auc:0.49923
[79]	eval-auc:0.52577
[0]	eval-auc:0.50000
[33]	eval-auc:0.56185
Trial 17 complete
[0]	eval-auc:0.49704
[24]	eval-auc:0.51222
[0]	eval-auc:0.49741
[76]	eval-auc:0.57593
[0]	eval-auc:0.54407
[91]	eval-auc:0.62519
[0]	eval-auc:0.50926
[23]	eval-auc:0.49889
[0]	eval-auc:0.56296
[55]	eval-auc:0.63370
[0]	eval-auc:0.54407
[19]	eval-auc:0.49815
[0]	eval-auc:0.49000
[42]	eval-auc:0.63296
[0]	eval-auc:0.49000
[61]	eval-auc:0.55731
[0]	eval-auc:0.49923
[77]	eval-auc:0.53423
[0]	eval-auc:0.50000
[33]	eval-auc:0.57889
Trial 18 complete
[0]	eval-auc:0.49556
[31]	eval-auc:0.50704
[0]	eval-auc:0.50741
[91]	eval-auc:0.60259
[0]	eval-auc:0.58407
[76]	eval-auc:0.64778
[0]	eval-auc:0.49926
[20]	eval-auc:0.51667
[0]	eval-auc:0.57074
[30]	eval-auc:0.59370
[0]	eval-auc:0.47667
[79]	eval-auc:0.59630
[0]	eval-auc:0.55333
[28]	eval-auc:0.65889
[0]	eval-auc:0.53692
[34]	eval-auc:0.59500
[0]	eval-auc:0.55154
[37]	eval-auc:0.55346
[0]	eval-auc:0.55259
[25]	eval-auc:0.61815
Trial 19 complete
[0]	eval-auc:0.51704
[24]	eval-auc:0.54481
[0]	eval-auc:0.49667
[32]	eval-auc:0.51630
[0]	eval-auc:0.51704
[43]	eval-auc:0.58926
[0]	eval-auc:0.50926
[24]	eval-auc:0.49593
[0]	eval-auc:0.54481
[68]	eval-auc:0.62556
[0]	eval-auc:0.51704
[19]	eval-auc:0.49370
[0]	eval-auc:0.49000
[55]	eval-auc:0.65963
[0]	eval-auc:0.50000
[19]	eval-auc:0.49000
[0]	eval-auc:0.50000
[76]	eval-auc:0.59077
[0]	eval-auc:0.50000
[33]	eval-auc:0.55407
Trial 20 complete
[0]	eval-auc:0.49556
[51]	eval-auc:0.53259
[0]	eval-auc:0.50741
[35]	eval-auc:0.57704
[0]	eval-auc:0.57963
[30]	eval-auc:0.67074
[0]	eval-auc:0.51704
[43]	eval-auc:0.52963
[0]	eval-auc:0.57000
[21]	eval-auc:0.61889
[0]	eval-auc:0.46926
[35]	eval-auc:0.56111
[0]	eval-auc:0.55333
[39]	eval-auc:0.66778
[0]	eval-auc:0.53692
[25]	eval-auc:0.55962
[0]	eval-auc:0.54154
[43]	eval-auc:0.58538
[0]	eval-auc:0.55259
[38]	eval-auc:0.66704
Trial 21 complete
[0]	eval-auc:0.51704
[24]	eval-auc:0.53556
[0]	eval-auc:0.49667
[34]	eval-auc:0.51556
[0]	eval-auc:0.51704
[27]	eval-auc:0.57519
[0]	eval-auc:0.50926
[25]	eval-auc:0.49593
[0]	eval-auc:0.54481
[63]	eval-auc:0.65481
[0]	eval-auc:0.51704
[20]	eval-auc:0.49370
[0]	eval-auc:0.49000
[66]	eval-auc:0.65963
[0]	eval-auc:0.50000
[19]	eval-auc:0.49000
[0]	eval-auc:0.50000
[88]	eval-auc:0.59154
[0]	eval-auc:0.50000
[38]	eval-auc:0.56407
Trial 22 complete
[0]	eval-auc:0.49704
[21]	eval-auc:0.52704
[0]	eval-auc:0.49741
[50]	eval-auc:0.60222
[0]	eval-auc:0.54407
[27]	eval-auc:0.62259
[0]	eval-auc:0.50926
[20]	eval-auc:0.49741
[0]	eval-auc:0.56296
[47]	eval-auc:0.66667
[0]	eval-auc:0.54407
[37]	eval-auc:0.55593
[0]	eval-auc:0.49000
[39]	eval-auc:0.63852
[0]	eval-auc:0.49000
[23]	eval-auc:0.54115
[0]	eval-auc:0.49923
[29]	eval-auc:0.57846
[0]	eval-auc:0.50000
[32]	eval-auc:0.61852
Trial 23 complete
[0]	eval-auc:0.46741
[26]	eval-auc:0.51407
[0]	eval-auc:0.51593
[77]	eval-auc:0.59370
[0]	eval-auc:0.54000
[75]	eval-auc:0.65333
[0]	eval-auc:0.49926
[21]	eval-auc:0.52074
[0]	eval-auc:0.56222
[43]	eval-auc:0.60074
[0]	eval-auc:0.47000
[79]	eval-auc:0.57667
[0]	eval-auc:0.51778
[38]	eval-auc:0.65519
[0]	eval-auc:0.52769
[35]	eval-auc:0.61577
[0]	eval-auc:0.54346
[36]	eval-auc:0.56077
[0]	eval-auc:0.56593
[87]	eval-auc:0.68815
Trial 24 complete
[0]	eval-auc:0.43667
[59]	eval-auc:0.53630
[0]	eval-auc:0.54815
[76]	eval-auc:0.61148
[0]	eval-auc:0.58667
[62]	eval-auc:0.68593
[0]	eval-auc:0.50444
[59]	eval-auc:0.55963
[0]	eval-auc:0.66407
[23]	eval-auc:0.63593
[0]	eval-auc:0.54000
[64]	eval-auc:0.60000
[0]	eval-auc:0.61185
[45]	eval-auc:0.67185
[0]	eval-auc:0.55462
[29]	eval-auc:0.58423
[0]	eval-auc:0.50885
[25]	eval-auc:0.54808
[0]	eval-auc:0.66296
[36]	eval-auc:0.66370
Trial 25 complete
[0]	eval-auc:0.48296
[58]	eval-auc:0.55556
[0]	eval-auc:0.54148
[27]	eval-auc:0.59148
[0]	eval-auc:0.62185
[38]	eval-auc:0.66222
[0]	eval-auc:0.48111
[37]	eval-auc:0.49111
[0]	eval-auc:0.64556
[21]	eval-auc:0.56852
[0]	eval-auc:0.53111
[52]	eval-auc:0.55926
[0]	eval-auc:0.62222
[23]	eval-auc:0.64333
[0]	eval-auc:0.54385
[41]	eval-auc:0.57808
[0]	eval-auc:0.46038
[66]	eval-auc:0.55423
[0]	eval-auc:0.55407
[45]	eval-auc:0.67667
Trial 26 complete
[0]	eval-auc:0.49704
[20]	eval-auc:0.52222
[0]	eval-auc:0.49741
[59]	eval-auc:0.58852
[0]	eval-auc:0.54407
[47]	eval-auc:0.64889
[0]	eval-auc:0.50926
[21]	eval-auc:0.52519
[0]	eval-auc:0.56296
[42]	eval-auc:0.63148
[0]	eval-auc:0.54407
[43]	eval-auc:0.57037
[0]	eval-auc:0.49000
[42]	eval-auc:0.68852
[0]	eval-auc:0.49000
[27]	eval-auc:0.54731
[0]	eval-auc:0.49923
[28]	eval-auc:0.57038
[0]	eval-auc:0.50000
[45]	eval-auc:0.61111
Trial 27 complete
[0]	eval-auc:0.48704
[20]	eval-auc:0.52333
[0]	eval-auc:0.50593
[35]	eval-auc:0.58741
[0]	eval-auc:0.56074
[27]	eval-auc:0.63074
[0]	eval-auc:0.50926
[40]	eval-auc:0.56444
[0]	eval-auc:0.56296
[26]	eval-auc:0.63407
[0]	eval-auc:0.49296
[34]	eval-auc:0.56926
[0]	eval-auc:0.50815
[37]	eval-auc:0.69963
[0]	eval-auc:0.49000
[31]	eval-auc:0.54885
[0]	eval-auc:0.50885
[29]	eval-auc:0.55577
[0]	eval-auc:0.53704
[33]	eval-auc:0.62704
Trial 28 complete
[0]	eval-auc:0.49556
[53]	eval-auc:0.55148
[0]	eval-auc:0.51556
[48]	eval-auc:0.59333
[0]	eval-auc:0.61667
[41]	eval-auc:0.65667
[0]	eval-auc:0.50778
[60]	eval-auc:0.54852
[0]	eval-auc:0.57148
[47]	eval-auc:0.61852
[0]	eval-auc:0.48519
[45]	eval-auc:0.56852
[0]	eval-auc:0.55333
[25]	eval-auc:0.64630
[0]	eval-auc:0.53692
[27]	eval-auc:0.54615
[0]	eval-auc:0.55000
[23]	eval-auc:0.53500
[0]	eval-auc:0.57889
[24]	eval-auc:0.66556
Trial 29 complete
[0]	eval-auc:0.48296
[30]	eval-auc:0.55037
[0]	eval-auc:0.53444
[27]	eval-auc:0.58481
[0]	eval-auc:0.60815
[29]	eval-auc:0.67519
[0]	eval-auc:0.48185
[43]	eval-auc:0.54741
[0]	eval-auc:0.64444
[26]	eval-auc:0.64185
[0]	eval-auc:0.50111
[26]	eval-auc:0.53519
[0]	eval-auc:0.59519
[29]	eval-auc:0.66037
[0]	eval-auc:0.54615
[21]	eval-auc:0.53615
[0]	eval-auc:0.53538
[29]	eval-auc:0.56615
[0]	eval-auc:0.56148
[30]	eval-auc:0.68370
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 09:29:32,741 - INFO - Success: XGBoost - openml__diabetes__37_50pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__diabetes__37_50pct_missing', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 1 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 2 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 3 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 4 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 5 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 6 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 7 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 8 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 9 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 10 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 11 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 12 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 13 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 14 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 15 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 16 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 17 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 18 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 19 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 20 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 21 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 22 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 23 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 24 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 25 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 26 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 27 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 28 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 29 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 09:30:27,334 - INFO - Success: XGBoost - openml__diabetes__37_75pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__diabetes__37_75pct_missing', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 1 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 2 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 3 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 4 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 5 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 6 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 7 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 8 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 9 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 10 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 11 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 12 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 13 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 14 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 15 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 16 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 17 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 18 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 19 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 20 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 21 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 22 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 23 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 24 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 25 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 26 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 27 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 28 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 29 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 09:33:34,115 - INFO - Success: XGBoost - openml__adult__7592_100pct
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__adult__7592_100pct', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.87055
[99]	eval-auc:0.92437
[0]	eval-auc:0.87700
[99]	eval-auc:0.92688
[0]	eval-auc:0.87765
[99]	eval-auc:0.92310
[0]	eval-auc:0.86425
[99]	eval-auc:0.92134
[0]	eval-auc:0.86613
[99]	eval-auc:0.91891
[0]	eval-auc:0.87766
[99]	eval-auc:0.92713
[0]	eval-auc:0.88602
[99]	eval-auc:0.92840
[0]	eval-auc:0.89177
[99]	eval-auc:0.93547
[0]	eval-auc:0.89253
[99]	eval-auc:0.92956
[0]	eval-auc:0.87173
[99]	eval-auc:0.92836
Trial 1 complete
[0]	eval-auc:0.85981
[99]	eval-auc:0.91659
[0]	eval-auc:0.87054
[99]	eval-auc:0.91926
[0]	eval-auc:0.86728
[99]	eval-auc:0.91581
[0]	eval-auc:0.85785
[99]	eval-auc:0.91562
[0]	eval-auc:0.85677
[99]	eval-auc:0.91184
[0]	eval-auc:0.87184
[99]	eval-auc:0.91968
[0]	eval-auc:0.87429
[99]	eval-auc:0.92118
[0]	eval-auc:0.88226
[99]	eval-auc:0.92883
[0]	eval-auc:0.88222
[99]	eval-auc:0.92263
[0]	eval-auc:0.85866
[99]	eval-auc:0.92010
Trial 2 complete
[0]	eval-auc:0.85981
[99]	eval-auc:0.92124
[0]	eval-auc:0.87054
[99]	eval-auc:0.92336
[0]	eval-auc:0.86728
[99]	eval-auc:0.91913
[0]	eval-auc:0.85785
[99]	eval-auc:0.91914
[0]	eval-auc:0.85675
[99]	eval-auc:0.91643
[0]	eval-auc:0.87184
[99]	eval-auc:0.92415
[0]	eval-auc:0.87429
[99]	eval-auc:0.92484
[0]	eval-auc:0.88226
[99]	eval-auc:0.93307
[0]	eval-auc:0.88222
[99]	eval-auc:0.92748
[0]	eval-auc:0.85866
[99]	eval-auc:0.92528
Trial 3 complete
[0]	eval-auc:0.87055
[99]	eval-auc:0.92519
[0]	eval-auc:0.87700
[99]	eval-auc:0.92854
[0]	eval-auc:0.87765
[99]	eval-auc:0.92434
[0]	eval-auc:0.86425
[99]	eval-auc:0.92301
[0]	eval-auc:0.86618
[99]	eval-auc:0.92018
[0]	eval-auc:0.87766
[99]	eval-auc:0.92773
[0]	eval-auc:0.88602
[99]	eval-auc:0.93021
[0]	eval-auc:0.89176
[99]	eval-auc:0.93651
[0]	eval-auc:0.89253
[99]	eval-auc:0.93090
[0]	eval-auc:0.87173
[99]	eval-auc:0.93023
Trial 4 complete
[0]	eval-auc:0.90465
[92]	eval-auc:0.92255
[0]	eval-auc:0.90572
[76]	eval-auc:0.92652
[0]	eval-auc:0.90316
[99]	eval-auc:0.92131
[0]	eval-auc:0.90340
[66]	eval-auc:0.92084
[0]	eval-auc:0.89748
[99]	eval-auc:0.91968
[0]	eval-auc:0.89861
[75]	eval-auc:0.92378
[0]	eval-auc:0.90835
[79]	eval-auc:0.92877
[0]	eval-auc:0.91664
[81]	eval-auc:0.93621
[0]	eval-auc:0.90556
[82]	eval-auc:0.92822
[0]	eval-auc:0.90774
[81]	eval-auc:0.92616
Trial 5 complete
[0]	eval-auc:0.84406
[99]	eval-auc:0.92569
[0]	eval-auc:0.85480
[99]	eval-auc:0.92797
[0]	eval-auc:0.84392
[99]	eval-auc:0.92318
[0]	eval-auc:0.83851
[99]	eval-auc:0.92349
[0]	eval-auc:0.83631
[99]	eval-auc:0.91970
[0]	eval-auc:0.84698
[99]	eval-auc:0.92781
[0]	eval-auc:0.85079
[99]	eval-auc:0.92971
[0]	eval-auc:0.85625
[99]	eval-auc:0.93585
[0]	eval-auc:0.85578
[99]	eval-auc:0.93078
[0]	eval-auc:0.84080
[99]	eval-auc:0.92933
Trial 6 complete
[0]	eval-auc:0.89978
[99]	eval-auc:0.91931
[0]	eval-auc:0.90584
[99]	eval-auc:0.92413
[0]	eval-auc:0.90233
[99]	eval-auc:0.91816
[0]	eval-auc:0.89950
[99]	eval-auc:0.91911
[0]	eval-auc:0.89764
[99]	eval-auc:0.91601
[0]	eval-auc:0.89769
[99]	eval-auc:0.92174
[0]	eval-auc:0.90830
[99]	eval-auc:0.92674
[0]	eval-auc:0.91406
[99]	eval-auc:0.93293
[0]	eval-auc:0.90381
[99]	eval-auc:0.92437
[0]	eval-auc:0.90542
[99]	eval-auc:0.92326
Trial 7 complete
[0]	eval-auc:0.80403
[99]	eval-auc:0.91571
[0]	eval-auc:0.81632
[99]	eval-auc:0.91935
[0]	eval-auc:0.79760
[99]	eval-auc:0.91469
[0]	eval-auc:0.79102
[99]	eval-auc:0.91582
[0]	eval-auc:0.79564
[99]	eval-auc:0.91139
[0]	eval-auc:0.81056
[99]	eval-auc:0.91700
[0]	eval-auc:0.80336
[99]	eval-auc:0.91875
[0]	eval-auc:0.80963
[99]	eval-auc:0.92676
[0]	eval-auc:0.80653
[99]	eval-auc:0.92254
[0]	eval-auc:0.79035
[99]	eval-auc:0.91946
Trial 8 complete
[0]	eval-auc:0.90571
[99]	eval-auc:0.92329
[0]	eval-auc:0.90770
[99]	eval-auc:0.92895
[0]	eval-auc:0.90544
[99]	eval-auc:0.92185
[0]	eval-auc:0.90344
[82]	eval-auc:0.92251
[0]	eval-auc:0.90129
[99]	eval-auc:0.92135
[0]	eval-auc:0.90044
[98]	eval-auc:0.92641
[0]	eval-auc:0.90954
[99]	eval-auc:0.93003
[0]	eval-auc:0.91641
[99]	eval-auc:0.93716
[0]	eval-auc:0.90590
[99]	eval-auc:0.92837
[0]	eval-auc:0.91005
[99]	eval-auc:0.92819
Trial 9 complete
[0]	eval-auc:0.80403
[99]	eval-auc:0.89696
[0]	eval-auc:0.81632
[99]	eval-auc:0.90249
[0]	eval-auc:0.79760
[99]	eval-auc:0.89964
[0]	eval-auc:0.79102
[99]	eval-auc:0.89716
[0]	eval-auc:0.79564
[99]	eval-auc:0.89267
[0]	eval-auc:0.81056
[99]	eval-auc:0.90244
[0]	eval-auc:0.80336
[99]	eval-auc:0.90118
[0]	eval-auc:0.80963
[99]	eval-auc:0.91016
[0]	eval-auc:0.80653
[99]	eval-auc:0.90444
[0]	eval-auc:0.79035
[99]	eval-auc:0.89974
Trial 10 complete
[0]	eval-auc:0.90254
[89]	eval-auc:0.92462
[0]	eval-auc:0.90627
[84]	eval-auc:0.92828
[0]	eval-auc:0.90119
[63]	eval-auc:0.92270
[0]	eval-auc:0.89873
[80]	eval-auc:0.92237
[0]	eval-auc:0.89699
[99]	eval-auc:0.92121
[0]	eval-auc:0.90016
[73]	eval-auc:0.92625
[0]	eval-auc:0.90677
[76]	eval-auc:0.93011
[0]	eval-auc:0.91168
[73]	eval-auc:0.93661
[0]	eval-auc:0.90781
[87]	eval-auc:0.93144
[0]	eval-auc:0.90447
[80]	eval-auc:0.92974
Trial 11 complete
[0]	eval-auc:0.84406
[99]	eval-auc:0.92292
[0]	eval-auc:0.85480
[99]	eval-auc:0.92562
[0]	eval-auc:0.84392
[99]	eval-auc:0.92094
[0]	eval-auc:0.83851
[99]	eval-auc:0.92175
[0]	eval-auc:0.83631
[99]	eval-auc:0.91738
[0]	eval-auc:0.84698
[99]	eval-auc:0.92433
[0]	eval-auc:0.85079
[99]	eval-auc:0.92640
[0]	eval-auc:0.85625
[99]	eval-auc:0.93429
[0]	eval-auc:0.85578
[99]	eval-auc:0.92758
[0]	eval-auc:0.84080
[99]	eval-auc:0.92675
Trial 12 complete
[0]	eval-auc:0.84406
[99]	eval-auc:0.91788
[0]	eval-auc:0.85480
[99]	eval-auc:0.92086
[0]	eval-auc:0.84392
[99]	eval-auc:0.91706
[0]	eval-auc:0.83851
[99]	eval-auc:0.91732
[0]	eval-auc:0.83631
[99]	eval-auc:0.91377
[0]	eval-auc:0.84698
[99]	eval-auc:0.92013
[0]	eval-auc:0.85079
[99]	eval-auc:0.92299
[0]	eval-auc:0.85625
[99]	eval-auc:0.92990
[0]	eval-auc:0.85578
[99]	eval-auc:0.92319
[0]	eval-auc:0.84080
[99]	eval-auc:0.92201
Trial 13 complete
[0]	eval-auc:0.90251
[63]	eval-auc:0.92369
[0]	eval-auc:0.90649
[52]	eval-auc:0.92887
[0]	eval-auc:0.90255
[51]	eval-auc:0.92075
[0]	eval-auc:0.89915
[42]	eval-auc:0.91928
[0]	eval-auc:0.89781
[47]	eval-auc:0.92033
[0]	eval-auc:0.90074
[57]	eval-auc:0.92494
[0]	eval-auc:0.90732
[54]	eval-auc:0.92712
[0]	eval-auc:0.91216
[60]	eval-auc:0.93422
[0]	eval-auc:0.90838
[64]	eval-auc:0.92944
[0]	eval-auc:0.90471
[48]	eval-auc:0.92843
Trial 14 complete
[0]	eval-auc:0.87036
[99]	eval-auc:0.91037
[0]	eval-auc:0.87700
[99]	eval-auc:0.91457
[0]	eval-auc:0.87769
[99]	eval-auc:0.91135
[0]	eval-auc:0.86425
[99]	eval-auc:0.91062
[0]	eval-auc:0.86617
[99]	eval-auc:0.90543
[0]	eval-auc:0.87760
[99]	eval-auc:0.91267
[0]	eval-auc:0.88602
[99]	eval-auc:0.91664
[0]	eval-auc:0.89177
[99]	eval-auc:0.92462
[0]	eval-auc:0.89251
[99]	eval-auc:0.91776
[0]	eval-auc:0.87173
[99]	eval-auc:0.91489
Trial 15 complete
[0]	eval-auc:0.89905
[99]	eval-auc:0.92381
[0]	eval-auc:0.90474
[99]	eval-auc:0.92849
[0]	eval-auc:0.90071
[99]	eval-auc:0.92207
[0]	eval-auc:0.90224
[99]	eval-auc:0.92242
[0]	eval-auc:0.89924
[99]	eval-auc:0.92035
[0]	eval-auc:0.89948
[99]	eval-auc:0.92598
[0]	eval-auc:0.90808
[99]	eval-auc:0.93116
[0]	eval-auc:0.91309
[99]	eval-auc:0.93693
[0]	eval-auc:0.90664
[99]	eval-auc:0.92962
[0]	eval-auc:0.90372
[99]	eval-auc:0.92726
Trial 16 complete
[0]	eval-auc:0.84406
[99]	eval-auc:0.90222
[0]	eval-auc:0.85480
[99]	eval-auc:0.90547
[0]	eval-auc:0.84392
[99]	eval-auc:0.90507
[0]	eval-auc:0.83851
[99]	eval-auc:0.90108
[0]	eval-auc:0.83631
[99]	eval-auc:0.89767
[0]	eval-auc:0.84698
[99]	eval-auc:0.90594
[0]	eval-auc:0.85079
[99]	eval-auc:0.90765
[0]	eval-auc:0.85625
[99]	eval-auc:0.91637
[0]	eval-auc:0.85578
[99]	eval-auc:0.90913
[0]	eval-auc:0.84080
[99]	eval-auc:0.90552
Trial 17 complete
[0]	eval-auc:0.84406
[99]	eval-auc:0.90247
[0]	eval-auc:0.85480
[99]	eval-auc:0.90661
[0]	eval-auc:0.84392
[99]	eval-auc:0.90534
[0]	eval-auc:0.83851
[99]	eval-auc:0.90238
[0]	eval-auc:0.83631
[99]	eval-auc:0.89897
[0]	eval-auc:0.84698
[99]	eval-auc:0.90653
[0]	eval-auc:0.85079
[99]	eval-auc:0.90812
[0]	eval-auc:0.85625
[99]	eval-auc:0.91681
[0]	eval-auc:0.85578
[99]	eval-auc:0.90968
[0]	eval-auc:0.84080
[99]	eval-auc:0.90610
Trial 18 complete
[0]	eval-auc:0.88440
[99]	eval-auc:0.91974
[0]	eval-auc:0.89079
[99]	eval-auc:0.92242
[0]	eval-auc:0.89135
[99]	eval-auc:0.91806
[0]	eval-auc:0.88086
[99]	eval-auc:0.91780
[0]	eval-auc:0.88290
[99]	eval-auc:0.91440
[0]	eval-auc:0.89246
[99]	eval-auc:0.92079
[0]	eval-auc:0.89522
[99]	eval-auc:0.92364
[0]	eval-auc:0.90439
[99]	eval-auc:0.93096
[0]	eval-auc:0.90211
[99]	eval-auc:0.92441
[0]	eval-auc:0.89363
[99]	eval-auc:0.92267
Trial 19 complete
[0]	eval-auc:0.80403
[99]	eval-auc:0.89700
[0]	eval-auc:0.81632
[99]	eval-auc:0.90242
[0]	eval-auc:0.79760
[99]	eval-auc:0.89988
[0]	eval-auc:0.79102
[99]	eval-auc:0.89733
[0]	eval-auc:0.79564
[99]	eval-auc:0.89227
[0]	eval-auc:0.81056
[99]	eval-auc:0.90283
[0]	eval-auc:0.80336
[99]	eval-auc:0.90186
[0]	eval-auc:0.80963
[99]	eval-auc:0.90982
[0]	eval-auc:0.80653
[99]	eval-auc:0.90516
[0]	eval-auc:0.79035
[99]	eval-auc:0.89951
Trial 20 complete
[0]	eval-auc:0.88490
[99]	eval-auc:0.92655
[0]	eval-auc:0.89107
[99]	eval-auc:0.92935
[0]	eval-auc:0.89136
[86]	eval-auc:0.92502
[0]	eval-auc:0.88089
[93]	eval-auc:0.92300
[0]	eval-auc:0.88294
[99]	eval-auc:0.92218
[0]	eval-auc:0.89205
[86]	eval-auc:0.92780
[0]	eval-auc:0.89522
[99]	eval-auc:0.93142
[0]	eval-auc:0.90431
[84]	eval-auc:0.93793
[0]	eval-auc:0.90201
[99]	eval-auc:0.93236
[0]	eval-auc:0.89364
[99]	eval-auc:0.93099
Trial 21 complete
[0]	eval-auc:0.80403
[99]	eval-auc:0.89352
[0]	eval-auc:0.81632
[99]	eval-auc:0.89893
[0]	eval-auc:0.79760
[99]	eval-auc:0.89602
[0]	eval-auc:0.79102
[99]	eval-auc:0.89317
[0]	eval-auc:0.79564
[99]	eval-auc:0.88777
[0]	eval-auc:0.81056
[99]	eval-auc:0.89921
[0]	eval-auc:0.80336
[99]	eval-auc:0.89774
[0]	eval-auc:0.80963
[99]	eval-auc:0.90661
[0]	eval-auc:0.80653
[99]	eval-auc:0.90066
[0]	eval-auc:0.79035
[99]	eval-auc:0.89572
Trial 22 complete
[0]	eval-auc:0.84406
[99]	eval-auc:0.92500
[0]	eval-auc:0.85480
[99]	eval-auc:0.92700
[0]	eval-auc:0.84392
[99]	eval-auc:0.92353
[0]	eval-auc:0.83851
[99]	eval-auc:0.92317
[0]	eval-auc:0.83631
[99]	eval-auc:0.91878
[0]	eval-auc:0.84698
[99]	eval-auc:0.92679
[0]	eval-auc:0.85079
[99]	eval-auc:0.92850
[0]	eval-auc:0.85625
[99]	eval-auc:0.93584
[0]	eval-auc:0.85578
[99]	eval-auc:0.93045
[0]	eval-auc:0.84080
[99]	eval-auc:0.92881
Trial 23 complete
[0]	eval-auc:0.87036
[99]	eval-auc:0.91993
[0]	eval-auc:0.87697
[99]	eval-auc:0.92284
[0]	eval-auc:0.87769
[99]	eval-auc:0.91974
[0]	eval-auc:0.86424
[99]	eval-auc:0.91832
[0]	eval-auc:0.86610
[99]	eval-auc:0.91552
[0]	eval-auc:0.87762
[99]	eval-auc:0.92326
[0]	eval-auc:0.88610
[99]	eval-auc:0.92502
[0]	eval-auc:0.89177
[99]	eval-auc:0.93217
[0]	eval-auc:0.89251
[99]	eval-auc:0.92581
[0]	eval-auc:0.87118
[99]	eval-auc:0.92448
Trial 24 complete
[0]	eval-auc:0.90554
[99]	eval-auc:0.92133
[0]	eval-auc:0.90530
[99]	eval-auc:0.92629
[0]	eval-auc:0.90428
[99]	eval-auc:0.92128
[0]	eval-auc:0.90400
[99]	eval-auc:0.92141
[0]	eval-auc:0.89981
[99]	eval-auc:0.91819
[0]	eval-auc:0.89878
[99]	eval-auc:0.92290
[0]	eval-auc:0.90745
[99]	eval-auc:0.92844
[0]	eval-auc:0.91659
[99]	eval-auc:0.93428
[0]	eval-auc:0.90558
[99]	eval-auc:0.92590
[0]	eval-auc:0.90736
[99]	eval-auc:0.92590
Trial 25 complete
[0]	eval-auc:0.89876
[99]	eval-auc:0.92092
[0]	eval-auc:0.90432
[99]	eval-auc:0.92559
[0]	eval-auc:0.90125
[99]	eval-auc:0.92010
[0]	eval-auc:0.89743
[99]	eval-auc:0.92040
[0]	eval-auc:0.89496
[99]	eval-auc:0.91744
[0]	eval-auc:0.89629
[99]	eval-auc:0.92315
[0]	eval-auc:0.90628
[99]	eval-auc:0.92893
[0]	eval-auc:0.91137
[99]	eval-auc:0.93466
[0]	eval-auc:0.90169
[99]	eval-auc:0.92681
[0]	eval-auc:0.90303
[99]	eval-auc:0.92516
Trial 26 complete
[0]	eval-auc:0.84406
[99]	eval-auc:0.92387
[0]	eval-auc:0.85480
[99]	eval-auc:0.92581
[0]	eval-auc:0.84392
[99]	eval-auc:0.92200
[0]	eval-auc:0.83851
[99]	eval-auc:0.92186
[0]	eval-auc:0.83631
[99]	eval-auc:0.91764
[0]	eval-auc:0.84698
[99]	eval-auc:0.92605
[0]	eval-auc:0.85079
[99]	eval-auc:0.92807
[0]	eval-auc:0.85625
[99]	eval-auc:0.93510
[0]	eval-auc:0.85578
[99]	eval-auc:0.92900
[0]	eval-auc:0.84080
[99]	eval-auc:0.92779
Trial 27 complete
[0]	eval-auc:0.85972
[99]	eval-auc:0.92590
[0]	eval-auc:0.87054
[99]	eval-auc:0.92922
[0]	eval-auc:0.86728
[99]	eval-auc:0.92502
[0]	eval-auc:0.85785
[99]	eval-auc:0.92419
[0]	eval-auc:0.85677
[99]	eval-auc:0.92137
[0]	eval-auc:0.87184
[99]	eval-auc:0.92857
[0]	eval-auc:0.87429
[99]	eval-auc:0.93081
[0]	eval-auc:0.88226
[99]	eval-auc:0.93780
[0]	eval-auc:0.88214
[99]	eval-auc:0.93255
[0]	eval-auc:0.85866
[99]	eval-auc:0.93223
Trial 28 complete
[0]	eval-auc:0.89790
[99]	eval-auc:0.92525
[0]	eval-auc:0.90237
[99]	eval-auc:0.92946
[0]	eval-auc:0.89767
[99]	eval-auc:0.92317
[0]	eval-auc:0.89330
[99]	eval-auc:0.92349
[0]	eval-auc:0.89289
[99]	eval-auc:0.92154
[0]	eval-auc:0.89827
[99]	eval-auc:0.92741
[0]	eval-auc:0.90191
[99]	eval-auc:0.93072
[0]	eval-auc:0.90956
[99]	eval-auc:0.93671
[0]	eval-auc:0.90649
[99]	eval-auc:0.92993
[0]	eval-auc:0.90366
[99]	eval-auc:0.92928
Trial 29 complete
[0]	eval-auc:0.89913
[89]	eval-auc:0.92295
[0]	eval-auc:0.90452
[85]	eval-auc:0.92773
[0]	eval-auc:0.90071
[74]	eval-auc:0.92204
[0]	eval-auc:0.90233
[64]	eval-auc:0.92231
[0]	eval-auc:0.89931
[67]	eval-auc:0.92003
[0]	eval-auc:0.89955
[64]	eval-auc:0.92676
[0]	eval-auc:0.90811
[60]	eval-auc:0.92896
[0]	eval-auc:0.91315
[72]	eval-auc:0.93523
[0]	eval-auc:0.90665
[75]	eval-auc:0.92994
[0]	eval-auc:0.90376
[80]	eval-auc:0.92777
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 09:37:34,406 - INFO - Success: XGBoost - openml__adult__7592_25pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__adult__7592_25pct_missing', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.58409
[99]	eval-auc:0.69317
[0]	eval-auc:0.58804
[99]	eval-auc:0.70328
[0]	eval-auc:0.58912
[99]	eval-auc:0.69362
[0]	eval-auc:0.57434
[99]	eval-auc:0.68210
[0]	eval-auc:0.58695
[99]	eval-auc:0.68945
[0]	eval-auc:0.58899
[69]	eval-auc:0.67492
[0]	eval-auc:0.58463
[99]	eval-auc:0.69992
[0]	eval-auc:0.58576
[99]	eval-auc:0.71154
[0]	eval-auc:0.58363
[99]	eval-auc:0.69143
[0]	eval-auc:0.58672
[99]	eval-auc:0.69504
Trial 1 complete
[0]	eval-auc:0.56596
[99]	eval-auc:0.68500
[0]	eval-auc:0.56713
[99]	eval-auc:0.70541
[0]	eval-auc:0.57577
[99]	eval-auc:0.68600
[0]	eval-auc:0.56223
[99]	eval-auc:0.67904
[0]	eval-auc:0.57258
[99]	eval-auc:0.68337
[0]	eval-auc:0.57215
[99]	eval-auc:0.67414
[0]	eval-auc:0.56812
[99]	eval-auc:0.69417
[0]	eval-auc:0.56857
[99]	eval-auc:0.70710
[0]	eval-auc:0.56684
[99]	eval-auc:0.68656
[0]	eval-auc:0.56940
[99]	eval-auc:0.69209
Trial 2 complete
[0]	eval-auc:0.56596
[99]	eval-auc:0.69089
[0]	eval-auc:0.56713
[99]	eval-auc:0.70554
[0]	eval-auc:0.57577
[99]	eval-auc:0.69293
[0]	eval-auc:0.56223
[99]	eval-auc:0.68178
[0]	eval-auc:0.57258
[99]	eval-auc:0.68747
[0]	eval-auc:0.57215
[99]	eval-auc:0.67669
[0]	eval-auc:0.56812
[99]	eval-auc:0.69855
[0]	eval-auc:0.56857
[99]	eval-auc:0.70997
[0]	eval-auc:0.56684
[99]	eval-auc:0.68986
[0]	eval-auc:0.56940
[99]	eval-auc:0.69328
Trial 3 complete
[0]	eval-auc:0.58409
[99]	eval-auc:0.69564
[0]	eval-auc:0.58804
[92]	eval-auc:0.70553
[0]	eval-auc:0.58912
[99]	eval-auc:0.69533
[0]	eval-auc:0.57434
[87]	eval-auc:0.68217
[0]	eval-auc:0.58695
[99]	eval-auc:0.69093
[0]	eval-auc:0.58899
[99]	eval-auc:0.67740
[0]	eval-auc:0.58463
[99]	eval-auc:0.70076
[0]	eval-auc:0.58576
[99]	eval-auc:0.71265
[0]	eval-auc:0.58363
[98]	eval-auc:0.69218
[0]	eval-auc:0.58672
[99]	eval-auc:0.69726
Trial 4 complete
[0]	eval-auc:0.63781
[67]	eval-auc:0.69071
[0]	eval-auc:0.64925
[46]	eval-auc:0.70054
[0]	eval-auc:0.64140
[72]	eval-auc:0.68963
[0]	eval-auc:0.63057
[41]	eval-auc:0.67951
[0]	eval-auc:0.64346
[56]	eval-auc:0.69140
[0]	eval-auc:0.64674
[48]	eval-auc:0.67620
[0]	eval-auc:0.64289
[55]	eval-auc:0.69662
[0]	eval-auc:0.64554
[83]	eval-auc:0.71196
[0]	eval-auc:0.63687
[60]	eval-auc:0.69357
[0]	eval-auc:0.64378
[53]	eval-auc:0.69591
Trial 5 complete
[0]	eval-auc:0.55491
[99]	eval-auc:0.69781
[0]	eval-auc:0.55247
[94]	eval-auc:0.70949
[0]	eval-auc:0.55982
[99]	eval-auc:0.69851
[0]	eval-auc:0.55001
[68]	eval-auc:0.68501
[0]	eval-auc:0.55059
[99]	eval-auc:0.69543
[0]	eval-auc:0.55306
[99]	eval-auc:0.68221
[0]	eval-auc:0.55213
[75]	eval-auc:0.70071
[0]	eval-auc:0.54187
[99]	eval-auc:0.71433
[0]	eval-auc:0.54633
[70]	eval-auc:0.69266
[0]	eval-auc:0.55761
[78]	eval-auc:0.69705
Trial 6 complete
[0]	eval-auc:0.63553
[99]	eval-auc:0.68976
[0]	eval-auc:0.64110
[99]	eval-auc:0.69919
[0]	eval-auc:0.63122
[99]	eval-auc:0.68863
[0]	eval-auc:0.61778
[99]	eval-auc:0.67923
[0]	eval-auc:0.63596
[99]	eval-auc:0.68383
[0]	eval-auc:0.63828
[99]	eval-auc:0.67231
[0]	eval-auc:0.63531
[99]	eval-auc:0.69419
[0]	eval-auc:0.63953
[99]	eval-auc:0.70619
[0]	eval-auc:0.63078
[99]	eval-auc:0.68758
[0]	eval-auc:0.63937
[99]	eval-auc:0.69115
Trial 7 complete
[0]	eval-auc:0.53213
[99]	eval-auc:0.69058
[0]	eval-auc:0.52897
[99]	eval-auc:0.70204
[0]	eval-auc:0.53570
[99]	eval-auc:0.69264
[0]	eval-auc:0.53019
[99]	eval-auc:0.67524
[0]	eval-auc:0.52546
[99]	eval-auc:0.68198
[0]	eval-auc:0.53118
[99]	eval-auc:0.67625
[0]	eval-auc:0.52882
[99]	eval-auc:0.69506
[0]	eval-auc:0.53127
[99]	eval-auc:0.70947
[0]	eval-auc:0.52871
[99]	eval-auc:0.68454
[0]	eval-auc:0.53180
[99]	eval-auc:0.69335
Trial 8 complete
[0]	eval-auc:0.63567
[99]	eval-auc:0.69373
[0]	eval-auc:0.63987
[66]	eval-auc:0.70194
[0]	eval-auc:0.63305
[85]	eval-auc:0.69064
[0]	eval-auc:0.61805
[86]	eval-auc:0.68163
[0]	eval-auc:0.63983
[83]	eval-auc:0.68895
[0]	eval-auc:0.63787
[77]	eval-auc:0.67790
[0]	eval-auc:0.63623
[85]	eval-auc:0.69946
[0]	eval-auc:0.64363
[99]	eval-auc:0.71290
[0]	eval-auc:0.63565
[74]	eval-auc:0.69282
[0]	eval-auc:0.64118
[88]	eval-auc:0.69867
Trial 9 complete
[0]	eval-auc:0.53213
[99]	eval-auc:0.65858
[0]	eval-auc:0.52897
[82]	eval-auc:0.66283
[0]	eval-auc:0.53570
[35]	eval-auc:0.61442
[0]	eval-auc:0.53019
[99]	eval-auc:0.64225
[0]	eval-auc:0.52546
[99]	eval-auc:0.66285
[0]	eval-auc:0.53118
[99]	eval-auc:0.65777
[0]	eval-auc:0.52882
[99]	eval-auc:0.66150
[0]	eval-auc:0.53127
[99]	eval-auc:0.66446
[0]	eval-auc:0.52871
[99]	eval-auc:0.65225
[0]	eval-auc:0.53180
[99]	eval-auc:0.66202
Trial 10 complete
[0]	eval-auc:0.62199
[70]	eval-auc:0.69024
[0]	eval-auc:0.63195
[54]	eval-auc:0.70319
[0]	eval-auc:0.62498
[60]	eval-auc:0.69007
[0]	eval-auc:0.60953
[48]	eval-auc:0.68220
[0]	eval-auc:0.62477
[75]	eval-auc:0.69011
[0]	eval-auc:0.62577
[51]	eval-auc:0.67465
[0]	eval-auc:0.61947
[62]	eval-auc:0.69667
[0]	eval-auc:0.62973
[71]	eval-auc:0.71250
[0]	eval-auc:0.61980
[85]	eval-auc:0.69159
[0]	eval-auc:0.62484
[48]	eval-auc:0.69405
Trial 11 complete
[0]	eval-auc:0.55491
[99]	eval-auc:0.69303
[0]	eval-auc:0.55247
[99]	eval-auc:0.70735
[0]	eval-auc:0.55982
[99]	eval-auc:0.69726
[0]	eval-auc:0.55001
[99]	eval-auc:0.68517
[0]	eval-auc:0.55059
[99]	eval-auc:0.69105
[0]	eval-auc:0.55306
[63]	eval-auc:0.67692
[0]	eval-auc:0.55213
[99]	eval-auc:0.70076
[0]	eval-auc:0.54187
[99]	eval-auc:0.71184
[0]	eval-auc:0.54633
[99]	eval-auc:0.69229
[0]	eval-auc:0.55761
[99]	eval-auc:0.69650
Trial 12 complete
[0]	eval-auc:0.55491
[99]	eval-auc:0.69129
[0]	eval-auc:0.55247
[99]	eval-auc:0.70370
[0]	eval-auc:0.55982
[99]	eval-auc:0.69490
[0]	eval-auc:0.55001
[99]	eval-auc:0.67790
[0]	eval-auc:0.55059
[99]	eval-auc:0.68683
[0]	eval-auc:0.55306
[99]	eval-auc:0.67879
[0]	eval-auc:0.55213
[99]	eval-auc:0.69760
[0]	eval-auc:0.54187
[99]	eval-auc:0.70915
[0]	eval-auc:0.54633
[99]	eval-auc:0.68916
[0]	eval-auc:0.55761
[99]	eval-auc:0.69511
Trial 13 complete
[0]	eval-auc:0.62200
[47]	eval-auc:0.68930
[0]	eval-auc:0.63196
[57]	eval-auc:0.70274
[0]	eval-auc:0.62502
[50]	eval-auc:0.69205
[0]	eval-auc:0.60953
[43]	eval-auc:0.68231
[0]	eval-auc:0.62483
[46]	eval-auc:0.69164
[0]	eval-auc:0.62596
[68]	eval-auc:0.67655
[0]	eval-auc:0.61943
[39]	eval-auc:0.70040
[0]	eval-auc:0.62926
[62]	eval-auc:0.71250
[0]	eval-auc:0.61982
[60]	eval-auc:0.69158
[0]	eval-auc:0.62415
[44]	eval-auc:0.69288
Trial 14 complete
[0]	eval-auc:0.58409
[99]	eval-auc:0.67292
[0]	eval-auc:0.58804
[99]	eval-auc:0.68571
[0]	eval-auc:0.58892
[99]	eval-auc:0.67643
[0]	eval-auc:0.57434
[99]	eval-auc:0.65998
[0]	eval-auc:0.58695
[99]	eval-auc:0.66823
[0]	eval-auc:0.58899
[99]	eval-auc:0.65960
[0]	eval-auc:0.58463
[99]	eval-auc:0.67297
[0]	eval-auc:0.58576
[99]	eval-auc:0.68007
[0]	eval-auc:0.58341
[99]	eval-auc:0.66789
[0]	eval-auc:0.58672
[99]	eval-auc:0.67031
Trial 15 complete
[0]	eval-auc:0.62857
[99]	eval-auc:0.69073
[0]	eval-auc:0.64066
[99]	eval-auc:0.70160
[0]	eval-auc:0.62726
[99]	eval-auc:0.69069
[0]	eval-auc:0.61514
[97]	eval-auc:0.68077
[0]	eval-auc:0.63108
[99]	eval-auc:0.69095
[0]	eval-auc:0.62791
[88]	eval-auc:0.67757
[0]	eval-auc:0.62950
[88]	eval-auc:0.69772
[0]	eval-auc:0.63483
[99]	eval-auc:0.71188
[0]	eval-auc:0.62299
[99]	eval-auc:0.69479
[0]	eval-auc:0.62473
[99]	eval-auc:0.69669
Trial 16 complete
[0]	eval-auc:0.55491
[99]	eval-auc:0.66135
[0]	eval-auc:0.55247
[99]	eval-auc:0.67349
[0]	eval-auc:0.55982
[98]	eval-auc:0.67024
[0]	eval-auc:0.55001
[99]	eval-auc:0.64704
[0]	eval-auc:0.55059
[99]	eval-auc:0.66312
[0]	eval-auc:0.55306
[99]	eval-auc:0.65952
[0]	eval-auc:0.55213
[99]	eval-auc:0.66876
[0]	eval-auc:0.54187
[99]	eval-auc:0.67380
[0]	eval-auc:0.54633
[99]	eval-auc:0.65765
[0]	eval-auc:0.55761
[99]	eval-auc:0.67047
Trial 17 complete
[0]	eval-auc:0.55491
[99]	eval-auc:0.66485
[0]	eval-auc:0.55247
[99]	eval-auc:0.66726
[0]	eval-auc:0.55982
[99]	eval-auc:0.66605
[0]	eval-auc:0.55001
[99]	eval-auc:0.64719
[0]	eval-auc:0.55059
[99]	eval-auc:0.66334
[0]	eval-auc:0.55306
[99]	eval-auc:0.66037
[0]	eval-auc:0.55213
[99]	eval-auc:0.66950
[0]	eval-auc:0.54187
[99]	eval-auc:0.67519
[0]	eval-auc:0.54633
[99]	eval-auc:0.66274
[0]	eval-auc:0.55761
[99]	eval-auc:0.66845
Trial 18 complete
[0]	eval-auc:0.60810
[99]	eval-auc:0.68720
[0]	eval-auc:0.61357
[99]	eval-auc:0.70123
[0]	eval-auc:0.60739
[99]	eval-auc:0.68905
[0]	eval-auc:0.59638
[99]	eval-auc:0.67882
[0]	eval-auc:0.60940
[99]	eval-auc:0.68415
[0]	eval-auc:0.60808
[99]	eval-auc:0.67384
[0]	eval-auc:0.60398
[98]	eval-auc:0.69281
[0]	eval-auc:0.60919
[99]	eval-auc:0.70592
[0]	eval-auc:0.60481
[99]	eval-auc:0.68840
[0]	eval-auc:0.60914
[99]	eval-auc:0.69017
Trial 19 complete
[0]	eval-auc:0.53213
[99]	eval-auc:0.66048
[0]	eval-auc:0.52897
[99]	eval-auc:0.66855
[0]	eval-auc:0.53570
[35]	eval-auc:0.61440
[0]	eval-auc:0.53019
[99]	eval-auc:0.64247
[0]	eval-auc:0.52546
[99]	eval-auc:0.66017
[0]	eval-auc:0.53118
[99]	eval-auc:0.65665
[0]	eval-auc:0.52882
[99]	eval-auc:0.66182
[0]	eval-auc:0.53127
[99]	eval-auc:0.66977
[0]	eval-auc:0.52871
[36]	eval-auc:0.61129
[0]	eval-auc:0.53180
[99]	eval-auc:0.66359
Trial 20 complete
[0]	eval-auc:0.60811
[86]	eval-auc:0.69553
[0]	eval-auc:0.61274
[58]	eval-auc:0.70527
[0]	eval-auc:0.60745
[87]	eval-auc:0.69636
[0]	eval-auc:0.59606
[50]	eval-auc:0.68206
[0]	eval-auc:0.61073
[99]	eval-auc:0.69431
[0]	eval-auc:0.60810
[66]	eval-auc:0.67758
[0]	eval-auc:0.60431
[71]	eval-auc:0.70169
[0]	eval-auc:0.60917
[99]	eval-auc:0.71706
[0]	eval-auc:0.60482
[96]	eval-auc:0.69380
[0]	eval-auc:0.60921
[80]	eval-auc:0.69614
Trial 21 complete
[0]	eval-auc:0.53213
[99]	eval-auc:0.65012
[0]	eval-auc:0.52897
[99]	eval-auc:0.65580
[0]	eval-auc:0.53570
[41]	eval-auc:0.61425
[0]	eval-auc:0.53019
[99]	eval-auc:0.63845
[0]	eval-auc:0.52546
[99]	eval-auc:0.65566
[0]	eval-auc:0.53118
[99]	eval-auc:0.64914
[0]	eval-auc:0.52882
[99]	eval-auc:0.65969
[0]	eval-auc:0.53127
[99]	eval-auc:0.65781
[0]	eval-auc:0.52871
[99]	eval-auc:0.64150
[0]	eval-auc:0.53180
[99]	eval-auc:0.65710
Trial 22 complete
[0]	eval-auc:0.55491
[99]	eval-auc:0.69580
[0]	eval-auc:0.55247
[99]	eval-auc:0.70906
[0]	eval-auc:0.55982
[99]	eval-auc:0.69753
[0]	eval-auc:0.55001
[82]	eval-auc:0.68522
[0]	eval-auc:0.55059
[99]	eval-auc:0.69447
[0]	eval-auc:0.55306
[99]	eval-auc:0.68214
[0]	eval-auc:0.55213
[99]	eval-auc:0.70119
[0]	eval-auc:0.54187
[99]	eval-auc:0.71406
[0]	eval-auc:0.54633
[99]	eval-auc:0.69437
[0]	eval-auc:0.55761
[99]	eval-auc:0.69915
Trial 23 complete
[0]	eval-auc:0.58409
[99]	eval-auc:0.69032
[0]	eval-auc:0.58804
[99]	eval-auc:0.70311
[0]	eval-auc:0.58889
[99]	eval-auc:0.69000
[0]	eval-auc:0.57428
[99]	eval-auc:0.67898
[0]	eval-auc:0.58814
[99]	eval-auc:0.68384
[0]	eval-auc:0.58899
[99]	eval-auc:0.67470
[0]	eval-auc:0.58461
[99]	eval-auc:0.69600
[0]	eval-auc:0.58576
[99]	eval-auc:0.70701
[0]	eval-auc:0.58341
[99]	eval-auc:0.68757
[0]	eval-auc:0.58672
[99]	eval-auc:0.69215
Trial 24 complete
[0]	eval-auc:0.63732
[85]	eval-auc:0.69045
[0]	eval-auc:0.64945
[99]	eval-auc:0.70275
[0]	eval-auc:0.64107
[99]	eval-auc:0.68963
[0]	eval-auc:0.62971
[99]	eval-auc:0.68531
[0]	eval-auc:0.64332
[99]	eval-auc:0.68977
[0]	eval-auc:0.64631
[99]	eval-auc:0.67517
[0]	eval-auc:0.64490
[99]	eval-auc:0.69958
[0]	eval-auc:0.64814
[73]	eval-auc:0.70493
[0]	eval-auc:0.63683
[90]	eval-auc:0.68884
[0]	eval-auc:0.65404
[99]	eval-auc:0.69842
Trial 25 complete
[0]	eval-auc:0.63551
[99]	eval-auc:0.68971
[0]	eval-auc:0.64101
[99]	eval-auc:0.70197
[0]	eval-auc:0.63162
[99]	eval-auc:0.68952
[0]	eval-auc:0.61769
[99]	eval-auc:0.68079
[0]	eval-auc:0.63582
[99]	eval-auc:0.68969
[0]	eval-auc:0.63799
[99]	eval-auc:0.67636
[0]	eval-auc:0.63542
[99]	eval-auc:0.69801
[0]	eval-auc:0.64064
[98]	eval-auc:0.70925
[0]	eval-auc:0.63113
[94]	eval-auc:0.68914
[0]	eval-auc:0.63979
[99]	eval-auc:0.69556
Trial 26 complete
[0]	eval-auc:0.55491
[99]	eval-auc:0.69599
[0]	eval-auc:0.55247
[79]	eval-auc:0.70820
[0]	eval-auc:0.55982
[97]	eval-auc:0.69606
[0]	eval-auc:0.55001
[81]	eval-auc:0.68373
[0]	eval-auc:0.55059
[99]	eval-auc:0.69031
[0]	eval-auc:0.55306
[85]	eval-auc:0.68025
[0]	eval-auc:0.55213
[99]	eval-auc:0.70031
[0]	eval-auc:0.54187
[99]	eval-auc:0.71257
[0]	eval-auc:0.54633
[99]	eval-auc:0.69243
[0]	eval-auc:0.55761
[99]	eval-auc:0.69730
Trial 27 complete
[0]	eval-auc:0.56596
[99]	eval-auc:0.69537
[0]	eval-auc:0.56713
[63]	eval-auc:0.70718
[0]	eval-auc:0.57577
[74]	eval-auc:0.69418
[0]	eval-auc:0.56223
[87]	eval-auc:0.68403
[0]	eval-auc:0.57258
[91]	eval-auc:0.69332
[0]	eval-auc:0.57215
[99]	eval-auc:0.68305
[0]	eval-auc:0.56812
[77]	eval-auc:0.70237
[0]	eval-auc:0.56857
[99]	eval-auc:0.71420
[0]	eval-auc:0.56684
[99]	eval-auc:0.69451
[0]	eval-auc:0.56940
[99]	eval-auc:0.69717
Trial 28 complete
[0]	eval-auc:0.61779
[99]	eval-auc:0.69239
[0]	eval-auc:0.62502
[99]	eval-auc:0.70395
[0]	eval-auc:0.61718
[99]	eval-auc:0.69212
[0]	eval-auc:0.60457
[83]	eval-auc:0.68093
[0]	eval-auc:0.61931
[99]	eval-auc:0.69127
[0]	eval-auc:0.61744
[99]	eval-auc:0.67763
[0]	eval-auc:0.61521
[99]	eval-auc:0.70102
[0]	eval-auc:0.61567
[99]	eval-auc:0.71343
[0]	eval-auc:0.61558
[99]	eval-auc:0.69205
[0]	eval-auc:0.62113
[99]	eval-auc:0.69701
Trial 29 complete
[0]	eval-auc:0.62856
[58]	eval-auc:0.69181
[0]	eval-auc:0.64066
[82]	eval-auc:0.70191
[0]	eval-auc:0.62725
[73]	eval-auc:0.68855
[0]	eval-auc:0.61515
[56]	eval-auc:0.68453
[0]	eval-auc:0.63108
[55]	eval-auc:0.69094
[0]	eval-auc:0.62791
[91]	eval-auc:0.67400
[0]	eval-auc:0.62951
[56]	eval-auc:0.69800
[0]	eval-auc:0.63483
[76]	eval-auc:0.71359
[0]	eval-auc:0.62299
[68]	eval-auc:0.69217
[0]	eval-auc:0.62473
[66]	eval-auc:0.69406
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 09:40:11,928 - INFO - Success: XGBoost - openml__adult__7592_50pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__adult__7592_50pct_missing', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.50141
[54]	eval-auc:0.50959
[0]	eval-auc:0.50416
[81]	eval-auc:0.51320
[0]	eval-auc:0.50265
[88]	eval-auc:0.51273
[0]	eval-auc:0.50389
[95]	eval-auc:0.51160
[0]	eval-auc:0.50421
[52]	eval-auc:0.50946
[0]	eval-auc:0.50538
[99]	eval-auc:0.51401
[0]	eval-auc:0.50240
[69]	eval-auc:0.50607
[0]	eval-auc:0.50514
[96]	eval-auc:0.51383
[0]	eval-auc:0.50218
[73]	eval-auc:0.50666
[0]	eval-auc:0.50566
[31]	eval-auc:0.51208
Trial 1 complete
[0]	eval-auc:0.50099
[79]	eval-auc:0.50961
[0]	eval-auc:0.50286
[62]	eval-auc:0.51005
[0]	eval-auc:0.50270
[99]	eval-auc:0.51337
[0]	eval-auc:0.50405
[81]	eval-auc:0.51147
[0]	eval-auc:0.50330
[66]	eval-auc:0.51078
[0]	eval-auc:0.50541
[44]	eval-auc:0.51131
[0]	eval-auc:0.50178
[99]	eval-auc:0.50610
[0]	eval-auc:0.50411
[99]	eval-auc:0.51322
[0]	eval-auc:0.50043
[53]	eval-auc:0.50382
[0]	eval-auc:0.50555
[38]	eval-auc:0.50782
Trial 2 complete
[0]	eval-auc:0.50099
[64]	eval-auc:0.50960
[0]	eval-auc:0.50286
[93]	eval-auc:0.51333
[0]	eval-auc:0.50270
[97]	eval-auc:0.51160
[0]	eval-auc:0.50405
[68]	eval-auc:0.51085
[0]	eval-auc:0.50330
[59]	eval-auc:0.50986
[0]	eval-auc:0.50541
[39]	eval-auc:0.51076
[0]	eval-auc:0.50178
[77]	eval-auc:0.50568
[0]	eval-auc:0.50411
[99]	eval-auc:0.51358
[0]	eval-auc:0.50043
[39]	eval-auc:0.50466
[0]	eval-auc:0.50555
[29]	eval-auc:0.50795
Trial 3 complete
[0]	eval-auc:0.50141
[50]	eval-auc:0.50974
[0]	eval-auc:0.50416
[67]	eval-auc:0.51291
[0]	eval-auc:0.50265
[75]	eval-auc:0.51109
[0]	eval-auc:0.50389
[53]	eval-auc:0.51038
[0]	eval-auc:0.50421
[45]	eval-auc:0.50972
[0]	eval-auc:0.50538
[72]	eval-auc:0.51359
[0]	eval-auc:0.50240
[60]	eval-auc:0.50678
[0]	eval-auc:0.50514
[85]	eval-auc:0.51384
[0]	eval-auc:0.50218
[37]	eval-auc:0.50425
[0]	eval-auc:0.50566
[72]	eval-auc:0.51228
Trial 4 complete
[0]	eval-auc:0.50543
[44]	eval-auc:0.50958
[0]	eval-auc:0.50772
[78]	eval-auc:0.51346
[0]	eval-auc:0.50801
[37]	eval-auc:0.51064
[0]	eval-auc:0.50824
[41]	eval-auc:0.51112
[0]	eval-auc:0.50634
[37]	eval-auc:0.50742
[0]	eval-auc:0.50861
[39]	eval-auc:0.51301
[0]	eval-auc:0.50405
[48]	eval-auc:0.50710
[0]	eval-auc:0.50788
[34]	eval-auc:0.51154
[0]	eval-auc:0.50513
[79]	eval-auc:0.50765
[0]	eval-auc:0.51018
[31]	eval-auc:0.50933
Trial 5 complete
[0]	eval-auc:0.50099
[42]	eval-auc:0.50925
[0]	eval-auc:0.50248
[93]	eval-auc:0.51305
[0]	eval-auc:0.50179
[54]	eval-auc:0.51021
[0]	eval-auc:0.50363
[34]	eval-auc:0.51061
[0]	eval-auc:0.50263
[37]	eval-auc:0.50948
[0]	eval-auc:0.50435
[55]	eval-auc:0.51401
[0]	eval-auc:0.50133
[60]	eval-auc:0.50626
[0]	eval-auc:0.50432
[66]	eval-auc:0.51340
[0]	eval-auc:0.49994
[67]	eval-auc:0.50839
[0]	eval-auc:0.50168
[50]	eval-auc:0.51215
Trial 6 complete
[0]	eval-auc:0.50485
[68]	eval-auc:0.50973
[0]	eval-auc:0.50700
[51]	eval-auc:0.51004
[0]	eval-auc:0.50643
[99]	eval-auc:0.51234
[0]	eval-auc:0.50796
[67]	eval-auc:0.51056
[0]	eval-auc:0.50442
[45]	eval-auc:0.50943
[0]	eval-auc:0.50729
[53]	eval-auc:0.51131
[0]	eval-auc:0.50456
[85]	eval-auc:0.50568
[0]	eval-auc:0.50686
[99]	eval-auc:0.51349
[0]	eval-auc:0.50514
[26]	eval-auc:0.50484
[0]	eval-auc:0.50927
[26]	eval-auc:0.50744
Trial 7 complete
[0]	eval-auc:0.49951
[78]	eval-auc:0.50960
[0]	eval-auc:0.50147
[99]	eval-auc:0.51363
[0]	eval-auc:0.50093
[99]	eval-auc:0.50940
[0]	eval-auc:0.50377
[66]	eval-auc:0.51039
[0]	eval-auc:0.50063
[60]	eval-auc:0.50987
[0]	eval-auc:0.50293
[99]	eval-auc:0.51348
[0]	eval-auc:0.50109
[80]	eval-auc:0.50516
[0]	eval-auc:0.50325
[87]	eval-auc:0.51351
[0]	eval-auc:0.49938
[44]	eval-auc:0.50356
[0]	eval-auc:0.50195
[65]	eval-auc:0.51157
Trial 8 complete
[0]	eval-auc:0.50463
[89]	eval-auc:0.51331
[0]	eval-auc:0.50682
[50]	eval-auc:0.51263
[0]	eval-auc:0.50700
[49]	eval-auc:0.51077
[0]	eval-auc:0.50710
[46]	eval-auc:0.51076
[0]	eval-auc:0.50436
[34]	eval-auc:0.50910
[0]	eval-auc:0.50830
[60]	eval-auc:0.51325
[0]	eval-auc:0.50346
[62]	eval-auc:0.50569
[0]	eval-auc:0.50752
[43]	eval-auc:0.51223
[0]	eval-auc:0.50513
[46]	eval-auc:0.50658
[0]	eval-auc:0.50809
[39]	eval-auc:0.51071
Trial 9 complete
[0]	eval-auc:0.49951
[99]	eval-auc:0.50875
[0]	eval-auc:0.50147
[99]	eval-auc:0.51115
[0]	eval-auc:0.50093
[86]	eval-auc:0.50681
[0]	eval-auc:0.50377
[99]	eval-auc:0.50997
[0]	eval-auc:0.50063
[33]	eval-auc:0.50483
[0]	eval-auc:0.50293
[88]	eval-auc:0.51013
[0]	eval-auc:0.50109
[54]	eval-auc:0.50456
[0]	eval-auc:0.50325
[70]	eval-auc:0.50722
[0]	eval-auc:0.49938
[90]	eval-auc:0.50501
[0]	eval-auc:0.50195
[73]	eval-auc:0.50969
Trial 10 complete
[0]	eval-auc:0.50431
[30]	eval-auc:0.50872
[0]	eval-auc:0.50701
[46]	eval-auc:0.51336
[0]	eval-auc:0.50504
[38]	eval-auc:0.51204
[0]	eval-auc:0.50722
[32]	eval-auc:0.51146
[0]	eval-auc:0.50487
[30]	eval-auc:0.50973
[0]	eval-auc:0.50583
[46]	eval-auc:0.51356
[0]	eval-auc:0.50450
[37]	eval-auc:0.50612
[0]	eval-auc:0.50546
[36]	eval-auc:0.51300
[0]	eval-auc:0.50441
[35]	eval-auc:0.50654
[0]	eval-auc:0.50763
[23]	eval-auc:0.51122
Trial 11 complete
[0]	eval-auc:0.50099
[72]	eval-auc:0.50943
[0]	eval-auc:0.50248
[91]	eval-auc:0.51252
[0]	eval-auc:0.50179
[75]	eval-auc:0.51135
[0]	eval-auc:0.50363
[48]	eval-auc:0.51008
[0]	eval-auc:0.50263
[44]	eval-auc:0.50959
[0]	eval-auc:0.50435
[77]	eval-auc:0.51323
[0]	eval-auc:0.50133
[62]	eval-auc:0.50607
[0]	eval-auc:0.50432
[80]	eval-auc:0.51367
[0]	eval-auc:0.49994
[31]	eval-auc:0.50508
[0]	eval-auc:0.50169
[34]	eval-auc:0.50977
Trial 12 complete
[0]	eval-auc:0.50099
[65]	eval-auc:0.51044
[0]	eval-auc:0.50248
[96]	eval-auc:0.51320
[0]	eval-auc:0.50179
[94]	eval-auc:0.51160
[0]	eval-auc:0.50363
[61]	eval-auc:0.50999
[0]	eval-auc:0.50263
[58]	eval-auc:0.50945
[0]	eval-auc:0.50435
[99]	eval-auc:0.51414
[0]	eval-auc:0.50133
[96]	eval-auc:0.50676
[0]	eval-auc:0.50432
[99]	eval-auc:0.51352
[0]	eval-auc:0.49994
[69]	eval-auc:0.50514
[0]	eval-auc:0.50169
[34]	eval-auc:0.50687
Trial 13 complete
[0]	eval-auc:0.50412
[26]	eval-auc:0.50779
[0]	eval-auc:0.50701
[40]	eval-auc:0.51390
[0]	eval-auc:0.50504
[30]	eval-auc:0.50867
[0]	eval-auc:0.50647
[28]	eval-auc:0.51081
[0]	eval-auc:0.50487
[26]	eval-auc:0.50887
[0]	eval-auc:0.50583
[33]	eval-auc:0.51329
[0]	eval-auc:0.50450
[25]	eval-auc:0.50599
[0]	eval-auc:0.50546
[34]	eval-auc:0.51302
[0]	eval-auc:0.50441
[44]	eval-auc:0.50989
[0]	eval-auc:0.50763
[22]	eval-auc:0.51212
Trial 14 complete
[0]	eval-auc:0.50141
[99]	eval-auc:0.51044
[0]	eval-auc:0.50416
[95]	eval-auc:0.51005
[0]	eval-auc:0.50312
[99]	eval-auc:0.51154
[0]	eval-auc:0.50389
[90]	eval-auc:0.51099
[0]	eval-auc:0.50421
[22]	eval-auc:0.50491
[0]	eval-auc:0.50570
[63]	eval-auc:0.51102
[0]	eval-auc:0.50240
[99]	eval-auc:0.50655
[0]	eval-auc:0.50416
[99]	eval-auc:0.51159
[0]	eval-auc:0.50218
[73]	eval-auc:0.50484
[0]	eval-auc:0.50566
[51]	eval-auc:0.50954
Trial 15 complete
[0]	eval-auc:0.50463
[44]	eval-auc:0.50929
[0]	eval-auc:0.50790
[64]	eval-auc:0.51288
[0]	eval-auc:0.50584
[62]	eval-auc:0.51070
[0]	eval-auc:0.50740
[44]	eval-auc:0.51238
[0]	eval-auc:0.50482
[38]	eval-auc:0.50852
[0]	eval-auc:0.50728
[83]	eval-auc:0.51265
[0]	eval-auc:0.50397
[72]	eval-auc:0.50599
[0]	eval-auc:0.50620
[73]	eval-auc:0.51314
[0]	eval-auc:0.50436
[26]	eval-auc:0.50466
[0]	eval-auc:0.50850
[24]	eval-auc:0.50979
Trial 16 complete
[0]	eval-auc:0.50099
[99]	eval-auc:0.50901
[0]	eval-auc:0.50248
[99]	eval-auc:0.51089
[0]	eval-auc:0.50179
[99]	eval-auc:0.50909
[0]	eval-auc:0.50363
[99]	eval-auc:0.51077
[0]	eval-auc:0.50263
[98]	eval-auc:0.51039
[0]	eval-auc:0.50435
[77]	eval-auc:0.51102
[0]	eval-auc:0.50133
[47]	eval-auc:0.50465
[0]	eval-auc:0.50432
[99]	eval-auc:0.51216
[0]	eval-auc:0.49994
[76]	eval-auc:0.50527
[0]	eval-auc:0.50169
[65]	eval-auc:0.50685
Trial 17 complete
[0]	eval-auc:0.50099
[99]	eval-auc:0.50932
[0]	eval-auc:0.50248
[63]	eval-auc:0.50798
[0]	eval-auc:0.50179
[98]	eval-auc:0.50993
[0]	eval-auc:0.50363
[99]	eval-auc:0.51191
[0]	eval-auc:0.50263
[99]	eval-auc:0.51183
[0]	eval-auc:0.50435
[80]	eval-auc:0.51103
[0]	eval-auc:0.50133
[45]	eval-auc:0.50465
[0]	eval-auc:0.50432
[99]	eval-auc:0.51245
[0]	eval-auc:0.49994
[47]	eval-auc:0.50514
[0]	eval-auc:0.50169
[52]	eval-auc:0.51040
Trial 18 complete
[0]	eval-auc:0.50195
[91]	eval-auc:0.50961
[0]	eval-auc:0.50518
[58]	eval-auc:0.51026
[0]	eval-auc:0.50392
[95]	eval-auc:0.51267
[0]	eval-auc:0.50562
[64]	eval-auc:0.51060
[0]	eval-auc:0.50439
[66]	eval-auc:0.51052
[0]	eval-auc:0.50567
[51]	eval-auc:0.51030
[0]	eval-auc:0.50283
[90]	eval-auc:0.50609
[0]	eval-auc:0.50519
[99]	eval-auc:0.51310
[0]	eval-auc:0.50218
[41]	eval-auc:0.50510
[0]	eval-auc:0.50656
[38]	eval-auc:0.51038
Trial 19 complete
[0]	eval-auc:0.49951
[72]	eval-auc:0.50716
[0]	eval-auc:0.50147
[99]	eval-auc:0.51089
[0]	eval-auc:0.50093
[83]	eval-auc:0.50681
[0]	eval-auc:0.50377
[99]	eval-auc:0.51011
[0]	eval-auc:0.50063
[33]	eval-auc:0.50483
[0]	eval-auc:0.50293
[92]	eval-auc:0.51013
[0]	eval-auc:0.50109
[55]	eval-auc:0.50456
[0]	eval-auc:0.50325
[99]	eval-auc:0.50943
[0]	eval-auc:0.49938
[58]	eval-auc:0.50487
[0]	eval-auc:0.50195
[99]	eval-auc:0.51155
Trial 20 complete
[0]	eval-auc:0.50195
[51]	eval-auc:0.51005
[0]	eval-auc:0.50518
[45]	eval-auc:0.51278
[0]	eval-auc:0.50392
[43]	eval-auc:0.51072
[0]	eval-auc:0.50562
[33]	eval-auc:0.51109
[0]	eval-auc:0.50439
[30]	eval-auc:0.50960
[0]	eval-auc:0.50567
[44]	eval-auc:0.51249
[0]	eval-auc:0.50282
[34]	eval-auc:0.50652
[0]	eval-auc:0.50519
[45]	eval-auc:0.51211
[0]	eval-auc:0.50217
[66]	eval-auc:0.50934
[0]	eval-auc:0.50656
[36]	eval-auc:0.51041
Trial 21 complete
[0]	eval-auc:0.49951
[92]	eval-auc:0.50716
[0]	eval-auc:0.50147
[98]	eval-auc:0.50740
[0]	eval-auc:0.50093
[74]	eval-auc:0.50657
[0]	eval-auc:0.50377
[98]	eval-auc:0.50942
[0]	eval-auc:0.50063
[67]	eval-auc:0.50502
[0]	eval-auc:0.50293
[99]	eval-auc:0.51012
[0]	eval-auc:0.50109
[63]	eval-auc:0.50438
[0]	eval-auc:0.50325
[99]	eval-auc:0.50942
[0]	eval-auc:0.49938
[72]	eval-auc:0.50487
[0]	eval-auc:0.50195
[93]	eval-auc:0.51008
Trial 22 complete
[0]	eval-auc:0.50099
[52]	eval-auc:0.50873
[0]	eval-auc:0.50248
[68]	eval-auc:0.51249
[0]	eval-auc:0.50179
[51]	eval-auc:0.51136
[0]	eval-auc:0.50363
[40]	eval-auc:0.51130
[0]	eval-auc:0.50263
[39]	eval-auc:0.50945
[0]	eval-auc:0.50435
[71]	eval-auc:0.51415
[0]	eval-auc:0.50133
[52]	eval-auc:0.50531
[0]	eval-auc:0.50432
[67]	eval-auc:0.51318
[0]	eval-auc:0.49994
[32]	eval-auc:0.50489
[0]	eval-auc:0.50169
[42]	eval-auc:0.51151
Trial 23 complete
[0]	eval-auc:0.50141
[89]	eval-auc:0.50947
[0]	eval-auc:0.50507
[52]	eval-auc:0.51025
[0]	eval-auc:0.50312
[99]	eval-auc:0.51220
[0]	eval-auc:0.50389
[56]	eval-auc:0.51147
[0]	eval-auc:0.50421
[60]	eval-auc:0.51052
[0]	eval-auc:0.50570
[99]	eval-auc:0.51418
[0]	eval-auc:0.50240
[89]	eval-auc:0.50609
[0]	eval-auc:0.50416
[66]	eval-auc:0.51292
[0]	eval-auc:0.50043
[53]	eval-auc:0.50340
[0]	eval-auc:0.50566
[35]	eval-auc:0.50885
Trial 24 complete
[0]	eval-auc:0.50541
[51]	eval-auc:0.50939
[0]	eval-auc:0.50773
[79]	eval-auc:0.51263
[0]	eval-auc:0.50802
[91]	eval-auc:0.51133
[0]	eval-auc:0.50824
[44]	eval-auc:0.51038
[0]	eval-auc:0.50646
[44]	eval-auc:0.51057
[0]	eval-auc:0.50747
[62]	eval-auc:0.51312
[0]	eval-auc:0.50293
[90]	eval-auc:0.50722
[0]	eval-auc:0.50788
[64]	eval-auc:0.51233
[0]	eval-auc:0.50513
[39]	eval-auc:0.50525
[0]	eval-auc:0.50886
[20]	eval-auc:0.50942
Trial 25 complete
[0]	eval-auc:0.50543
[55]	eval-auc:0.50916
[0]	eval-auc:0.50700
[80]	eval-auc:0.51334
[0]	eval-auc:0.50643
[62]	eval-auc:0.51241
[0]	eval-auc:0.50801
[45]	eval-auc:0.51121
[0]	eval-auc:0.50442
[47]	eval-auc:0.50897
[0]	eval-auc:0.50728
[98]	eval-auc:0.51426
[0]	eval-auc:0.50456
[68]	eval-auc:0.50620
[0]	eval-auc:0.50686
[88]	eval-auc:0.51313
[0]	eval-auc:0.50514
[23]	eval-auc:0.50442
[0]	eval-auc:0.50927
[21]	eval-auc:0.50810
Trial 26 complete
[0]	eval-auc:0.50099
[49]	eval-auc:0.50873
[0]	eval-auc:0.50248
[95]	eval-auc:0.51255
[0]	eval-auc:0.50179
[62]	eval-auc:0.51160
[0]	eval-auc:0.50363
[40]	eval-auc:0.51063
[0]	eval-auc:0.50263
[42]	eval-auc:0.50951
[0]	eval-auc:0.50435
[79]	eval-auc:0.51350
[0]	eval-auc:0.50133
[57]	eval-auc:0.50611
[0]	eval-auc:0.50432
[73]	eval-auc:0.51358
[0]	eval-auc:0.49994
[35]	eval-auc:0.50406
[0]	eval-auc:0.50169
[32]	eval-auc:0.51007
Trial 27 complete
[0]	eval-auc:0.50099
[50]	eval-auc:0.51016
[0]	eval-auc:0.50286
[61]	eval-auc:0.51321
[0]	eval-auc:0.50270
[46]	eval-auc:0.51160
[0]	eval-auc:0.50405
[36]	eval-auc:0.51091
[0]	eval-auc:0.50330
[37]	eval-auc:0.50984
[0]	eval-auc:0.50541
[55]	eval-auc:0.51346
[0]	eval-auc:0.50178
[44]	eval-auc:0.50555
[0]	eval-auc:0.50411
[57]	eval-auc:0.51368
[0]	eval-auc:0.50043
[68]	eval-auc:0.50825
[0]	eval-auc:0.50555
[23]	eval-auc:0.50979
Trial 28 complete
[0]	eval-auc:0.50380
[49]	eval-auc:0.50973
[0]	eval-auc:0.50634
[94]	eval-auc:0.51361
[0]	eval-auc:0.50374
[68]	eval-auc:0.51260
[0]	eval-auc:0.50629
[50]	eval-auc:0.51089
[0]	eval-auc:0.50506
[52]	eval-auc:0.50935
[0]	eval-auc:0.50562
[88]	eval-auc:0.51413
[0]	eval-auc:0.50363
[57]	eval-auc:0.50612
[0]	eval-auc:0.50546
[82]	eval-auc:0.51300
[0]	eval-auc:0.50387
[64]	eval-auc:0.50667
[0]	eval-auc:0.50776
[23]	eval-auc:0.50725
Trial 29 complete
[0]	eval-auc:0.50463
[30]	eval-auc:0.50913
[0]	eval-auc:0.50790
[41]	eval-auc:0.51259
[0]	eval-auc:0.50584
[35]	eval-auc:0.51203
[0]	eval-auc:0.50740
[30]	eval-auc:0.51003
[0]	eval-auc:0.50482
[24]	eval-auc:0.50835
[0]	eval-auc:0.50728
[45]	eval-auc:0.51452
[0]	eval-auc:0.50397
[32]	eval-auc:0.50613
[0]	eval-auc:0.50620
[39]	eval-auc:0.51292
[0]	eval-auc:0.50436
[45]	eval-auc:0.50832
[0]	eval-auc:0.50850
[44]	eval-auc:0.51212
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 09:41:12,999 - INFO - Success: XGBoost - openml__adult__7592_75pct_missing
Output:
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__adult__7592_75pct_missing', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 1 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 2 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 3 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 4 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 5 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 6 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 7 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 8 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 9 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 10 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 11 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 12 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 13 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 14 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 15 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 16 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 17 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 18 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 19 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 20 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 21 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 22 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 23 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 24 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 25 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 26 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 27 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 28 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 29 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 09:49:27,382 - INFO - Success: XGBoost - openml__spambase__43_100pct
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__spambase__43_100pct', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.94968
[99]	eval-auc:0.99263
[0]	eval-auc:0.95299
[58]	eval-auc:0.99174
[0]	eval-auc:0.95655
[99]	eval-auc:0.99370
[0]	eval-auc:0.92111
[99]	eval-auc:0.98644
[0]	eval-auc:0.93772
[99]	eval-auc:0.98944
[0]	eval-auc:0.90942
[99]	eval-auc:0.97685
[0]	eval-auc:0.92491
[99]	eval-auc:0.98957
[0]	eval-auc:0.93435
[99]	eval-auc:0.98861
[0]	eval-auc:0.91364
[80]	eval-auc:0.98047
[0]	eval-auc:0.90614
[99]	eval-auc:0.98385
Trial 1 complete
[0]	eval-auc:0.93517
[99]	eval-auc:0.99167
[0]	eval-auc:0.94213
[99]	eval-auc:0.99095
[0]	eval-auc:0.93168
[99]	eval-auc:0.99216
[0]	eval-auc:0.90294
[99]	eval-auc:0.98314
[0]	eval-auc:0.93520
[99]	eval-auc:0.98769
[0]	eval-auc:0.91576
[99]	eval-auc:0.97633
[0]	eval-auc:0.92653
[99]	eval-auc:0.98774
[0]	eval-auc:0.90781
[99]	eval-auc:0.98771
[0]	eval-auc:0.90346
[99]	eval-auc:0.98056
[0]	eval-auc:0.89061
[99]	eval-auc:0.98178
Trial 2 complete
[0]	eval-auc:0.93517
[99]	eval-auc:0.99308
[0]	eval-auc:0.94213
[70]	eval-auc:0.99065
[0]	eval-auc:0.93168
[99]	eval-auc:0.99313
[0]	eval-auc:0.90294
[99]	eval-auc:0.98596
[0]	eval-auc:0.93520
[99]	eval-auc:0.98876
[0]	eval-auc:0.91576
[99]	eval-auc:0.97743
[0]	eval-auc:0.92653
[99]	eval-auc:0.98850
[0]	eval-auc:0.90781
[99]	eval-auc:0.98875
[0]	eval-auc:0.90346
[99]	eval-auc:0.98034
[0]	eval-auc:0.89061
[99]	eval-auc:0.98235
Trial 3 complete
[0]	eval-auc:0.94968
[99]	eval-auc:0.99385
[0]	eval-auc:0.95299
[94]	eval-auc:0.99205
[0]	eval-auc:0.95655
[99]	eval-auc:0.99418
[0]	eval-auc:0.92111
[99]	eval-auc:0.98779
[0]	eval-auc:0.93772
[99]	eval-auc:0.98943
[0]	eval-auc:0.90942
[84]	eval-auc:0.97719
[0]	eval-auc:0.92491
[99]	eval-auc:0.98967
[0]	eval-auc:0.93435
[99]	eval-auc:0.98941
[0]	eval-auc:0.91364
[69]	eval-auc:0.98133
[0]	eval-auc:0.90614
[99]	eval-auc:0.98381
Trial 4 complete
[0]	eval-auc:0.96313
[89]	eval-auc:0.99371
[0]	eval-auc:0.95885
[38]	eval-auc:0.99247
[0]	eval-auc:0.95901
[82]	eval-auc:0.99384
[0]	eval-auc:0.94152
[63]	eval-auc:0.98798
[0]	eval-auc:0.96365
[95]	eval-auc:0.99044
[0]	eval-auc:0.93159
[81]	eval-auc:0.97628
[0]	eval-auc:0.94823
[99]	eval-auc:0.99267
[0]	eval-auc:0.94339
[99]	eval-auc:0.99018
[0]	eval-auc:0.95779
[46]	eval-auc:0.97968
[0]	eval-auc:0.93486
[65]	eval-auc:0.98460
Trial 5 complete
[0]	eval-auc:0.91480
[99]	eval-auc:0.99389
[0]	eval-auc:0.91568
[58]	eval-auc:0.99056
[0]	eval-auc:0.91971
[99]	eval-auc:0.99444
[0]	eval-auc:0.86298
[99]	eval-auc:0.98981
[0]	eval-auc:0.91663
[99]	eval-auc:0.99022
[0]	eval-auc:0.88887
[60]	eval-auc:0.97651
[0]	eval-auc:0.91737
[99]	eval-auc:0.98949
[0]	eval-auc:0.89118
[99]	eval-auc:0.98962
[0]	eval-auc:0.87525
[73]	eval-auc:0.97950
[0]	eval-auc:0.86742
[80]	eval-auc:0.98302
Trial 6 complete
[0]	eval-auc:0.95159
[75]	eval-auc:0.98940
[0]	eval-auc:0.95627
[94]	eval-auc:0.99221
[0]	eval-auc:0.97329
[19]	eval-auc:0.96944
[0]	eval-auc:0.93444
[99]	eval-auc:0.98459
[0]	eval-auc:0.94486
[99]	eval-auc:0.98832
[0]	eval-auc:0.94111
[99]	eval-auc:0.97570
[0]	eval-auc:0.95808
[45]	eval-auc:0.98034
[0]	eval-auc:0.95338
[99]	eval-auc:0.98639
[0]	eval-auc:0.94604
[99]	eval-auc:0.97964
[0]	eval-auc:0.93449
[99]	eval-auc:0.98501
Trial 7 complete
[0]	eval-auc:0.85109
[99]	eval-auc:0.99329
[0]	eval-auc:0.88894
[64]	eval-auc:0.98910
[0]	eval-auc:0.87143
[99]	eval-auc:0.99178
[0]	eval-auc:0.83693
[99]	eval-auc:0.98175
[0]	eval-auc:0.86091
[99]	eval-auc:0.98586
[0]	eval-auc:0.85630
[99]	eval-auc:0.97459
[0]	eval-auc:0.88540
[99]	eval-auc:0.98648
[0]	eval-auc:0.86075
[99]	eval-auc:0.98804
[0]	eval-auc:0.80154
[99]	eval-auc:0.97950
[0]	eval-auc:0.83737
[99]	eval-auc:0.98182
Trial 8 complete
[0]	eval-auc:0.96352
[99]	eval-auc:0.99308
[0]	eval-auc:0.96548
[59]	eval-auc:0.99219
[0]	eval-auc:0.96253
[90]	eval-auc:0.99354
[0]	eval-auc:0.92905
[81]	eval-auc:0.98691
[0]	eval-auc:0.96522
[99]	eval-auc:0.99089
[0]	eval-auc:0.93852
[99]	eval-auc:0.97800
[0]	eval-auc:0.95101
[99]	eval-auc:0.99131
[0]	eval-auc:0.95121
[99]	eval-auc:0.99063
[0]	eval-auc:0.95657
[63]	eval-auc:0.98123
[0]	eval-auc:0.92600
[82]	eval-auc:0.98525
Trial 9 complete
[0]	eval-auc:0.85109
[99]	eval-auc:0.98331
[0]	eval-auc:0.88894
[99]	eval-auc:0.98795
[0]	eval-auc:0.87143
[99]	eval-auc:0.98670
[0]	eval-auc:0.83693
[99]	eval-auc:0.96325
[0]	eval-auc:0.86091
[99]	eval-auc:0.98062
[0]	eval-auc:0.85630
[99]	eval-auc:0.96848
[0]	eval-auc:0.88540
[99]	eval-auc:0.97728
[0]	eval-auc:0.86075
[99]	eval-auc:0.97516
[0]	eval-auc:0.80154
[99]	eval-auc:0.96928
[0]	eval-auc:0.83737
[99]	eval-auc:0.97078
Trial 10 complete
[0]	eval-auc:0.95394
[70]	eval-auc:0.99433
[0]	eval-auc:0.95236
[80]	eval-auc:0.99253
[0]	eval-auc:0.96617
[65]	eval-auc:0.99446
[0]	eval-auc:0.92451
[58]	eval-auc:0.98853
[0]	eval-auc:0.94291
[99]	eval-auc:0.98901
[0]	eval-auc:0.92291
[91]	eval-auc:0.98002
[0]	eval-auc:0.94583
[99]	eval-auc:0.99209
[0]	eval-auc:0.94214
[99]	eval-auc:0.99073
[0]	eval-auc:0.94719
[48]	eval-auc:0.98156
[0]	eval-auc:0.92122
[49]	eval-auc:0.98515
Trial 11 complete
[0]	eval-auc:0.91480
[99]	eval-auc:0.99473
[0]	eval-auc:0.91568
[53]	eval-auc:0.98994
[0]	eval-auc:0.91971
[99]	eval-auc:0.99285
[0]	eval-auc:0.86298
[99]	eval-auc:0.98842
[0]	eval-auc:0.91663
[99]	eval-auc:0.98838
[0]	eval-auc:0.88887
[99]	eval-auc:0.97546
[0]	eval-auc:0.91737
[99]	eval-auc:0.98886
[0]	eval-auc:0.89118
[99]	eval-auc:0.98909
[0]	eval-auc:0.87525
[68]	eval-auc:0.98071
[0]	eval-auc:0.86742
[99]	eval-auc:0.98220
Trial 12 complete
[0]	eval-auc:0.91480
[99]	eval-auc:0.99305
[0]	eval-auc:0.91568
[63]	eval-auc:0.98928
[0]	eval-auc:0.91971
[99]	eval-auc:0.99251
[0]	eval-auc:0.86298
[99]	eval-auc:0.98442
[0]	eval-auc:0.91663
[99]	eval-auc:0.98691
[0]	eval-auc:0.88887
[99]	eval-auc:0.97476
[0]	eval-auc:0.91737
[99]	eval-auc:0.98801
[0]	eval-auc:0.89118
[99]	eval-auc:0.98808
[0]	eval-auc:0.87525
[94]	eval-auc:0.98055
[0]	eval-auc:0.86742
[99]	eval-auc:0.98092
Trial 13 complete
[0]	eval-auc:0.95394
[48]	eval-auc:0.99283
[0]	eval-auc:0.95213
[47]	eval-auc:0.99176
[0]	eval-auc:0.96793
[47]	eval-auc:0.99273
[0]	eval-auc:0.92499
[51]	eval-auc:0.98675
[0]	eval-auc:0.93956
[73]	eval-auc:0.98954
[0]	eval-auc:0.92992
[59]	eval-auc:0.97913
[0]	eval-auc:0.95155
[99]	eval-auc:0.99333
[0]	eval-auc:0.94259
[94]	eval-auc:0.99158
[0]	eval-auc:0.94885
[42]	eval-auc:0.97935
[0]	eval-auc:0.92112
[85]	eval-auc:0.98417
Trial 14 complete
[0]	eval-auc:0.94964
[99]	eval-auc:0.98762
[0]	eval-auc:0.95299
[99]	eval-auc:0.99194
[0]	eval-auc:0.95655
[99]	eval-auc:0.99006
[0]	eval-auc:0.91957
[99]	eval-auc:0.97833
[0]	eval-auc:0.93950
[99]	eval-auc:0.98573
[0]	eval-auc:0.90944
[99]	eval-auc:0.97377
[0]	eval-auc:0.92434
[99]	eval-auc:0.98482
[0]	eval-auc:0.93462
[99]	eval-auc:0.98342
[0]	eval-auc:0.91364
[99]	eval-auc:0.97914
[0]	eval-auc:0.91028
[99]	eval-auc:0.97915
Trial 15 complete
[0]	eval-auc:0.94794
[99]	eval-auc:0.99466
[0]	eval-auc:0.95061
[37]	eval-auc:0.99125
[0]	eval-auc:0.96734
[99]	eval-auc:0.99406
[0]	eval-auc:0.92773
[99]	eval-auc:0.98848
[0]	eval-auc:0.93834
[99]	eval-auc:0.98893
[0]	eval-auc:0.92790
[99]	eval-auc:0.97911
[0]	eval-auc:0.94166
[99]	eval-auc:0.99082
[0]	eval-auc:0.94606
[99]	eval-auc:0.98863
[0]	eval-auc:0.94295
[84]	eval-auc:0.98168
[0]	eval-auc:0.93199
[99]	eval-auc:0.98523
Trial 16 complete
[0]	eval-auc:0.91480
[99]	eval-auc:0.98480
[0]	eval-auc:0.91568
[99]	eval-auc:0.98875
[0]	eval-auc:0.91971
[99]	eval-auc:0.98826
[0]	eval-auc:0.86298
[99]	eval-auc:0.97013
[0]	eval-auc:0.91663
[99]	eval-auc:0.98166
[0]	eval-auc:0.88887
[99]	eval-auc:0.96967
[0]	eval-auc:0.91737
[99]	eval-auc:0.97996
[0]	eval-auc:0.89118
[99]	eval-auc:0.97866
[0]	eval-auc:0.87525
[99]	eval-auc:0.97317
[0]	eval-auc:0.86742
[99]	eval-auc:0.97314
Trial 17 complete
[0]	eval-auc:0.91480
[99]	eval-auc:0.98508
[0]	eval-auc:0.91568
[99]	eval-auc:0.98915
[0]	eval-auc:0.91971
[99]	eval-auc:0.98855
[0]	eval-auc:0.86298
[99]	eval-auc:0.96961
[0]	eval-auc:0.91663
[99]	eval-auc:0.98271
[0]	eval-auc:0.88887
[99]	eval-auc:0.97082
[0]	eval-auc:0.91737
[99]	eval-auc:0.98097
[0]	eval-auc:0.89118
[99]	eval-auc:0.97884
[0]	eval-auc:0.87525
[99]	eval-auc:0.97447
[0]	eval-auc:0.86742
[99]	eval-auc:0.97431
Trial 18 complete
[0]	eval-auc:0.95408
[99]	eval-auc:0.99142
[0]	eval-auc:0.94697
[99]	eval-auc:0.99279
[0]	eval-auc:0.95865
[99]	eval-auc:0.99244
[0]	eval-auc:0.91714
[99]	eval-auc:0.98549
[0]	eval-auc:0.93945
[99]	eval-auc:0.98799
[0]	eval-auc:0.91352
[99]	eval-auc:0.97655
[0]	eval-auc:0.93404
[99]	eval-auc:0.98821
[0]	eval-auc:0.92938
[99]	eval-auc:0.98684
[0]	eval-auc:0.91862
[99]	eval-auc:0.98183
[0]	eval-auc:0.91523
[99]	eval-auc:0.98306
Trial 19 complete
[0]	eval-auc:0.85109
[99]	eval-auc:0.98341
[0]	eval-auc:0.88894
[99]	eval-auc:0.98805
[0]	eval-auc:0.87143
[99]	eval-auc:0.98666
[0]	eval-auc:0.83693
[99]	eval-auc:0.96354
[0]	eval-auc:0.86091
[99]	eval-auc:0.98096
[0]	eval-auc:0.85630
[99]	eval-auc:0.96881
[0]	eval-auc:0.88540
[99]	eval-auc:0.97732
[0]	eval-auc:0.86075
[99]	eval-auc:0.97533
[0]	eval-auc:0.80154
[99]	eval-auc:0.96945
[0]	eval-auc:0.83737
[99]	eval-auc:0.97233
Trial 20 complete
[0]	eval-auc:0.95485
[54]	eval-auc:0.99251
[0]	eval-auc:0.95568
[77]	eval-auc:0.99275
[0]	eval-auc:0.95838
[74]	eval-auc:0.99380
[0]	eval-auc:0.92090
[76]	eval-auc:0.98808
[0]	eval-auc:0.94399
[59]	eval-auc:0.98945
[0]	eval-auc:0.91147
[73]	eval-auc:0.97687
[0]	eval-auc:0.94137
[99]	eval-auc:0.99031
[0]	eval-auc:0.92895
[99]	eval-auc:0.99152
[0]	eval-auc:0.91724
[53]	eval-auc:0.98071
[0]	eval-auc:0.91376
[94]	eval-auc:0.98458
Trial 21 complete
[0]	eval-auc:0.85109
[99]	eval-auc:0.98017
[0]	eval-auc:0.88894
[99]	eval-auc:0.98649
[0]	eval-auc:0.87143
[99]	eval-auc:0.98472
[0]	eval-auc:0.83693
[99]	eval-auc:0.95891
[0]	eval-auc:0.86091
[99]	eval-auc:0.97864
[0]	eval-auc:0.85630
[99]	eval-auc:0.96482
[0]	eval-auc:0.88540
[99]	eval-auc:0.97500
[0]	eval-auc:0.86075
[99]	eval-auc:0.97234
[0]	eval-auc:0.80154
[99]	eval-auc:0.96790
[0]	eval-auc:0.83737
[99]	eval-auc:0.96640
Trial 22 complete
[0]	eval-auc:0.91480
[99]	eval-auc:0.99392
[0]	eval-auc:0.91568
[64]	eval-auc:0.99073
[0]	eval-auc:0.91971
[99]	eval-auc:0.99315
[0]	eval-auc:0.86298
[99]	eval-auc:0.98874
[0]	eval-auc:0.91663
[99]	eval-auc:0.98976
[0]	eval-auc:0.88887
[57]	eval-auc:0.97396
[0]	eval-auc:0.91737
[99]	eval-auc:0.98930
[0]	eval-auc:0.89118
[77]	eval-auc:0.98783
[0]	eval-auc:0.87525
[99]	eval-auc:0.98077
[0]	eval-auc:0.86742
[96]	eval-auc:0.98174
Trial 23 complete
[0]	eval-auc:0.94952
[99]	eval-auc:0.99225
[0]	eval-auc:0.95273
[99]	eval-auc:0.99211
[0]	eval-auc:0.95645
[99]	eval-auc:0.99311
[0]	eval-auc:0.92153
[99]	eval-auc:0.98524
[0]	eval-auc:0.94538
[99]	eval-auc:0.98740
[0]	eval-auc:0.91663
[99]	eval-auc:0.97676
[0]	eval-auc:0.93600
[99]	eval-auc:0.98838
[0]	eval-auc:0.93726
[99]	eval-auc:0.98760
[0]	eval-auc:0.91383
[99]	eval-auc:0.98079
[0]	eval-auc:0.91016
[99]	eval-auc:0.98239
Trial 24 complete
[0]	eval-auc:0.95979
[99]	eval-auc:0.99239
[0]	eval-auc:0.95591
[90]	eval-auc:0.99261
[0]	eval-auc:0.94939
[99]	eval-auc:0.99228
[0]	eval-auc:0.92812
[99]	eval-auc:0.98703
[0]	eval-auc:0.96923
[99]	eval-auc:0.98948
[0]	eval-auc:0.93928
[99]	eval-auc:0.97838
[0]	eval-auc:0.94656
[99]	eval-auc:0.98914
[0]	eval-auc:0.94653
[99]	eval-auc:0.98699
[0]	eval-auc:0.93779
[92]	eval-auc:0.98067
[0]	eval-auc:0.93675
[99]	eval-auc:0.98432
Trial 25 complete
[0]	eval-auc:0.94809
[59]	eval-auc:0.98939
[0]	eval-auc:0.95631
[99]	eval-auc:0.99308
[0]	eval-auc:0.96994
[99]	eval-auc:0.99257
[0]	eval-auc:0.93238
[99]	eval-auc:0.98669
[0]	eval-auc:0.93922
[99]	eval-auc:0.98820
[0]	eval-auc:0.93990
[99]	eval-auc:0.97806
[0]	eval-auc:0.94771
[99]	eval-auc:0.98897
[0]	eval-auc:0.94482
[99]	eval-auc:0.98744
[0]	eval-auc:0.94103
[78]	eval-auc:0.98067
[0]	eval-auc:0.93252
[99]	eval-auc:0.98503
Trial 26 complete
[0]	eval-auc:0.91480
[99]	eval-auc:0.99454
[0]	eval-auc:0.91568
[55]	eval-auc:0.98994
[0]	eval-auc:0.91971
[99]	eval-auc:0.99343
[0]	eval-auc:0.86298
[99]	eval-auc:0.98777
[0]	eval-auc:0.91663
[99]	eval-auc:0.98936
[0]	eval-auc:0.88887
[88]	eval-auc:0.97412
[0]	eval-auc:0.91737
[99]	eval-auc:0.98967
[0]	eval-auc:0.89118
[99]	eval-auc:0.98857
[0]	eval-auc:0.87525
[99]	eval-auc:0.98065
[0]	eval-auc:0.86742
[99]	eval-auc:0.98381
Trial 27 complete
[0]	eval-auc:0.93517
[79]	eval-auc:0.99439
[0]	eval-auc:0.94213
[55]	eval-auc:0.99184
[0]	eval-auc:0.93168
[99]	eval-auc:0.99455
[0]	eval-auc:0.90384
[88]	eval-auc:0.98871
[0]	eval-auc:0.93520
[76]	eval-auc:0.98866
[0]	eval-auc:0.91576
[57]	eval-auc:0.97725
[0]	eval-auc:0.92653
[96]	eval-auc:0.99108
[0]	eval-auc:0.90781
[99]	eval-auc:0.99157
[0]	eval-auc:0.90346
[45]	eval-auc:0.97941
[0]	eval-auc:0.89061
[74]	eval-auc:0.98306
Trial 28 complete
[0]	eval-auc:0.95667
[99]	eval-auc:0.99316
[0]	eval-auc:0.94312
[77]	eval-auc:0.99200
[0]	eval-auc:0.96040
[99]	eval-auc:0.99434
[0]	eval-auc:0.92813
[99]	eval-auc:0.98818
[0]	eval-auc:0.94573
[99]	eval-auc:0.98827
[0]	eval-auc:0.92845
[99]	eval-auc:0.97937
[0]	eval-auc:0.94173
[99]	eval-auc:0.98969
[0]	eval-auc:0.93678
[99]	eval-auc:0.98950
[0]	eval-auc:0.94305
[99]	eval-auc:0.98253
[0]	eval-auc:0.90953
[99]	eval-auc:0.98493
Trial 29 complete
[0]	eval-auc:0.94945
[65]	eval-auc:0.99306
[0]	eval-auc:0.95011
[91]	eval-auc:0.99245
[0]	eval-auc:0.96842
[72]	eval-auc:0.99408
[0]	eval-auc:0.93063
[57]	eval-auc:0.98873
[0]	eval-auc:0.93871
[99]	eval-auc:0.98935
[0]	eval-auc:0.92843
[73]	eval-auc:0.97743
[0]	eval-auc:0.94209
[99]	eval-auc:0.99430
[0]	eval-auc:0.94690
[99]	eval-auc:0.99093
[0]	eval-auc:0.94423
[55]	eval-auc:0.97895
[0]	eval-auc:0.93174
[56]	eval-auc:0.98428
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 09:57:19,985 - INFO - Success: XGBoost - openml__spambase__43_25pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__spambase__43_25pct_missing', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.58959
[99]	eval-auc:0.82101
[0]	eval-auc:0.58190
[96]	eval-auc:0.80267
[0]	eval-auc:0.56441
[99]	eval-auc:0.79791
[0]	eval-auc:0.56096
[99]	eval-auc:0.78667
[0]	eval-auc:0.57636
[99]	eval-auc:0.82747
[0]	eval-auc:0.58484
[99]	eval-auc:0.78532
[0]	eval-auc:0.59341
[99]	eval-auc:0.79739
[0]	eval-auc:0.58261
[99]	eval-auc:0.80778
[0]	eval-auc:0.57997
[99]	eval-auc:0.81374
[0]	eval-auc:0.57818
[99]	eval-auc:0.77395
Trial 1 complete
[0]	eval-auc:0.57761
[99]	eval-auc:0.81259
[0]	eval-auc:0.56269
[99]	eval-auc:0.79793
[0]	eval-auc:0.55264
[99]	eval-auc:0.78873
[0]	eval-auc:0.55104
[99]	eval-auc:0.77954
[0]	eval-auc:0.57053
[99]	eval-auc:0.82829
[0]	eval-auc:0.57815
[99]	eval-auc:0.77751
[0]	eval-auc:0.58781
[99]	eval-auc:0.78448
[0]	eval-auc:0.57076
[99]	eval-auc:0.79490
[0]	eval-auc:0.57457
[99]	eval-auc:0.80676
[0]	eval-auc:0.57248
[99]	eval-auc:0.76071
Trial 2 complete
[0]	eval-auc:0.57761
[99]	eval-auc:0.81805
[0]	eval-auc:0.56269
[99]	eval-auc:0.80461
[0]	eval-auc:0.55264
[99]	eval-auc:0.80279
[0]	eval-auc:0.55104
[99]	eval-auc:0.79103
[0]	eval-auc:0.57053
[99]	eval-auc:0.83527
[0]	eval-auc:0.57815
[88]	eval-auc:0.77610
[0]	eval-auc:0.58781
[99]	eval-auc:0.79054
[0]	eval-auc:0.57076
[99]	eval-auc:0.80202
[0]	eval-auc:0.57457
[99]	eval-auc:0.81641
[0]	eval-auc:0.57248
[99]	eval-auc:0.77002
Trial 3 complete
[0]	eval-auc:0.58959
[99]	eval-auc:0.82722
[0]	eval-auc:0.58190
[99]	eval-auc:0.81216
[0]	eval-auc:0.56441
[89]	eval-auc:0.80444
[0]	eval-auc:0.56096
[99]	eval-auc:0.79621
[0]	eval-auc:0.57636
[99]	eval-auc:0.83023
[0]	eval-auc:0.58484
[99]	eval-auc:0.78418
[0]	eval-auc:0.59341
[99]	eval-auc:0.79784
[0]	eval-auc:0.58261
[99]	eval-auc:0.80778
[0]	eval-auc:0.57997
[84]	eval-auc:0.81160
[0]	eval-auc:0.57818
[99]	eval-auc:0.76953
Trial 4 complete
[0]	eval-auc:0.66068
[65]	eval-auc:0.82588
[0]	eval-auc:0.67111
[78]	eval-auc:0.80677
[0]	eval-auc:0.64495
[99]	eval-auc:0.80480
[0]	eval-auc:0.65404
[76]	eval-auc:0.79285
[0]	eval-auc:0.65260
[51]	eval-auc:0.82606
[0]	eval-auc:0.63868
[73]	eval-auc:0.78798
[0]	eval-auc:0.64065
[63]	eval-auc:0.78999
[0]	eval-auc:0.66558
[89]	eval-auc:0.81124
[0]	eval-auc:0.66012
[63]	eval-auc:0.80579
[0]	eval-auc:0.61930
[71]	eval-auc:0.78093
Trial 5 complete
[0]	eval-auc:0.55399
[89]	eval-auc:0.82952
[0]	eval-auc:0.54507
[99]	eval-auc:0.82000
[0]	eval-auc:0.53697
[71]	eval-auc:0.81280
[0]	eval-auc:0.54957
[84]	eval-auc:0.79613
[0]	eval-auc:0.55458
[58]	eval-auc:0.82937
[0]	eval-auc:0.56744
[63]	eval-auc:0.78808
[0]	eval-auc:0.57485
[78]	eval-auc:0.79910
[0]	eval-auc:0.55377
[99]	eval-auc:0.81868
[0]	eval-auc:0.55726
[61]	eval-auc:0.80832
[0]	eval-auc:0.55530
[99]	eval-auc:0.77457
Trial 6 complete
[0]	eval-auc:0.65070
[73]	eval-auc:0.80474
[0]	eval-auc:0.63314
[99]	eval-auc:0.79369
[0]	eval-auc:0.63705
[99]	eval-auc:0.79718
[0]	eval-auc:0.64702
[99]	eval-auc:0.77741
[0]	eval-auc:0.65558
[99]	eval-auc:0.82395
[0]	eval-auc:0.63800
[99]	eval-auc:0.77470
[0]	eval-auc:0.64900
[99]	eval-auc:0.79001
[0]	eval-auc:0.65518
[99]	eval-auc:0.80129
[0]	eval-auc:0.64738
[99]	eval-auc:0.80261
[0]	eval-auc:0.63102
[99]	eval-auc:0.77787
Trial 7 complete
[0]	eval-auc:0.54308
[52]	eval-auc:0.79260
[0]	eval-auc:0.52853
[99]	eval-auc:0.80647
[0]	eval-auc:0.53039
[99]	eval-auc:0.80713
[0]	eval-auc:0.53591
[99]	eval-auc:0.79148
[0]	eval-auc:0.54505
[99]	eval-auc:0.83241
[0]	eval-auc:0.55998
[99]	eval-auc:0.78398
[0]	eval-auc:0.55801
[99]	eval-auc:0.79253
[0]	eval-auc:0.54424
[99]	eval-auc:0.80533
[0]	eval-auc:0.54069
[99]	eval-auc:0.81591
[0]	eval-auc:0.54602
[99]	eval-auc:0.76159
Trial 8 complete
[0]	eval-auc:0.65117
[78]	eval-auc:0.82596
[0]	eval-auc:0.64753
[99]	eval-auc:0.81648
[0]	eval-auc:0.63703
[99]	eval-auc:0.81336
[0]	eval-auc:0.64667
[99]	eval-auc:0.79190
[0]	eval-auc:0.65783
[92]	eval-auc:0.83020
[0]	eval-auc:0.64158
[89]	eval-auc:0.78705
[0]	eval-auc:0.64611
[89]	eval-auc:0.79206
[0]	eval-auc:0.66245
[99]	eval-auc:0.80974
[0]	eval-auc:0.65034
[91]	eval-auc:0.81125
[0]	eval-auc:0.62814
[61]	eval-auc:0.78002
Trial 9 complete
[0]	eval-auc:0.54308
[99]	eval-auc:0.79056
[0]	eval-auc:0.52853
[99]	eval-auc:0.76231
[0]	eval-auc:0.53039
[99]	eval-auc:0.76484
[0]	eval-auc:0.53591
[99]	eval-auc:0.75080
[0]	eval-auc:0.54505
[99]	eval-auc:0.78604
[0]	eval-auc:0.55998
[99]	eval-auc:0.76303
[0]	eval-auc:0.55801
[99]	eval-auc:0.73583
[0]	eval-auc:0.54424
[99]	eval-auc:0.75854
[0]	eval-auc:0.54069
[99]	eval-auc:0.77295
[0]	eval-auc:0.54602
[99]	eval-auc:0.72501
Trial 10 complete
[0]	eval-auc:0.62503
[64]	eval-auc:0.81603
[0]	eval-auc:0.64119
[66]	eval-auc:0.80764
[0]	eval-auc:0.62038
[81]	eval-auc:0.80796
[0]	eval-auc:0.63274
[62]	eval-auc:0.78959
[0]	eval-auc:0.61588
[73]	eval-auc:0.82498
[0]	eval-auc:0.62188
[99]	eval-auc:0.78843
[0]	eval-auc:0.63179
[99]	eval-auc:0.79214
[0]	eval-auc:0.62138
[77]	eval-auc:0.80919
[0]	eval-auc:0.62231
[85]	eval-auc:0.80806
[0]	eval-auc:0.60690
[57]	eval-auc:0.77118
Trial 11 complete
[0]	eval-auc:0.55399
[95]	eval-auc:0.82376
[0]	eval-auc:0.54507
[99]	eval-auc:0.81160
[0]	eval-auc:0.53697
[94]	eval-auc:0.80344
[0]	eval-auc:0.54957
[66]	eval-auc:0.78610
[0]	eval-auc:0.55458
[99]	eval-auc:0.83674
[0]	eval-auc:0.56744
[99]	eval-auc:0.78724
[0]	eval-auc:0.57485
[99]	eval-auc:0.78948
[0]	eval-auc:0.55377
[99]	eval-auc:0.81376
[0]	eval-auc:0.55726
[99]	eval-auc:0.81644
[0]	eval-auc:0.55530
[99]	eval-auc:0.77043
Trial 12 complete
[0]	eval-auc:0.55399
[99]	eval-auc:0.81764
[0]	eval-auc:0.54507
[99]	eval-auc:0.80065
[0]	eval-auc:0.53697
[99]	eval-auc:0.80263
[0]	eval-auc:0.54957
[99]	eval-auc:0.78768
[0]	eval-auc:0.55458
[99]	eval-auc:0.82958
[0]	eval-auc:0.56744
[99]	eval-auc:0.78172
[0]	eval-auc:0.57485
[99]	eval-auc:0.79236
[0]	eval-auc:0.55377
[99]	eval-auc:0.80624
[0]	eval-auc:0.55726
[99]	eval-auc:0.81138
[0]	eval-auc:0.55530
[99]	eval-auc:0.76865
Trial 13 complete
[0]	eval-auc:0.62503
[62]	eval-auc:0.81632
[0]	eval-auc:0.64122
[70]	eval-auc:0.81898
[0]	eval-auc:0.62038
[70]	eval-auc:0.80089
[0]	eval-auc:0.63274
[58]	eval-auc:0.78920
[0]	eval-auc:0.61588
[37]	eval-auc:0.81934
[0]	eval-auc:0.62188
[45]	eval-auc:0.77814
[0]	eval-auc:0.63179
[83]	eval-auc:0.78744
[0]	eval-auc:0.62138
[67]	eval-auc:0.81031
[0]	eval-auc:0.62231
[43]	eval-auc:0.80382
[0]	eval-auc:0.60672
[49]	eval-auc:0.76321
Trial 14 complete
[0]	eval-auc:0.58963
[99]	eval-auc:0.80247
[0]	eval-auc:0.58190
[99]	eval-auc:0.77646
[0]	eval-auc:0.56455
[99]	eval-auc:0.78257
[0]	eval-auc:0.56096
[99]	eval-auc:0.76998
[0]	eval-auc:0.57630
[99]	eval-auc:0.80869
[0]	eval-auc:0.58484
[74]	eval-auc:0.75689
[0]	eval-auc:0.59341
[99]	eval-auc:0.75883
[0]	eval-auc:0.58261
[99]	eval-auc:0.78405
[0]	eval-auc:0.57997
[98]	eval-auc:0.78640
[0]	eval-auc:0.57855
[99]	eval-auc:0.75568
Trial 15 complete
[0]	eval-auc:0.64970
[99]	eval-auc:0.82655
[0]	eval-auc:0.64482
[96]	eval-auc:0.80850
[0]	eval-auc:0.62673
[99]	eval-auc:0.80556
[0]	eval-auc:0.64177
[99]	eval-auc:0.79417
[0]	eval-auc:0.62377
[99]	eval-auc:0.82773
[0]	eval-auc:0.63563
[99]	eval-auc:0.77920
[0]	eval-auc:0.64611
[99]	eval-auc:0.78943
[0]	eval-auc:0.64129
[94]	eval-auc:0.80862
[0]	eval-auc:0.63648
[99]	eval-auc:0.81402
[0]	eval-auc:0.62795
[99]	eval-auc:0.77982
Trial 16 complete
[0]	eval-auc:0.55399
[99]	eval-auc:0.79002
[0]	eval-auc:0.54507
[99]	eval-auc:0.77915
[0]	eval-auc:0.53697
[99]	eval-auc:0.77381
[0]	eval-auc:0.54957
[99]	eval-auc:0.75907
[0]	eval-auc:0.55458
[99]	eval-auc:0.78733
[0]	eval-auc:0.56744
[99]	eval-auc:0.76992
[0]	eval-auc:0.57485
[99]	eval-auc:0.74837
[0]	eval-auc:0.55377
[99]	eval-auc:0.76785
[0]	eval-auc:0.55726
[99]	eval-auc:0.78005
[0]	eval-auc:0.55530
[99]	eval-auc:0.73319
Trial 17 complete
[0]	eval-auc:0.55399
[99]	eval-auc:0.79078
[0]	eval-auc:0.54507
[99]	eval-auc:0.77486
[0]	eval-auc:0.53697
[99]	eval-auc:0.77389
[0]	eval-auc:0.54957
[99]	eval-auc:0.75915
[0]	eval-auc:0.55458
[99]	eval-auc:0.79135
[0]	eval-auc:0.56744
[99]	eval-auc:0.76928
[0]	eval-auc:0.57485
[99]	eval-auc:0.73902
[0]	eval-auc:0.55377
[99]	eval-auc:0.77290
[0]	eval-auc:0.55726
[99]	eval-auc:0.78347
[0]	eval-auc:0.55530
[99]	eval-auc:0.73172
Trial 18 complete
[0]	eval-auc:0.59469
[99]	eval-auc:0.81998
[0]	eval-auc:0.59905
[99]	eval-auc:0.79021
[0]	eval-auc:0.59126
[99]	eval-auc:0.79044
[0]	eval-auc:0.57286
[99]	eval-auc:0.78174
[0]	eval-auc:0.58388
[99]	eval-auc:0.82403
[0]	eval-auc:0.59516
[99]	eval-auc:0.77657
[0]	eval-auc:0.60743
[99]	eval-auc:0.77540
[0]	eval-auc:0.58977
[99]	eval-auc:0.79998
[0]	eval-auc:0.60231
[99]	eval-auc:0.80119
[0]	eval-auc:0.59589
[99]	eval-auc:0.76504
Trial 19 complete
[0]	eval-auc:0.54308
[99]	eval-auc:0.78653
[0]	eval-auc:0.52853
[99]	eval-auc:0.76971
[0]	eval-auc:0.53039
[99]	eval-auc:0.76312
[0]	eval-auc:0.53591
[99]	eval-auc:0.74904
[0]	eval-auc:0.54505
[99]	eval-auc:0.77512
[0]	eval-auc:0.55998
[99]	eval-auc:0.76216
[0]	eval-auc:0.55801
[99]	eval-auc:0.72928
[0]	eval-auc:0.54424
[99]	eval-auc:0.75988
[0]	eval-auc:0.54069
[99]	eval-auc:0.77346
[0]	eval-auc:0.54602
[99]	eval-auc:0.72924
Trial 20 complete
[0]	eval-auc:0.59461
[88]	eval-auc:0.82848
[0]	eval-auc:0.59893
[99]	eval-auc:0.82128
[0]	eval-auc:0.59122
[69]	eval-auc:0.80963
[0]	eval-auc:0.57318
[75]	eval-auc:0.79641
[0]	eval-auc:0.58397
[78]	eval-auc:0.83579
[0]	eval-auc:0.59542
[64]	eval-auc:0.79033
[0]	eval-auc:0.60739
[62]	eval-auc:0.79430
[0]	eval-auc:0.58977
[99]	eval-auc:0.81574
[0]	eval-auc:0.60245
[57]	eval-auc:0.80860
[0]	eval-auc:0.59579
[86]	eval-auc:0.78247
Trial 21 complete
[0]	eval-auc:0.54308
[99]	eval-auc:0.77647
[0]	eval-auc:0.52853
[99]	eval-auc:0.76097
[0]	eval-auc:0.53039
[99]	eval-auc:0.76019
[0]	eval-auc:0.53591
[32]	eval-auc:0.63017
[0]	eval-auc:0.54505
[99]	eval-auc:0.76170
[0]	eval-auc:0.55998
[99]	eval-auc:0.74572
[0]	eval-auc:0.55801
[36]	eval-auc:0.64377
[0]	eval-auc:0.54424
[99]	eval-auc:0.74767
[0]	eval-auc:0.54069
[98]	eval-auc:0.75073
[0]	eval-auc:0.54602
[99]	eval-auc:0.71233
Trial 22 complete
[0]	eval-auc:0.55399
[93]	eval-auc:0.82385
[0]	eval-auc:0.54507
[99]	eval-auc:0.81314
[0]	eval-auc:0.53697
[99]	eval-auc:0.80185
[0]	eval-auc:0.54957
[88]	eval-auc:0.79619
[0]	eval-auc:0.55458
[80]	eval-auc:0.83335
[0]	eval-auc:0.56744
[99]	eval-auc:0.79245
[0]	eval-auc:0.57485
[72]	eval-auc:0.79040
[0]	eval-auc:0.55377
[99]	eval-auc:0.81427
[0]	eval-auc:0.55726
[99]	eval-auc:0.81594
[0]	eval-auc:0.55530
[71]	eval-auc:0.76866
Trial 23 complete
[0]	eval-auc:0.58985
[99]	eval-auc:0.81970
[0]	eval-auc:0.58190
[99]	eval-auc:0.79936
[0]	eval-auc:0.56470
[99]	eval-auc:0.79798
[0]	eval-auc:0.56080
[84]	eval-auc:0.77330
[0]	eval-auc:0.57657
[99]	eval-auc:0.82756
[0]	eval-auc:0.58571
[99]	eval-auc:0.77224
[0]	eval-auc:0.59313
[99]	eval-auc:0.78084
[0]	eval-auc:0.58565
[99]	eval-auc:0.79949
[0]	eval-auc:0.57997
[99]	eval-auc:0.80332
[0]	eval-auc:0.57835
[99]	eval-auc:0.76933
Trial 24 complete
[0]	eval-auc:0.66027
[99]	eval-auc:0.82371
[0]	eval-auc:0.68129
[99]	eval-auc:0.80425
[0]	eval-auc:0.63983
[99]	eval-auc:0.79528
[0]	eval-auc:0.64969
[99]	eval-auc:0.78720
[0]	eval-auc:0.65947
[99]	eval-auc:0.83352
[0]	eval-auc:0.63771
[99]	eval-auc:0.77842
[0]	eval-auc:0.64069
[99]	eval-auc:0.78496
[0]	eval-auc:0.66577
[99]	eval-auc:0.80527
[0]	eval-auc:0.65581
[99]	eval-auc:0.80669
[0]	eval-auc:0.61936
[99]	eval-auc:0.78083
Trial 25 complete
[0]	eval-auc:0.65074
[99]	eval-auc:0.82149
[0]	eval-auc:0.63313
[99]	eval-auc:0.79914
[0]	eval-auc:0.63711
[99]	eval-auc:0.79833
[0]	eval-auc:0.64702
[99]	eval-auc:0.78603
[0]	eval-auc:0.65562
[99]	eval-auc:0.83149
[0]	eval-auc:0.63797
[49]	eval-auc:0.75705
[0]	eval-auc:0.64880
[99]	eval-auc:0.78806
[0]	eval-auc:0.65518
[99]	eval-auc:0.81260
[0]	eval-auc:0.64738
[99]	eval-auc:0.81586
[0]	eval-auc:0.63131
[99]	eval-auc:0.77800
Trial 26 complete
[0]	eval-auc:0.55399
[99]	eval-auc:0.82454
[0]	eval-auc:0.54507
[99]	eval-auc:0.81027
[0]	eval-auc:0.53697
[89]	eval-auc:0.80588
[0]	eval-auc:0.54957
[99]	eval-auc:0.79261
[0]	eval-auc:0.55458
[99]	eval-auc:0.83582
[0]	eval-auc:0.56744
[86]	eval-auc:0.79088
[0]	eval-auc:0.57485
[81]	eval-auc:0.79212
[0]	eval-auc:0.55377
[99]	eval-auc:0.81832
[0]	eval-auc:0.55726
[97]	eval-auc:0.81971
[0]	eval-auc:0.55530
[91]	eval-auc:0.76778
Trial 27 complete
[0]	eval-auc:0.57761
[81]	eval-auc:0.82449
[0]	eval-auc:0.56269
[99]	eval-auc:0.81506
[0]	eval-auc:0.55264
[55]	eval-auc:0.80788
[0]	eval-auc:0.55104
[99]	eval-auc:0.79778
[0]	eval-auc:0.57053
[88]	eval-auc:0.82969
[0]	eval-auc:0.57815
[93]	eval-auc:0.79128
[0]	eval-auc:0.58781
[65]	eval-auc:0.80027
[0]	eval-auc:0.57076
[99]	eval-auc:0.82370
[0]	eval-auc:0.57451
[98]	eval-auc:0.81413
[0]	eval-auc:0.57248
[88]	eval-auc:0.77773
Trial 28 complete
[0]	eval-auc:0.60948
[99]	eval-auc:0.82590
[0]	eval-auc:0.61241
[99]	eval-auc:0.80895
[0]	eval-auc:0.60501
[99]	eval-auc:0.80609
[0]	eval-auc:0.59903
[99]	eval-auc:0.79080
[0]	eval-auc:0.61292
[86]	eval-auc:0.83008
[0]	eval-auc:0.60047
[99]	eval-auc:0.78754
[0]	eval-auc:0.61621
[97]	eval-auc:0.78854
[0]	eval-auc:0.60092
[99]	eval-auc:0.81333
[0]	eval-auc:0.61825
[99]	eval-auc:0.81561
[0]	eval-auc:0.59746
[99]	eval-auc:0.78001
Trial 29 complete
[0]	eval-auc:0.64970
[52]	eval-auc:0.81918
[0]	eval-auc:0.64481
[61]	eval-auc:0.81062
[0]	eval-auc:0.62673
[99]	eval-auc:0.81282
[0]	eval-auc:0.64177
[84]	eval-auc:0.78709
[0]	eval-auc:0.62374
[56]	eval-auc:0.83053
[0]	eval-auc:0.63563
[70]	eval-auc:0.78509
[0]	eval-auc:0.64611
[77]	eval-auc:0.79142
[0]	eval-auc:0.64150
[81]	eval-auc:0.81481
[0]	eval-auc:0.63647
[60]	eval-auc:0.80889
[0]	eval-auc:0.62795
[74]	eval-auc:0.77965
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:03:05,941 - INFO - Success: XGBoost - openml__spambase__43_50pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__spambase__43_50pct_missing', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.50632
[39]	eval-auc:0.51471
[0]	eval-auc:0.50727
[20]	eval-auc:0.50437
[0]	eval-auc:0.50027
[47]	eval-auc:0.51852
[0]	eval-auc:0.50728
[22]	eval-auc:0.50266
[0]	eval-auc:0.50275
[35]	eval-auc:0.50440
[0]	eval-auc:0.49840
[34]	eval-auc:0.50194
[0]	eval-auc:0.50536
[47]	eval-auc:0.51888
[0]	eval-auc:0.50932
[28]	eval-auc:0.51102
[0]	eval-auc:0.50454
[48]	eval-auc:0.51424
[0]	eval-auc:0.51810
[28]	eval-auc:0.51627
Trial 1 complete
[0]	eval-auc:0.50454
[61]	eval-auc:0.51643
[0]	eval-auc:0.50551
[23]	eval-auc:0.50451
[0]	eval-auc:0.50202
[69]	eval-auc:0.51859
[0]	eval-auc:0.50728
[23]	eval-auc:0.50982
[0]	eval-auc:0.50179
[45]	eval-auc:0.50444
[0]	eval-auc:0.50017
[36]	eval-auc:0.50192
[0]	eval-auc:0.50536
[25]	eval-auc:0.51619
[0]	eval-auc:0.50461
[54]	eval-auc:0.51014
[0]	eval-auc:0.50098
[73]	eval-auc:0.51939
[0]	eval-auc:0.51266
[35]	eval-auc:0.51814
Trial 2 complete
[0]	eval-auc:0.50454
[45]	eval-auc:0.51379
[0]	eval-auc:0.50551
[22]	eval-auc:0.50441
[0]	eval-auc:0.50202
[55]	eval-auc:0.51689
[0]	eval-auc:0.50728
[22]	eval-auc:0.50712
[0]	eval-auc:0.50179
[38]	eval-auc:0.50440
[0]	eval-auc:0.50017
[31]	eval-auc:0.50194
[0]	eval-auc:0.50536
[52]	eval-auc:0.51894
[0]	eval-auc:0.50461
[40]	eval-auc:0.50841
[0]	eval-auc:0.50098
[55]	eval-auc:0.51679
[0]	eval-auc:0.51266
[32]	eval-auc:0.51969
Trial 3 complete
[0]	eval-auc:0.50632
[37]	eval-auc:0.51475
[0]	eval-auc:0.50727
[20]	eval-auc:0.50463
[0]	eval-auc:0.50027
[42]	eval-auc:0.51857
[0]	eval-auc:0.50728
[22]	eval-auc:0.50513
[0]	eval-auc:0.50275
[32]	eval-auc:0.50440
[0]	eval-auc:0.49840
[31]	eval-auc:0.50190
[0]	eval-auc:0.50536
[41]	eval-auc:0.51214
[0]	eval-auc:0.50932
[33]	eval-auc:0.50847
[0]	eval-auc:0.50454
[43]	eval-auc:0.51949
[0]	eval-auc:0.51810
[27]	eval-auc:0.51629
Trial 4 complete
[0]	eval-auc:0.50454
[38]	eval-auc:0.52553
[0]	eval-auc:0.50465
[21]	eval-auc:0.49790
[0]	eval-auc:0.51197
[36]	eval-auc:0.53277
[0]	eval-auc:0.50980
[19]	eval-auc:0.49579
[0]	eval-auc:0.50548
[26]	eval-auc:0.50876
[0]	eval-auc:0.48961
[40]	eval-auc:0.51246
[0]	eval-auc:0.51754
[26]	eval-auc:0.51417
[0]	eval-auc:0.50770
[35]	eval-auc:0.51198
[0]	eval-auc:0.51190
[32]	eval-auc:0.52211
[0]	eval-auc:0.51392
[27]	eval-auc:0.51639
Trial 5 complete
[0]	eval-auc:0.50275
[43]	eval-auc:0.52212
[0]	eval-auc:0.50735
[21]	eval-auc:0.51125
[0]	eval-auc:0.50476
[40]	eval-auc:0.52891
[0]	eval-auc:0.50552
[22]	eval-auc:0.50264
[0]	eval-auc:0.50275
[42]	eval-auc:0.51226
[0]	eval-auc:0.50194
[26]	eval-auc:0.50349
[0]	eval-auc:0.50454
[37]	eval-auc:0.51908
[0]	eval-auc:0.50730
[27]	eval-auc:0.50238
[0]	eval-auc:0.50276
[41]	eval-auc:0.52112
[0]	eval-auc:0.50916
[25]	eval-auc:0.51366
Trial 6 complete
[0]	eval-auc:0.50811
[66]	eval-auc:0.52141
[0]	eval-auc:0.50635
[21]	eval-auc:0.50185
[0]	eval-auc:0.50835
[60]	eval-auc:0.52358
[0]	eval-auc:0.51329
[19]	eval-auc:0.50541
[0]	eval-auc:0.50453
[35]	eval-auc:0.50444
[0]	eval-auc:0.49662
[25]	eval-auc:0.50277
[0]	eval-auc:0.52094
[39]	eval-auc:0.51291
[0]	eval-auc:0.51278
[36]	eval-auc:0.51113
[0]	eval-auc:0.50905
[37]	eval-auc:0.52135
[0]	eval-auc:0.51909
[22]	eval-auc:0.51639
Trial 7 complete
[0]	eval-auc:0.50275
[65]	eval-auc:0.52307
[0]	eval-auc:0.50190
[25]	eval-auc:0.50439
[0]	eval-auc:0.50198
[58]	eval-auc:0.51859
[0]	eval-auc:0.50829
[26]	eval-auc:0.50620
[0]	eval-auc:0.50275
[40]	eval-auc:0.50442
[0]	eval-auc:0.50194
[34]	eval-auc:0.50277
[0]	eval-auc:0.50276
[53]	eval-auc:0.51902
[0]	eval-auc:0.50552
[41]	eval-auc:0.50738
[0]	eval-auc:0.50276
[50]	eval-auc:0.51334
[0]	eval-auc:0.50916
[38]	eval-auc:0.51703
Trial 8 complete
[0]	eval-auc:0.50454
[32]	eval-auc:0.51966
[0]	eval-auc:0.50730
[23]	eval-auc:0.49455
[0]	eval-auc:0.50854
[46]	eval-auc:0.52380
[0]	eval-auc:0.50980
[19]	eval-auc:0.50340
[0]	eval-auc:0.50193
[32]	eval-auc:0.50881
[0]	eval-auc:0.49054
[75]	eval-auc:0.51183
[0]	eval-auc:0.51682
[29]	eval-auc:0.51328
[0]	eval-auc:0.51290
[20]	eval-auc:0.50918
[0]	eval-auc:0.51190
[64]	eval-auc:0.52297
[0]	eval-auc:0.51392
[33]	eval-auc:0.51797
Trial 9 complete
[0]	eval-auc:0.50275
[26]	eval-auc:0.50632
[0]	eval-auc:0.50190
[33]	eval-auc:0.50283
[0]	eval-auc:0.50198
[20]	eval-auc:0.50202
[0]	eval-auc:0.50829
[36]	eval-auc:0.51156
[0]	eval-auc:0.50275
[50]	eval-auc:0.50453
[0]	eval-auc:0.50194
[20]	eval-auc:0.49936
[0]	eval-auc:0.50276
[40]	eval-auc:0.51383
[0]	eval-auc:0.50552
[42]	eval-auc:0.51284
[0]	eval-auc:0.50276
[25]	eval-auc:0.50454
[0]	eval-auc:0.50916
[28]	eval-auc:0.51637
Trial 10 complete
[0]	eval-auc:0.50632
[43]	eval-auc:0.52153
[0]	eval-auc:0.50985
[19]	eval-auc:0.50175
[0]	eval-auc:0.50381
[31]	eval-auc:0.51519
[0]	eval-auc:0.51329
[19]	eval-auc:0.50100
[0]	eval-auc:0.50453
[24]	eval-auc:0.50440
[0]	eval-auc:0.49664
[25]	eval-auc:0.50443
[0]	eval-auc:0.51544
[28]	eval-auc:0.51904
[0]	eval-auc:0.51278
[26]	eval-auc:0.51275
[0]	eval-auc:0.50633
[31]	eval-auc:0.51673
[0]	eval-auc:0.51637
[21]	eval-auc:0.51201
Trial 11 complete
[0]	eval-auc:0.50275
[39]	eval-auc:0.51284
[0]	eval-auc:0.50735
[22]	eval-auc:0.50701
[0]	eval-auc:0.50476
[45]	eval-auc:0.51855
[0]	eval-auc:0.50552
[24]	eval-auc:0.50511
[0]	eval-auc:0.50275
[35]	eval-auc:0.50440
[0]	eval-auc:0.50194
[29]	eval-auc:0.49938
[0]	eval-auc:0.50454
[42]	eval-auc:0.51896
[0]	eval-auc:0.50730
[34]	eval-auc:0.51100
[0]	eval-auc:0.50276
[48]	eval-auc:0.51675
[0]	eval-auc:0.50916
[28]	eval-auc:0.51965
Trial 12 complete
[0]	eval-auc:0.50275
[55]	eval-auc:0.51647
[0]	eval-auc:0.50735
[24]	eval-auc:0.50445
[0]	eval-auc:0.50476
[54]	eval-auc:0.51693
[0]	eval-auc:0.50552
[25]	eval-auc:0.50620
[0]	eval-auc:0.50275
[41]	eval-auc:0.50440
[0]	eval-auc:0.50194
[40]	eval-auc:0.50111
[0]	eval-auc:0.50454
[53]	eval-auc:0.51541
[0]	eval-auc:0.50730
[42]	eval-auc:0.50835
[0]	eval-auc:0.50276
[58]	eval-auc:0.51695
[0]	eval-auc:0.50916
[33]	eval-auc:0.51973
Trial 13 complete
[0]	eval-auc:0.50632
[27]	eval-auc:0.52474
[0]	eval-auc:0.50985
[20]	eval-auc:0.50685
[0]	eval-auc:0.50381
[26]	eval-auc:0.52366
[0]	eval-auc:0.51329
[19]	eval-auc:0.50096
[0]	eval-auc:0.50453
[23]	eval-auc:0.50892
[0]	eval-auc:0.49664
[22]	eval-auc:0.50272
[0]	eval-auc:0.51544
[24]	eval-auc:0.51581
[0]	eval-auc:0.51278
[20]	eval-auc:0.51088
[0]	eval-auc:0.50633
[25]	eval-auc:0.51862
[0]	eval-auc:0.51637
[21]	eval-auc:0.51720
Trial 14 complete
[0]	eval-auc:0.50632
[38]	eval-auc:0.50632
[0]	eval-auc:0.50727
[24]	eval-auc:0.50375
[0]	eval-auc:0.50027
[99]	eval-auc:0.52817
[0]	eval-auc:0.50728
[23]	eval-auc:0.51156
[0]	eval-auc:0.50275
[31]	eval-auc:0.50453
[0]	eval-auc:0.49840
[21]	eval-auc:0.49489
[0]	eval-auc:0.51001
[31]	eval-auc:0.51623
[0]	eval-auc:0.50932
[47]	eval-auc:0.50829
[0]	eval-auc:0.50454
[99]	eval-auc:0.52104
[0]	eval-auc:0.51810
[42]	eval-auc:0.51559
Trial 15 complete
[0]	eval-auc:0.50632
[29]	eval-auc:0.51479
[0]	eval-auc:0.50631
[26]	eval-auc:0.50104
[0]	eval-auc:0.50658
[38]	eval-auc:0.51695
[0]	eval-auc:0.51331
[19]	eval-auc:0.50268
[0]	eval-auc:0.50453
[32]	eval-auc:0.50890
[0]	eval-auc:0.49483
[23]	eval-auc:0.50271
[0]	eval-auc:0.52094
[36]	eval-auc:0.51551
[0]	eval-auc:0.51278
[29]	eval-auc:0.51022
[0]	eval-auc:0.50905
[42]	eval-auc:0.51937
[0]	eval-auc:0.51637
[23]	eval-auc:0.51197
Trial 16 complete
[0]	eval-auc:0.50275
[23]	eval-auc:0.50632
[0]	eval-auc:0.50735
[26]	eval-auc:0.50287
[0]	eval-auc:0.50476
[19]	eval-auc:0.50377
[0]	eval-auc:0.50552
[32]	eval-auc:0.51156
[0]	eval-auc:0.50275
[44]	eval-auc:0.50453
[0]	eval-auc:0.50194
[19]	eval-auc:0.49936
[0]	eval-auc:0.50454
[35]	eval-auc:0.51215
[0]	eval-auc:0.50730
[54]	eval-auc:0.51267
[0]	eval-auc:0.50276
[22]	eval-auc:0.50633
[0]	eval-auc:0.50916
[25]	eval-auc:0.51637
Trial 17 complete
[0]	eval-auc:0.50275
[23]	eval-auc:0.50632
[0]	eval-auc:0.50735
[26]	eval-auc:0.50283
[0]	eval-auc:0.50476
[19]	eval-auc:0.50377
[0]	eval-auc:0.50552
[30]	eval-auc:0.51156
[0]	eval-auc:0.50275
[44]	eval-auc:0.50453
[0]	eval-auc:0.50194
[19]	eval-auc:0.49936
[0]	eval-auc:0.50454
[35]	eval-auc:0.51552
[0]	eval-auc:0.50730
[55]	eval-auc:0.51267
[0]	eval-auc:0.50276
[22]	eval-auc:0.50633
[0]	eval-auc:0.50916
[24]	eval-auc:0.51637
Trial 18 complete
[0]	eval-auc:0.50632
[57]	eval-auc:0.52298
[0]	eval-auc:0.50727
[20]	eval-auc:0.50455
[0]	eval-auc:0.50204
[31]	eval-auc:0.51505
[0]	eval-auc:0.51078
[20]	eval-auc:0.50982
[0]	eval-auc:0.50453
[42]	eval-auc:0.50271
[0]	eval-auc:0.50112
[34]	eval-auc:0.50277
[0]	eval-auc:0.51544
[21]	eval-auc:0.51790
[0]	eval-auc:0.51105
[34]	eval-auc:0.50937
[0]	eval-auc:0.50454
[53]	eval-auc:0.51525
[0]	eval-auc:0.51625
[32]	eval-auc:0.51639
Trial 19 complete
[0]	eval-auc:0.50275
[25]	eval-auc:0.50632
[0]	eval-auc:0.50190
[33]	eval-auc:0.50283
[0]	eval-auc:0.50198
[21]	eval-auc:0.50202
[0]	eval-auc:0.50829
[35]	eval-auc:0.51156
[0]	eval-auc:0.50275
[49]	eval-auc:0.50453
[0]	eval-auc:0.50194
[19]	eval-auc:0.49936
[0]	eval-auc:0.50276
[41]	eval-auc:0.51215
[0]	eval-auc:0.50552
[42]	eval-auc:0.51284
[0]	eval-auc:0.50276
[25]	eval-auc:0.50454
[0]	eval-auc:0.50916
[28]	eval-auc:0.51637
Trial 20 complete
[0]	eval-auc:0.50632
[41]	eval-auc:0.52307
[0]	eval-auc:0.50731
[21]	eval-auc:0.50594
[0]	eval-auc:0.50204
[40]	eval-auc:0.52968
[0]	eval-auc:0.51078
[22]	eval-auc:0.49665
[0]	eval-auc:0.50453
[44]	eval-auc:0.51289
[0]	eval-auc:0.50112
[43]	eval-auc:0.51110
[0]	eval-auc:0.51544
[27]	eval-auc:0.51564
[0]	eval-auc:0.51117
[24]	eval-auc:0.51188
[0]	eval-auc:0.50454
[35]	eval-auc:0.52108
[0]	eval-auc:0.51625
[28]	eval-auc:0.50867
Trial 21 complete
[0]	eval-auc:0.50275
[27]	eval-auc:0.50632
[0]	eval-auc:0.50190
[36]	eval-auc:0.50816
[0]	eval-auc:0.50198
[21]	eval-auc:0.50202
[0]	eval-auc:0.50829
[39]	eval-auc:0.51331
[0]	eval-auc:0.50275
[56]	eval-auc:0.50453
[0]	eval-auc:0.50194
[19]	eval-auc:0.49936
[0]	eval-auc:0.50276
[47]	eval-auc:0.51383
[0]	eval-auc:0.50552
[48]	eval-auc:0.51284
[0]	eval-auc:0.50276
[25]	eval-auc:0.50454
[0]	eval-auc:0.50916
[29]	eval-auc:0.51637
Trial 22 complete
[0]	eval-auc:0.50275
[34]	eval-auc:0.51284
[0]	eval-auc:0.50735
[21]	eval-auc:0.50353
[0]	eval-auc:0.50476
[39]	eval-auc:0.52026
[0]	eval-auc:0.50552
[21]	eval-auc:0.50262
[0]	eval-auc:0.50275
[30]	eval-auc:0.50442
[0]	eval-auc:0.50194
[43]	eval-auc:0.50423
[0]	eval-auc:0.50454
[37]	eval-auc:0.51818
[0]	eval-auc:0.50730
[32]	eval-auc:0.50744
[0]	eval-auc:0.50276
[37]	eval-auc:0.51523
[0]	eval-auc:0.50916
[28]	eval-auc:0.51967
Trial 23 complete
[0]	eval-auc:0.50454
[21]	eval-auc:0.50632
[0]	eval-auc:0.50555
[21]	eval-auc:0.50445
[0]	eval-auc:0.50027
[50]	eval-auc:0.51699
[0]	eval-auc:0.50728
[23]	eval-auc:0.50808
[0]	eval-auc:0.50275
[44]	eval-auc:0.50802
[0]	eval-auc:0.50292
[20]	eval-auc:0.50277
[0]	eval-auc:0.51470
[26]	eval-auc:0.51561
[0]	eval-auc:0.50944
[35]	eval-auc:0.50831
[0]	eval-auc:0.50454
[43]	eval-auc:0.51724
[0]	eval-auc:0.51810
[26]	eval-auc:0.51735
Trial 24 complete
[0]	eval-auc:0.50454
[33]	eval-auc:0.51907
[0]	eval-auc:0.50465
[27]	eval-auc:0.50031
[0]	eval-auc:0.50680
[82]	eval-auc:0.52787
[0]	eval-auc:0.50455
[21]	eval-auc:0.50092
[0]	eval-auc:0.50193
[49]	eval-auc:0.50630
[0]	eval-auc:0.49583
[92]	eval-auc:0.51099
[0]	eval-auc:0.52225
[28]	eval-auc:0.52074
[0]	eval-auc:0.50678
[33]	eval-auc:0.50833
[0]	eval-auc:0.50830
[81]	eval-auc:0.52775
[0]	eval-auc:0.51392
[49]	eval-auc:0.51643
Trial 25 complete
[0]	eval-auc:0.50811
[51]	eval-auc:0.52136
[0]	eval-auc:0.50635
[21]	eval-auc:0.50361
[0]	eval-auc:0.50835
[47]	eval-auc:0.51695
[0]	eval-auc:0.51329
[19]	eval-auc:0.50519
[0]	eval-auc:0.50453
[34]	eval-auc:0.50888
[0]	eval-auc:0.49662
[24]	eval-auc:0.50283
[0]	eval-auc:0.52094
[33]	eval-auc:0.51551
[0]	eval-auc:0.51278
[38]	eval-auc:0.51274
[0]	eval-auc:0.50905
[42]	eval-auc:0.51677
[0]	eval-auc:0.51909
[22]	eval-auc:0.51459
Trial 26 complete
[0]	eval-auc:0.50275
[35]	eval-auc:0.51475
[0]	eval-auc:0.50735
[22]	eval-auc:0.50361
[0]	eval-auc:0.50476
[43]	eval-auc:0.51859
[0]	eval-auc:0.50552
[24]	eval-auc:0.50515
[0]	eval-auc:0.50275
[31]	eval-auc:0.50888
[0]	eval-auc:0.50194
[28]	eval-auc:0.50433
[0]	eval-auc:0.50454
[24]	eval-auc:0.51473
[0]	eval-auc:0.50730
[34]	eval-auc:0.50837
[0]	eval-auc:0.50276
[46]	eval-auc:0.51602
[0]	eval-auc:0.50916
[29]	eval-auc:0.51708
Trial 27 complete
[0]	eval-auc:0.50454
[37]	eval-auc:0.52477
[0]	eval-auc:0.50551
[20]	eval-auc:0.50677
[0]	eval-auc:0.50202
[36]	eval-auc:0.52368
[0]	eval-auc:0.50728
[22]	eval-auc:0.50264
[0]	eval-auc:0.50179
[27]	eval-auc:0.50890
[0]	eval-auc:0.50017
[38]	eval-auc:0.50437
[0]	eval-auc:0.50536
[33]	eval-auc:0.51562
[0]	eval-auc:0.50461
[28]	eval-auc:0.51009
[0]	eval-auc:0.50098
[33]	eval-auc:0.52103
[0]	eval-auc:0.51266
[25]	eval-auc:0.51542
Trial 28 complete
[0]	eval-auc:0.50632
[50]	eval-auc:0.52474
[0]	eval-auc:0.50903
[19]	eval-auc:0.50373
[0]	eval-auc:0.50381
[42]	eval-auc:0.51859
[0]	eval-auc:0.51329
[20]	eval-auc:0.50517
[0]	eval-auc:0.50453
[32]	eval-auc:0.50440
[0]	eval-auc:0.49936
[25]	eval-auc:0.50194
[0]	eval-auc:0.51001
[32]	eval-auc:0.51551
[0]	eval-auc:0.51105
[33]	eval-auc:0.51016
[0]	eval-auc:0.50633
[42]	eval-auc:0.51937
[0]	eval-auc:0.51637
[26]	eval-auc:0.51971
Trial 29 complete
[0]	eval-auc:0.50632
[25]	eval-auc:0.51468
[0]	eval-auc:0.50631
[24]	eval-auc:0.50619
[0]	eval-auc:0.50658
[38]	eval-auc:0.52030
[0]	eval-auc:0.51331
[19]	eval-auc:0.50509
[0]	eval-auc:0.50453
[23]	eval-auc:0.50443
[0]	eval-auc:0.49487
[22]	eval-auc:0.50439
[0]	eval-auc:0.52094
[25]	eval-auc:0.51558
[0]	eval-auc:0.51278
[25]	eval-auc:0.51014
[0]	eval-auc:0.50905
[28]	eval-auc:0.51669
[0]	eval-auc:0.51637
[25]	eval-auc:0.51806
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:08:11,189 - INFO - Success: XGBoost - openml__spambase__43_75pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__spambase__43_75pct_missing', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 1 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 2 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 3 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 4 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 5 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 6 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 7 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 8 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 9 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 10 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 11 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 12 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 13 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 14 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 15 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 16 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 17 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 18 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 19 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 20 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 21 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 22 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 23 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 24 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 25 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 26 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 27 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 28 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 29 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:12:54,589 - INFO - Success: XGBoost - openml__Amazon_employee_access__34539_100pct
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__Amazon_employee_access__34539_100pct', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.67720
[99]	eval-auc:0.79883
[0]	eval-auc:0.67138
[99]	eval-auc:0.80442
[0]	eval-auc:0.64361
[99]	eval-auc:0.79300
[0]	eval-auc:0.66158
[99]	eval-auc:0.79637
[0]	eval-auc:0.64543
[99]	eval-auc:0.78625
[0]	eval-auc:0.64944
[99]	eval-auc:0.79833
[0]	eval-auc:0.63516
[99]	eval-auc:0.76497
[0]	eval-auc:0.66150
[99]	eval-auc:0.81090
[0]	eval-auc:0.69621
[99]	eval-auc:0.81566
[0]	eval-auc:0.66951
[99]	eval-auc:0.80180
Trial 1 complete
[0]	eval-auc:0.65400
[99]	eval-auc:0.75262
[0]	eval-auc:0.64070
[99]	eval-auc:0.75924
[0]	eval-auc:0.62355
[99]	eval-auc:0.74530
[0]	eval-auc:0.64170
[99]	eval-auc:0.76055
[0]	eval-auc:0.60254
[99]	eval-auc:0.73591
[0]	eval-auc:0.63903
[99]	eval-auc:0.75625
[0]	eval-auc:0.62273
[99]	eval-auc:0.72888
[0]	eval-auc:0.64446
[99]	eval-auc:0.75487
[0]	eval-auc:0.66521
[99]	eval-auc:0.76727
[0]	eval-auc:0.65367
[99]	eval-auc:0.75451
Trial 2 complete
[0]	eval-auc:0.65400
[99]	eval-auc:0.76374
[0]	eval-auc:0.64070
[99]	eval-auc:0.77728
[0]	eval-auc:0.62355
[99]	eval-auc:0.76086
[0]	eval-auc:0.64170
[99]	eval-auc:0.78150
[0]	eval-auc:0.60283
[99]	eval-auc:0.76019
[0]	eval-auc:0.63903
[99]	eval-auc:0.75898
[0]	eval-auc:0.62273
[99]	eval-auc:0.73784
[0]	eval-auc:0.64446
[99]	eval-auc:0.78351
[0]	eval-auc:0.66521
[99]	eval-auc:0.78263
[0]	eval-auc:0.65367
[99]	eval-auc:0.76848
Trial 3 complete
[0]	eval-auc:0.67720
[99]	eval-auc:0.80829
[0]	eval-auc:0.67138
[99]	eval-auc:0.80956
[0]	eval-auc:0.64361
[99]	eval-auc:0.79825
[0]	eval-auc:0.66158
[99]	eval-auc:0.79889
[0]	eval-auc:0.64543
[99]	eval-auc:0.78304
[0]	eval-auc:0.64944
[99]	eval-auc:0.81088
[0]	eval-auc:0.63516
[99]	eval-auc:0.77928
[0]	eval-auc:0.66150
[99]	eval-auc:0.81578
[0]	eval-auc:0.69621
[99]	eval-auc:0.82205
[0]	eval-auc:0.66951
[99]	eval-auc:0.80900
Trial 4 complete
[0]	eval-auc:0.73395
[87]	eval-auc:0.83518
[0]	eval-auc:0.72249
[97]	eval-auc:0.85550
[0]	eval-auc:0.69645
[78]	eval-auc:0.84416
[0]	eval-auc:0.74082
[46]	eval-auc:0.83296
[0]	eval-auc:0.68965
[99]	eval-auc:0.86298
[0]	eval-auc:0.71954
[62]	eval-auc:0.84951
[0]	eval-auc:0.69797
[99]	eval-auc:0.82765
[0]	eval-auc:0.69795
[76]	eval-auc:0.86619
[0]	eval-auc:0.69192
[99]	eval-auc:0.86896
[0]	eval-auc:0.74529
[84]	eval-auc:0.85867
Trial 5 complete
[0]	eval-auc:0.63977
[99]	eval-auc:0.78717
[0]	eval-auc:0.62424
[99]	eval-auc:0.78791
[0]	eval-auc:0.60634
[99]	eval-auc:0.77945
[0]	eval-auc:0.63612
[99]	eval-auc:0.79405
[0]	eval-auc:0.57302
[99]	eval-auc:0.75648
[0]	eval-auc:0.61691
[99]	eval-auc:0.79534
[0]	eval-auc:0.61306
[99]	eval-auc:0.77047
[0]	eval-auc:0.61273
[99]	eval-auc:0.81360
[0]	eval-auc:0.63763
[99]	eval-auc:0.81619
[0]	eval-auc:0.63803
[99]	eval-auc:0.78739
Trial 6 complete
[0]	eval-auc:0.74617
[99]	eval-auc:0.83075
[0]	eval-auc:0.76130
[33]	eval-auc:0.81307
[0]	eval-auc:0.70259
[99]	eval-auc:0.82034
[0]	eval-auc:0.77476
[56]	eval-auc:0.82646
[0]	eval-auc:0.76395
[99]	eval-auc:0.83123
[0]	eval-auc:0.77366
[99]	eval-auc:0.85341
[0]	eval-auc:0.72333
[66]	eval-auc:0.78546
[0]	eval-auc:0.72265
[99]	eval-auc:0.85202
[0]	eval-auc:0.76160
[99]	eval-auc:0.84370
[0]	eval-auc:0.73364
[99]	eval-auc:0.84910
Trial 7 complete
[0]	eval-auc:0.59032
[99]	eval-auc:0.70501
[0]	eval-auc:0.58764
[99]	eval-auc:0.72974
[0]	eval-auc:0.57245
[99]	eval-auc:0.71184
[0]	eval-auc:0.59228
[99]	eval-auc:0.73923
[0]	eval-auc:0.55193
[99]	eval-auc:0.70125
[0]	eval-auc:0.57943
[99]	eval-auc:0.72471
[0]	eval-auc:0.59021
[99]	eval-auc:0.70515
[0]	eval-auc:0.59938
[99]	eval-auc:0.73020
[0]	eval-auc:0.62666
[99]	eval-auc:0.73598
[0]	eval-auc:0.60883
[99]	eval-auc:0.71645
Trial 8 complete
[0]	eval-auc:0.71648
[99]	eval-auc:0.84350
[0]	eval-auc:0.69556
[99]	eval-auc:0.85384
[0]	eval-auc:0.66955
[90]	eval-auc:0.83803
[0]	eval-auc:0.73661
[40]	eval-auc:0.83239
[0]	eval-auc:0.69976
[99]	eval-auc:0.85058
[0]	eval-auc:0.70797
[52]	eval-auc:0.85551
[0]	eval-auc:0.68813
[99]	eval-auc:0.82830
[0]	eval-auc:0.70576
[99]	eval-auc:0.86505
[0]	eval-auc:0.67935
[99]	eval-auc:0.85689
[0]	eval-auc:0.73992
[99]	eval-auc:0.87262
Trial 9 complete
[0]	eval-auc:0.59032
[99]	eval-auc:0.64221
[0]	eval-auc:0.58764
[99]	eval-auc:0.66922
[0]	eval-auc:0.57245
[23]	eval-auc:0.57396
[0]	eval-auc:0.59228
[99]	eval-auc:0.66743
[0]	eval-auc:0.55193
[99]	eval-auc:0.62625
[0]	eval-auc:0.57943
[99]	eval-auc:0.64954
[0]	eval-auc:0.59021
[99]	eval-auc:0.63999
[0]	eval-auc:0.59938
[99]	eval-auc:0.65550
[0]	eval-auc:0.62666
[99]	eval-auc:0.68011
[0]	eval-auc:0.60883
[99]	eval-auc:0.65517
Trial 10 complete
[0]	eval-auc:0.70964
[99]	eval-auc:0.83644
[0]	eval-auc:0.73492
[99]	eval-auc:0.84298
[0]	eval-auc:0.68942
[99]	eval-auc:0.85015
[0]	eval-auc:0.73939
[99]	eval-auc:0.84216
[0]	eval-auc:0.69373
[99]	eval-auc:0.84618
[0]	eval-auc:0.74353
[99]	eval-auc:0.86456
[0]	eval-auc:0.70066
[99]	eval-auc:0.82128
[0]	eval-auc:0.69024
[94]	eval-auc:0.86630
[0]	eval-auc:0.74086
[99]	eval-auc:0.85961
[0]	eval-auc:0.73866
[54]	eval-auc:0.84559
Trial 11 complete
[0]	eval-auc:0.63977
[99]	eval-auc:0.76595
[0]	eval-auc:0.62424
[99]	eval-auc:0.76944
[0]	eval-auc:0.60634
[99]	eval-auc:0.76578
[0]	eval-auc:0.63612
[99]	eval-auc:0.77344
[0]	eval-auc:0.57302
[99]	eval-auc:0.75010
[0]	eval-auc:0.61691
[99]	eval-auc:0.77069
[0]	eval-auc:0.61306
[99]	eval-auc:0.74258
[0]	eval-auc:0.61238
[99]	eval-auc:0.78296
[0]	eval-auc:0.63763
[99]	eval-auc:0.78606
[0]	eval-auc:0.63803
[99]	eval-auc:0.76743
Trial 12 complete
[0]	eval-auc:0.63977
[99]	eval-auc:0.74427
[0]	eval-auc:0.62424
[99]	eval-auc:0.75182
[0]	eval-auc:0.60634
[99]	eval-auc:0.72492
[0]	eval-auc:0.63612
[99]	eval-auc:0.75157
[0]	eval-auc:0.57302
[99]	eval-auc:0.72172
[0]	eval-auc:0.61691
[99]	eval-auc:0.74091
[0]	eval-auc:0.61306
[99]	eval-auc:0.72606
[0]	eval-auc:0.61238
[99]	eval-auc:0.76412
[0]	eval-auc:0.63763
[99]	eval-auc:0.76280
[0]	eval-auc:0.63803
[99]	eval-auc:0.74578
Trial 13 complete
[0]	eval-auc:0.71188
[79]	eval-auc:0.83563
[0]	eval-auc:0.73254
[56]	eval-auc:0.83296
[0]	eval-auc:0.69164
[99]	eval-auc:0.84683
[0]	eval-auc:0.73950
[33]	eval-auc:0.82817
[0]	eval-auc:0.70060
[73]	eval-auc:0.84494
[0]	eval-auc:0.73903
[70]	eval-auc:0.84766
[0]	eval-auc:0.70189
[73]	eval-auc:0.81829
[0]	eval-auc:0.68504
[71]	eval-auc:0.85963
[0]	eval-auc:0.74069
[99]	eval-auc:0.86672
[0]	eval-auc:0.73833
[95]	eval-auc:0.84385
Trial 14 complete
[0]	eval-auc:0.67783
[99]	eval-auc:0.75818
[0]	eval-auc:0.67372
[99]	eval-auc:0.76005
[0]	eval-auc:0.64318
[99]	eval-auc:0.72579
[0]	eval-auc:0.66158
[99]	eval-auc:0.75082
[0]	eval-auc:0.63685
[99]	eval-auc:0.72688
[0]	eval-auc:0.64935
[99]	eval-auc:0.74911
[0]	eval-auc:0.63514
[32]	eval-auc:0.65919
[0]	eval-auc:0.66109
[99]	eval-auc:0.75135
[0]	eval-auc:0.67346
[99]	eval-auc:0.76196
[0]	eval-auc:0.66313
[99]	eval-auc:0.75463
Trial 15 complete
[0]	eval-auc:0.73716
[99]	eval-auc:0.83581
[0]	eval-auc:0.73660
[99]	eval-auc:0.84397
[0]	eval-auc:0.68608
[99]	eval-auc:0.83507
[0]	eval-auc:0.77287
[70]	eval-auc:0.82025
[0]	eval-auc:0.72664
[99]	eval-auc:0.83432
[0]	eval-auc:0.76111
[78]	eval-auc:0.84704
[0]	eval-auc:0.71910
[99]	eval-auc:0.81660
[0]	eval-auc:0.72629
[99]	eval-auc:0.86391
[0]	eval-auc:0.74709
[99]	eval-auc:0.85231
[0]	eval-auc:0.73845
[99]	eval-auc:0.85091
Trial 16 complete
[0]	eval-auc:0.63977
[99]	eval-auc:0.69595
[0]	eval-auc:0.62424
[99]	eval-auc:0.69248
[0]	eval-auc:0.60634
[99]	eval-auc:0.66045
[0]	eval-auc:0.63612
[99]	eval-auc:0.69759
[0]	eval-auc:0.57302
[60]	eval-auc:0.61513
[0]	eval-auc:0.61691
[54]	eval-auc:0.64479
[0]	eval-auc:0.61306
[99]	eval-auc:0.66707
[0]	eval-auc:0.61238
[99]	eval-auc:0.68874
[0]	eval-auc:0.63763
[99]	eval-auc:0.70372
[0]	eval-auc:0.63803
[99]	eval-auc:0.70199
Trial 17 complete
[0]	eval-auc:0.63977
[99]	eval-auc:0.69359
[0]	eval-auc:0.62424
[99]	eval-auc:0.69357
[0]	eval-auc:0.60634
[99]	eval-auc:0.66302
[0]	eval-auc:0.63612
[99]	eval-auc:0.70372
[0]	eval-auc:0.57302
[99]	eval-auc:0.67174
[0]	eval-auc:0.61691
[52]	eval-auc:0.64514
[0]	eval-auc:0.61306
[99]	eval-auc:0.66936
[0]	eval-auc:0.61238
[99]	eval-auc:0.69132
[0]	eval-auc:0.63763
[99]	eval-auc:0.70338
[0]	eval-auc:0.63803
[99]	eval-auc:0.70209
Trial 18 complete
[0]	eval-auc:0.68916
[99]	eval-auc:0.79479
[0]	eval-auc:0.68122
[99]	eval-auc:0.80097
[0]	eval-auc:0.66974
[99]	eval-auc:0.78601
[0]	eval-auc:0.68239
[99]	eval-auc:0.79278
[0]	eval-auc:0.66849
[99]	eval-auc:0.78453
[0]	eval-auc:0.66011
[99]	eval-auc:0.78928
[0]	eval-auc:0.63392
[99]	eval-auc:0.75928
[0]	eval-auc:0.68256
[99]	eval-auc:0.81186
[0]	eval-auc:0.67076
[99]	eval-auc:0.81291
[0]	eval-auc:0.69345
[99]	eval-auc:0.80958
Trial 19 complete
[0]	eval-auc:0.59032
[99]	eval-auc:0.63810
[0]	eval-auc:0.58764
[99]	eval-auc:0.67041
[0]	eval-auc:0.57245
[22]	eval-auc:0.57396
[0]	eval-auc:0.59228
[99]	eval-auc:0.66947
[0]	eval-auc:0.55193
[99]	eval-auc:0.62834
[0]	eval-auc:0.57943
[99]	eval-auc:0.65018
[0]	eval-auc:0.59021
[99]	eval-auc:0.64171
[0]	eval-auc:0.59938
[99]	eval-auc:0.65521
[0]	eval-auc:0.62666
[99]	eval-auc:0.67949
[0]	eval-auc:0.60883
[99]	eval-auc:0.65524
Trial 20 complete
[0]	eval-auc:0.68668
[99]	eval-auc:0.84010
[0]	eval-auc:0.67949
[99]	eval-auc:0.83741
[0]	eval-auc:0.64607
[99]	eval-auc:0.83908
[0]	eval-auc:0.67608
[99]	eval-auc:0.82566
[0]	eval-auc:0.66296
[99]	eval-auc:0.82900
[0]	eval-auc:0.65769
[99]	eval-auc:0.83918
[0]	eval-auc:0.63527
[99]	eval-auc:0.82152
[0]	eval-auc:0.67886
[85]	eval-auc:0.85302
[0]	eval-auc:0.66707
[99]	eval-auc:0.85942
[0]	eval-auc:0.69110
[99]	eval-auc:0.84663
Trial 21 complete
[0]	eval-auc:0.59032
[99]	eval-auc:0.63186
[0]	eval-auc:0.58764
[99]	eval-auc:0.64917
[0]	eval-auc:0.57245
[23]	eval-auc:0.57396
[0]	eval-auc:0.59228
[99]	eval-auc:0.64922
[0]	eval-auc:0.55426
[99]	eval-auc:0.60156
[0]	eval-auc:0.57943
[99]	eval-auc:0.63466
[0]	eval-auc:0.59021
[99]	eval-auc:0.62643
[0]	eval-auc:0.59938
[99]	eval-auc:0.64367
[0]	eval-auc:0.62666
[99]	eval-auc:0.67588
[0]	eval-auc:0.60883
[99]	eval-auc:0.64897
Trial 22 complete
[0]	eval-auc:0.63977
[99]	eval-auc:0.78761
[0]	eval-auc:0.62424
[99]	eval-auc:0.77232
[0]	eval-auc:0.60634
[99]	eval-auc:0.76866
[0]	eval-auc:0.63612
[99]	eval-auc:0.78004
[0]	eval-auc:0.57302
[99]	eval-auc:0.76840
[0]	eval-auc:0.61691
[99]	eval-auc:0.78432
[0]	eval-auc:0.61306
[99]	eval-auc:0.75997
[0]	eval-auc:0.61238
[99]	eval-auc:0.80127
[0]	eval-auc:0.63763
[99]	eval-auc:0.80614
[0]	eval-auc:0.63803
[99]	eval-auc:0.79202
Trial 23 complete
[0]	eval-auc:0.66336
[99]	eval-auc:0.78513
[0]	eval-auc:0.67341
[99]	eval-auc:0.78684
[0]	eval-auc:0.63996
[99]	eval-auc:0.76843
[0]	eval-auc:0.65432
[99]	eval-auc:0.78488
[0]	eval-auc:0.62283
[99]	eval-auc:0.76909
[0]	eval-auc:0.64847
[99]	eval-auc:0.77725
[0]	eval-auc:0.64090
[99]	eval-auc:0.74385
[0]	eval-auc:0.65222
[99]	eval-auc:0.79195
[0]	eval-auc:0.65825
[99]	eval-auc:0.79498
[0]	eval-auc:0.67556
[99]	eval-auc:0.79328
Trial 24 complete
[0]	eval-auc:0.67979
[99]	eval-auc:0.84100
[0]	eval-auc:0.63704
[99]	eval-auc:0.85161
[0]	eval-auc:0.65540
[99]	eval-auc:0.83760
[0]	eval-auc:0.67771
[96]	eval-auc:0.83393
[0]	eval-auc:0.64383
[99]	eval-auc:0.83965
[0]	eval-auc:0.66909
[99]	eval-auc:0.85215
[0]	eval-auc:0.66881
[99]	eval-auc:0.82199
[0]	eval-auc:0.67489
[99]	eval-auc:0.85669
[0]	eval-auc:0.67392
[99]	eval-auc:0.84119
[0]	eval-auc:0.70039
[99]	eval-auc:0.85465
Trial 25 complete
[0]	eval-auc:0.74858
[99]	eval-auc:0.83686
[0]	eval-auc:0.76483
[99]	eval-auc:0.84006
[0]	eval-auc:0.70285
[99]	eval-auc:0.83575
[0]	eval-auc:0.77862
[98]	eval-auc:0.83610
[0]	eval-auc:0.76546
[99]	eval-auc:0.83876
[0]	eval-auc:0.78677
[91]	eval-auc:0.85017
[0]	eval-auc:0.72787
[99]	eval-auc:0.79670
[0]	eval-auc:0.72816
[99]	eval-auc:0.85836
[0]	eval-auc:0.76198
[71]	eval-auc:0.84274
[0]	eval-auc:0.73885
[99]	eval-auc:0.85569
Trial 26 complete
[0]	eval-auc:0.63977
[99]	eval-auc:0.76709
[0]	eval-auc:0.62424
[99]	eval-auc:0.77850
[0]	eval-auc:0.60634
[99]	eval-auc:0.76395
[0]	eval-auc:0.63612
[99]	eval-auc:0.77993
[0]	eval-auc:0.57302
[99]	eval-auc:0.74370
[0]	eval-auc:0.61691
[99]	eval-auc:0.77197
[0]	eval-auc:0.61306
[99]	eval-auc:0.75459
[0]	eval-auc:0.61238
[99]	eval-auc:0.78397
[0]	eval-auc:0.63763
[99]	eval-auc:0.79656
[0]	eval-auc:0.63803
[99]	eval-auc:0.77243
Trial 27 complete
[0]	eval-auc:0.65400
[99]	eval-auc:0.81424
[0]	eval-auc:0.64070
[99]	eval-auc:0.81490
[0]	eval-auc:0.62355
[99]	eval-auc:0.80110
[0]	eval-auc:0.64170
[99]	eval-auc:0.80648
[0]	eval-auc:0.60246
[99]	eval-auc:0.79240
[0]	eval-auc:0.63903
[99]	eval-auc:0.81586
[0]	eval-auc:0.62273
[99]	eval-auc:0.78470
[0]	eval-auc:0.64353
[99]	eval-auc:0.83094
[0]	eval-auc:0.66521
[99]	eval-auc:0.83156
[0]	eval-auc:0.65367
[99]	eval-auc:0.80775
Trial 28 complete
[0]	eval-auc:0.70934
[99]	eval-auc:0.82730
[0]	eval-auc:0.70339
[99]	eval-auc:0.82465
[0]	eval-auc:0.68269
[99]	eval-auc:0.82553
[0]	eval-auc:0.71486
[99]	eval-auc:0.81532
[0]	eval-auc:0.67490
[99]	eval-auc:0.81964
[0]	eval-auc:0.70428
[99]	eval-auc:0.83198
[0]	eval-auc:0.65203
[99]	eval-auc:0.80432
[0]	eval-auc:0.69514
[99]	eval-auc:0.84561
[0]	eval-auc:0.73557
[99]	eval-auc:0.84780
[0]	eval-auc:0.71060
[87]	eval-auc:0.83403
Trial 29 complete
[0]	eval-auc:0.73707
[89]	eval-auc:0.84508
[0]	eval-auc:0.73684
[79]	eval-auc:0.84143
[0]	eval-auc:0.68600
[87]	eval-auc:0.83854
[0]	eval-auc:0.77282
[59]	eval-auc:0.83335
[0]	eval-auc:0.72662
[75]	eval-auc:0.83797
[0]	eval-auc:0.76105
[46]	eval-auc:0.84508
[0]	eval-auc:0.71929
[91]	eval-auc:0.82697
[0]	eval-auc:0.72695
[81]	eval-auc:0.85923
[0]	eval-auc:0.74733
[74]	eval-auc:0.85796
[0]	eval-auc:0.73868
[82]	eval-auc:0.84880
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:15:34,158 - INFO - Success: XGBoost - openml__Amazon_employee_access__34539_25pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__Amazon_employee_access__34539_25pct_missing', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.50712
[99]	eval-auc:0.54303
[0]	eval-auc:0.50088
[67]	eval-auc:0.52588
[0]	eval-auc:0.51606
[72]	eval-auc:0.58840
[0]	eval-auc:0.50554
[24]	eval-auc:0.50497
[0]	eval-auc:0.49756
[83]	eval-auc:0.53929
[0]	eval-auc:0.51226
[91]	eval-auc:0.55790
[0]	eval-auc:0.53399
[33]	eval-auc:0.54659
[0]	eval-auc:0.47826
[58]	eval-auc:0.52400
[0]	eval-auc:0.52289
[99]	eval-auc:0.57036
[0]	eval-auc:0.51311
[66]	eval-auc:0.54012
Trial 1 complete
[0]	eval-auc:0.51484
[21]	eval-auc:0.49782
[0]	eval-auc:0.49964
[57]	eval-auc:0.50883
[0]	eval-auc:0.51021
[90]	eval-auc:0.58559
[0]	eval-auc:0.50405
[25]	eval-auc:0.51320
[0]	eval-auc:0.49864
[43]	eval-auc:0.51495
[0]	eval-auc:0.51100
[54]	eval-auc:0.50784
[0]	eval-auc:0.53465
[24]	eval-auc:0.54243
[0]	eval-auc:0.48618
[68]	eval-auc:0.51996
[0]	eval-auc:0.52352
[99]	eval-auc:0.56713
[0]	eval-auc:0.51734
[35]	eval-auc:0.50602
Trial 2 complete
[0]	eval-auc:0.51484
[22]	eval-auc:0.49586
[0]	eval-auc:0.49964
[48]	eval-auc:0.52277
[0]	eval-auc:0.51021
[81]	eval-auc:0.57354
[0]	eval-auc:0.50405
[23]	eval-auc:0.50744
[0]	eval-auc:0.49974
[34]	eval-auc:0.50337
[0]	eval-auc:0.51100
[36]	eval-auc:0.52167
[0]	eval-auc:0.53465
[44]	eval-auc:0.54635
[0]	eval-auc:0.48618
[99]	eval-auc:0.53867
[0]	eval-auc:0.52352
[50]	eval-auc:0.54833
[0]	eval-auc:0.51734
[20]	eval-auc:0.51254
Trial 3 complete
[0]	eval-auc:0.50712
[85]	eval-auc:0.53491
[0]	eval-auc:0.50088
[60]	eval-auc:0.52755
[0]	eval-auc:0.51606
[64]	eval-auc:0.58947
[0]	eval-auc:0.50554
[23]	eval-auc:0.50870
[0]	eval-auc:0.49693
[79]	eval-auc:0.54675
[0]	eval-auc:0.51226
[87]	eval-auc:0.55746
[0]	eval-auc:0.53399
[49]	eval-auc:0.55312
[0]	eval-auc:0.47826
[44]	eval-auc:0.51955
[0]	eval-auc:0.52289
[86]	eval-auc:0.56826
[0]	eval-auc:0.51311
[58]	eval-auc:0.54850
Trial 4 complete
[0]	eval-auc:0.50897
[77]	eval-auc:0.53922
[0]	eval-auc:0.49935
[47]	eval-auc:0.53851
[0]	eval-auc:0.51740
[33]	eval-auc:0.58284
[0]	eval-auc:0.50940
[36]	eval-auc:0.52023
[0]	eval-auc:0.49527
[67]	eval-auc:0.56990
[0]	eval-auc:0.51633
[31]	eval-auc:0.54225
[0]	eval-auc:0.53095
[29]	eval-auc:0.56634
[0]	eval-auc:0.50033
[25]	eval-auc:0.52401
[0]	eval-auc:0.51679
[48]	eval-auc:0.57965
[0]	eval-auc:0.51644
[46]	eval-auc:0.53879
Trial 5 complete
[0]	eval-auc:0.51574
[76]	eval-auc:0.55539
[0]	eval-auc:0.50082
[45]	eval-auc:0.53053
[0]	eval-auc:0.51355
[61]	eval-auc:0.57626
[0]	eval-auc:0.51741
[23]	eval-auc:0.48562
[0]	eval-auc:0.50456
[71]	eval-auc:0.54687
[0]	eval-auc:0.50575
[67]	eval-auc:0.56277
[0]	eval-auc:0.53459
[38]	eval-auc:0.56031
[0]	eval-auc:0.50239
[88]	eval-auc:0.53898
[0]	eval-auc:0.51656
[92]	eval-auc:0.56838
[0]	eval-auc:0.51734
[86]	eval-auc:0.53762
Trial 6 complete
[0]	eval-auc:0.50120
[47]	eval-auc:0.52494
[0]	eval-auc:0.49635
[29]	eval-auc:0.50864
[0]	eval-auc:0.52088
[25]	eval-auc:0.53183
[0]	eval-auc:0.50389
[22]	eval-auc:0.50952
[0]	eval-auc:0.49509
[99]	eval-auc:0.55109
[0]	eval-auc:0.52867
[66]	eval-auc:0.54257
[0]	eval-auc:0.53925
[25]	eval-auc:0.54255
[0]	eval-auc:0.49168
[62]	eval-auc:0.50828
[0]	eval-auc:0.52147
[93]	eval-auc:0.55323
[0]	eval-auc:0.52346
[22]	eval-auc:0.51722
Trial 7 complete
[0]	eval-auc:0.50745
[99]	eval-auc:0.55250
[0]	eval-auc:0.50228
[46]	eval-auc:0.52171
[0]	eval-auc:0.51372
[66]	eval-auc:0.56388
[0]	eval-auc:0.51742
[29]	eval-auc:0.51030
[0]	eval-auc:0.50657
[99]	eval-auc:0.54457
[0]	eval-auc:0.50318
[92]	eval-auc:0.54805
[0]	eval-auc:0.52941
[50]	eval-auc:0.55980
[0]	eval-auc:0.50632
[19]	eval-auc:0.49070
[0]	eval-auc:0.50796
[51]	eval-auc:0.54982
[0]	eval-auc:0.51249
[21]	eval-auc:0.51741
Trial 8 complete
[0]	eval-auc:0.50917
[99]	eval-auc:0.55878
[0]	eval-auc:0.49948
[60]	eval-auc:0.51886
[0]	eval-auc:0.51356
[75]	eval-auc:0.56572
[0]	eval-auc:0.51688
[43]	eval-auc:0.51993
[0]	eval-auc:0.49694
[86]	eval-auc:0.57161
[0]	eval-auc:0.51040
[46]	eval-auc:0.54677
[0]	eval-auc:0.52485
[28]	eval-auc:0.54700
[0]	eval-auc:0.50058
[49]	eval-auc:0.53439
[0]	eval-auc:0.51734
[77]	eval-auc:0.58062
[0]	eval-auc:0.51776
[71]	eval-auc:0.55256
Trial 9 complete
[0]	eval-auc:0.50745
[22]	eval-auc:0.50634
[0]	eval-auc:0.50228
[20]	eval-auc:0.49949
[0]	eval-auc:0.51372
[99]	eval-auc:0.55285
[0]	eval-auc:0.51742
[19]	eval-auc:0.50851
[0]	eval-auc:0.50657
[24]	eval-auc:0.49600
[0]	eval-auc:0.50318
[46]	eval-auc:0.51238
[0]	eval-auc:0.52941
[60]	eval-auc:0.54262
[0]	eval-auc:0.50632
[19]	eval-auc:0.49964
[0]	eval-auc:0.50796
[50]	eval-auc:0.52273
[0]	eval-auc:0.51249
[25]	eval-auc:0.50709
Trial 10 complete
[0]	eval-auc:0.48931
[28]	eval-auc:0.52731
[0]	eval-auc:0.49406
[49]	eval-auc:0.52408
[0]	eval-auc:0.49517
[37]	eval-auc:0.57238
[0]	eval-auc:0.50150
[32]	eval-auc:0.52213
[0]	eval-auc:0.50212
[76]	eval-auc:0.57000
[0]	eval-auc:0.52337
[22]	eval-auc:0.53464
[0]	eval-auc:0.54469
[53]	eval-auc:0.56418
[0]	eval-auc:0.47935
[70]	eval-auc:0.52775
[0]	eval-auc:0.52089
[71]	eval-auc:0.57121
[0]	eval-auc:0.50664
[56]	eval-auc:0.54496
Trial 11 complete
[0]	eval-auc:0.51574
[23]	eval-auc:0.51719
[0]	eval-auc:0.50082
[76]	eval-auc:0.53576
[0]	eval-auc:0.51355
[66]	eval-auc:0.58864
[0]	eval-auc:0.51075
[26]	eval-auc:0.50419
[0]	eval-auc:0.50456
[99]	eval-auc:0.55642
[0]	eval-auc:0.50575
[33]	eval-auc:0.52195
[0]	eval-auc:0.53459
[40]	eval-auc:0.55828
[0]	eval-auc:0.50239
[64]	eval-auc:0.54065
[0]	eval-auc:0.51656
[99]	eval-auc:0.57469
[0]	eval-auc:0.51734
[19]	eval-auc:0.51323
Trial 12 complete
[0]	eval-auc:0.51574
[24]	eval-auc:0.51276
[0]	eval-auc:0.50082
[79]	eval-auc:0.53801
[0]	eval-auc:0.51355
[76]	eval-auc:0.56816
[0]	eval-auc:0.51075
[26]	eval-auc:0.50635
[0]	eval-auc:0.50456
[19]	eval-auc:0.49975
[0]	eval-auc:0.50575
[41]	eval-auc:0.52290
[0]	eval-auc:0.53459
[61]	eval-auc:0.56144
[0]	eval-auc:0.50239
[63]	eval-auc:0.52703
[0]	eval-auc:0.51656
[60]	eval-auc:0.55323
[0]	eval-auc:0.51734
[20]	eval-auc:0.51379
Trial 13 complete
[0]	eval-auc:0.49163
[58]	eval-auc:0.54947
[0]	eval-auc:0.49600
[99]	eval-auc:0.54417
[0]	eval-auc:0.49032
[36]	eval-auc:0.56507
[0]	eval-auc:0.50275
[35]	eval-auc:0.51727
[0]	eval-auc:0.48846
[58]	eval-auc:0.57343
[0]	eval-auc:0.52266
[31]	eval-auc:0.56587
[0]	eval-auc:0.53915
[79]	eval-auc:0.56405
[0]	eval-auc:0.48044
[79]	eval-auc:0.53796
[0]	eval-auc:0.51916
[99]	eval-auc:0.59312
[0]	eval-auc:0.51432
[44]	eval-auc:0.54886
Trial 14 complete
[0]	eval-auc:0.52172
[22]	eval-auc:0.49588
[0]	eval-auc:0.50087
[82]	eval-auc:0.52125
[0]	eval-auc:0.51812
[23]	eval-auc:0.53569
[0]	eval-auc:0.51167
[30]	eval-auc:0.50758
[0]	eval-auc:0.49817
[29]	eval-auc:0.49523
[0]	eval-auc:0.51132
[39]	eval-auc:0.51038
[0]	eval-auc:0.53401
[63]	eval-auc:0.54175
[0]	eval-auc:0.48341
[29]	eval-auc:0.48251
[0]	eval-auc:0.52178
[99]	eval-auc:0.55635
[0]	eval-auc:0.51211
[35]	eval-auc:0.51985
Trial 15 complete
[0]	eval-auc:0.49043
[33]	eval-auc:0.50754
[0]	eval-auc:0.49548
[26]	eval-auc:0.50543
[0]	eval-auc:0.52826
[98]	eval-auc:0.57859
[0]	eval-auc:0.49896
[24]	eval-auc:0.50695
[0]	eval-auc:0.48963
[99]	eval-auc:0.56922
[0]	eval-auc:0.53564
[28]	eval-auc:0.52871
[0]	eval-auc:0.52847
[68]	eval-auc:0.55683
[0]	eval-auc:0.48616
[58]	eval-auc:0.50194
[0]	eval-auc:0.51685
[68]	eval-auc:0.56500
[0]	eval-auc:0.50694
[31]	eval-auc:0.51812
Trial 16 complete
[0]	eval-auc:0.51574
[27]	eval-auc:0.50990
[0]	eval-auc:0.50082
[20]	eval-auc:0.49974
[0]	eval-auc:0.51355
[99]	eval-auc:0.55931
[0]	eval-auc:0.51075
[34]	eval-auc:0.50090
[0]	eval-auc:0.50456
[19]	eval-auc:0.50036
[0]	eval-auc:0.50575
[76]	eval-auc:0.51877
[0]	eval-auc:0.53459
[58]	eval-auc:0.54347
[0]	eval-auc:0.50239
[20]	eval-auc:0.50098
[0]	eval-auc:0.51656
[99]	eval-auc:0.53741
[0]	eval-auc:0.51734
[19]	eval-auc:0.50866
Trial 17 complete
[0]	eval-auc:0.51574
[26]	eval-auc:0.51040
[0]	eval-auc:0.50082
[19]	eval-auc:0.49974
[0]	eval-auc:0.51355
[91]	eval-auc:0.56421
[0]	eval-auc:0.51075
[31]	eval-auc:0.50113
[0]	eval-auc:0.50456
[20]	eval-auc:0.50031
[0]	eval-auc:0.50575
[74]	eval-auc:0.51491
[0]	eval-auc:0.53459
[29]	eval-auc:0.54489
[0]	eval-auc:0.50239
[68]	eval-auc:0.49488
[0]	eval-auc:0.51656
[95]	eval-auc:0.54299
[0]	eval-auc:0.51734
[20]	eval-auc:0.50789
Trial 18 complete
[0]	eval-auc:0.51053
[20]	eval-auc:0.49295
[0]	eval-auc:0.49348
[59]	eval-auc:0.51809
[0]	eval-auc:0.50910
[92]	eval-auc:0.58543
[0]	eval-auc:0.51348
[20]	eval-auc:0.50567
[0]	eval-auc:0.49533
[99]	eval-auc:0.54450
[0]	eval-auc:0.51083
[64]	eval-auc:0.52660
[0]	eval-auc:0.54347
[25]	eval-auc:0.54188
[0]	eval-auc:0.48440
[84]	eval-auc:0.52575
[0]	eval-auc:0.51730
[99]	eval-auc:0.56732
[0]	eval-auc:0.50864
[99]	eval-auc:0.54503
Trial 19 complete
[0]	eval-auc:0.50745
[22]	eval-auc:0.50629
[0]	eval-auc:0.50228
[19]	eval-auc:0.50042
[0]	eval-auc:0.51372
[99]	eval-auc:0.55898
[0]	eval-auc:0.51742
[20]	eval-auc:0.50851
[0]	eval-auc:0.50657
[24]	eval-auc:0.49599
[0]	eval-auc:0.50318
[99]	eval-auc:0.51699
[0]	eval-auc:0.52941
[67]	eval-auc:0.54452
[0]	eval-auc:0.50632
[20]	eval-auc:0.50251
[0]	eval-auc:0.50796
[48]	eval-auc:0.52175
[0]	eval-auc:0.51249
[24]	eval-auc:0.50752
Trial 20 complete
[0]	eval-auc:0.52488
[19]	eval-auc:0.52154
[0]	eval-auc:0.49968
[30]	eval-auc:0.52012
[0]	eval-auc:0.52217
[37]	eval-auc:0.57075
[0]	eval-auc:0.51904
[44]	eval-auc:0.51765
[0]	eval-auc:0.49541
[99]	eval-auc:0.56664
[0]	eval-auc:0.51053
[51]	eval-auc:0.55645
[0]	eval-auc:0.53966
[70]	eval-auc:0.57879
[0]	eval-auc:0.48469
[35]	eval-auc:0.51989
[0]	eval-auc:0.52368
[47]	eval-auc:0.57133
[0]	eval-auc:0.50994
[63]	eval-auc:0.53517
Trial 21 complete
[0]	eval-auc:0.50745
[24]	eval-auc:0.50634
[0]	eval-auc:0.50228
[19]	eval-auc:0.50048
[0]	eval-auc:0.51372
[99]	eval-auc:0.55450
[0]	eval-auc:0.51742
[20]	eval-auc:0.50851
[0]	eval-auc:0.50657
[25]	eval-auc:0.49751
[0]	eval-auc:0.50318
[54]	eval-auc:0.51187
[0]	eval-auc:0.52941
[82]	eval-auc:0.54433
[0]	eval-auc:0.50632
[20]	eval-auc:0.49996
[0]	eval-auc:0.50796
[58]	eval-auc:0.52149
[0]	eval-auc:0.51249
[26]	eval-auc:0.50760
Trial 22 complete
[0]	eval-auc:0.51574
[52]	eval-auc:0.54309
[0]	eval-auc:0.50082
[73]	eval-auc:0.53975
[0]	eval-auc:0.51355
[47]	eval-auc:0.56753
[0]	eval-auc:0.51075
[23]	eval-auc:0.51069
[0]	eval-auc:0.50456
[77]	eval-auc:0.54777
[0]	eval-auc:0.50575
[90]	eval-auc:0.55595
[0]	eval-auc:0.53459
[34]	eval-auc:0.55852
[0]	eval-auc:0.50239
[53]	eval-auc:0.53855
[0]	eval-auc:0.51656
[99]	eval-auc:0.57416
[0]	eval-auc:0.51734
[19]	eval-auc:0.51175
Trial 23 complete
[0]	eval-auc:0.52506
[21]	eval-auc:0.51388
[0]	eval-auc:0.49895
[60]	eval-auc:0.51094
[0]	eval-auc:0.51812
[79]	eval-auc:0.57946
[0]	eval-auc:0.51679
[22]	eval-auc:0.50097
[0]	eval-auc:0.49694
[99]	eval-auc:0.55202
[0]	eval-auc:0.51102
[23]	eval-auc:0.50537
[0]	eval-auc:0.53446
[45]	eval-auc:0.54904
[0]	eval-auc:0.49211
[74]	eval-auc:0.53204
[0]	eval-auc:0.52292
[62]	eval-auc:0.54917
[0]	eval-auc:0.51150
[29]	eval-auc:0.52075
Trial 24 complete
[0]	eval-auc:0.50896
[39]	eval-auc:0.51314
[0]	eval-auc:0.49883
[58]	eval-auc:0.51221
[0]	eval-auc:0.51356
[73]	eval-auc:0.56950
[0]	eval-auc:0.50316
[29]	eval-auc:0.52118
[0]	eval-auc:0.49581
[99]	eval-auc:0.56764
[0]	eval-auc:0.50869
[55]	eval-auc:0.55084
[0]	eval-auc:0.50340
[53]	eval-auc:0.55040
[0]	eval-auc:0.50595
[35]	eval-auc:0.53624
[0]	eval-auc:0.51708
[66]	eval-auc:0.58447
[0]	eval-auc:0.51028
[25]	eval-auc:0.50731
Trial 25 complete
[0]	eval-auc:0.49806
[42]	eval-auc:0.51681
[0]	eval-auc:0.49723
[28]	eval-auc:0.50925
[0]	eval-auc:0.52078
[70]	eval-auc:0.57740
[0]	eval-auc:0.50191
[26]	eval-auc:0.50177
[0]	eval-auc:0.49639
[27]	eval-auc:0.53233
[0]	eval-auc:0.52682
[32]	eval-auc:0.54558
[0]	eval-auc:0.53948
[26]	eval-auc:0.53648
[0]	eval-auc:0.48927
[35]	eval-auc:0.51258
[0]	eval-auc:0.51872
[74]	eval-auc:0.55717
[0]	eval-auc:0.51443
[25]	eval-auc:0.50079
Trial 26 complete
[0]	eval-auc:0.51574
[57]	eval-auc:0.54814
[0]	eval-auc:0.50082
[80]	eval-auc:0.53425
[0]	eval-auc:0.51355
[62]	eval-auc:0.57685
[0]	eval-auc:0.51075
[22]	eval-auc:0.50890
[0]	eval-auc:0.50456
[99]	eval-auc:0.55254
[0]	eval-auc:0.50575
[77]	eval-auc:0.55718
[0]	eval-auc:0.53459
[55]	eval-auc:0.55062
[0]	eval-auc:0.50239
[42]	eval-auc:0.52545
[0]	eval-auc:0.51656
[99]	eval-auc:0.57377
[0]	eval-auc:0.51734
[75]	eval-auc:0.55473
Trial 27 complete
[0]	eval-auc:0.51825
[85]	eval-auc:0.55808
[0]	eval-auc:0.49964
[29]	eval-auc:0.51870
[0]	eval-auc:0.51977
[45]	eval-auc:0.57025
[0]	eval-auc:0.50405
[21]	eval-auc:0.52178
[0]	eval-auc:0.49927
[75]	eval-auc:0.55505
[0]	eval-auc:0.51101
[64]	eval-auc:0.54343
[0]	eval-auc:0.53465
[79]	eval-auc:0.56966
[0]	eval-auc:0.48618
[76]	eval-auc:0.53957
[0]	eval-auc:0.52352
[88]	eval-auc:0.58154
[0]	eval-auc:0.51734
[99]	eval-auc:0.55276
Trial 28 complete
[0]	eval-auc:0.49363
[71]	eval-auc:0.52929
[0]	eval-auc:0.49590
[34]	eval-auc:0.51785
[0]	eval-auc:0.48900
[63]	eval-auc:0.59211
[0]	eval-auc:0.49901
[27]	eval-auc:0.51010
[0]	eval-auc:0.48883
[74]	eval-auc:0.55172
[0]	eval-auc:0.51720
[95]	eval-auc:0.55086
[0]	eval-auc:0.54844
[41]	eval-auc:0.54832
[0]	eval-auc:0.48735
[60]	eval-auc:0.52553
[0]	eval-auc:0.52176
[99]	eval-auc:0.56176
[0]	eval-auc:0.51197
[31]	eval-auc:0.52964
Trial 29 complete
[0]	eval-auc:0.49041
[68]	eval-auc:0.54296
[0]	eval-auc:0.49582
[21]	eval-auc:0.50575
[0]	eval-auc:0.52831
[41]	eval-auc:0.58340
[0]	eval-auc:0.49898
[32]	eval-auc:0.52064
[0]	eval-auc:0.48910
[44]	eval-auc:0.57749
[0]	eval-auc:0.53823
[21]	eval-auc:0.53921
[0]	eval-auc:0.52849
[46]	eval-auc:0.55734
[0]	eval-auc:0.48831
[79]	eval-auc:0.52253
[0]	eval-auc:0.51693
[79]	eval-auc:0.59414
[0]	eval-auc:0.50739
[99]	eval-auc:0.55156
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:17:09,342 - INFO - Success: XGBoost - openml__Amazon_employee_access__34539_50pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__Amazon_employee_access__34539_50pct_missing', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.50911
[20]	eval-auc:0.50860
[0]	eval-auc:0.49919
[19]	eval-auc:0.49181
[0]	eval-auc:0.50530
[30]	eval-auc:0.49651
[0]	eval-auc:0.49854
[71]	eval-auc:0.50150
[0]	eval-auc:0.50940
[51]	eval-auc:0.50847
[0]	eval-auc:0.50022
[20]	eval-auc:0.50397
[0]	eval-auc:0.50301
[28]	eval-auc:0.50539
[0]	eval-auc:0.51249
[20]	eval-auc:0.50625
[0]	eval-auc:0.49708
[51]	eval-auc:0.50094
[0]	eval-auc:0.50240
[40]	eval-auc:0.50043
Trial 1 complete
[0]	eval-auc:0.50944
[20]	eval-auc:0.50570
[0]	eval-auc:0.49854
[19]	eval-auc:0.49314
[0]	eval-auc:0.50561
[19]	eval-auc:0.50450
[0]	eval-auc:0.49887
[38]	eval-auc:0.49943
[0]	eval-auc:0.50479
[23]	eval-auc:0.51094
[0]	eval-auc:0.50559
[20]	eval-auc:0.50372
[0]	eval-auc:0.50005
[19]	eval-auc:0.49988
[0]	eval-auc:0.50727
[33]	eval-auc:0.50567
[0]	eval-auc:0.49773
[69]	eval-auc:0.50134
[0]	eval-auc:0.50319
[21]	eval-auc:0.49803
Trial 2 complete
[0]	eval-auc:0.50944
[20]	eval-auc:0.50338
[0]	eval-auc:0.49854
[20]	eval-auc:0.49101
[0]	eval-auc:0.50561
[20]	eval-auc:0.50386
[0]	eval-auc:0.49887
[67]	eval-auc:0.50214
[0]	eval-auc:0.50479
[21]	eval-auc:0.51094
[0]	eval-auc:0.50559
[20]	eval-auc:0.50335
[0]	eval-auc:0.50005
[57]	eval-auc:0.50317
[0]	eval-auc:0.50727
[29]	eval-auc:0.50595
[0]	eval-auc:0.49773
[56]	eval-auc:0.50067
[0]	eval-auc:0.50319
[46]	eval-auc:0.50010
Trial 3 complete
[0]	eval-auc:0.50911
[20]	eval-auc:0.50694
[0]	eval-auc:0.49919
[19]	eval-auc:0.49244
[0]	eval-auc:0.50530
[23]	eval-auc:0.49816
[0]	eval-auc:0.49854
[62]	eval-auc:0.50214
[0]	eval-auc:0.50940
[30]	eval-auc:0.50802
[0]	eval-auc:0.50054
[21]	eval-auc:0.50540
[0]	eval-auc:0.50301
[49]	eval-auc:0.50381
[0]	eval-auc:0.51249
[19]	eval-auc:0.50610
[0]	eval-auc:0.49708
[44]	eval-auc:0.49548
[0]	eval-auc:0.50240
[34]	eval-auc:0.50137
Trial 4 complete
[0]	eval-auc:0.50665
[23]	eval-auc:0.50382
[0]	eval-auc:0.49854
[19]	eval-auc:0.49406
[0]	eval-auc:0.49923
[20]	eval-auc:0.49901
[0]	eval-auc:0.49725
[43]	eval-auc:0.50278
[0]	eval-auc:0.50896
[29]	eval-auc:0.50317
[0]	eval-auc:0.50431
[33]	eval-auc:0.49822
[0]	eval-auc:0.50151
[32]	eval-auc:0.50744
[0]	eval-auc:0.50708
[24]	eval-auc:0.51064
[0]	eval-auc:0.49676
[51]	eval-auc:0.50351
[0]	eval-auc:0.50223
[31]	eval-auc:0.50746
Trial 5 complete
[0]	eval-auc:0.50465
[24]	eval-auc:0.49710
[0]	eval-auc:0.49919
[20]	eval-auc:0.48802
[0]	eval-auc:0.49987
[23]	eval-auc:0.49559
[0]	eval-auc:0.49757
[44]	eval-auc:0.49911
[0]	eval-auc:0.50514
[31]	eval-auc:0.50668
[0]	eval-auc:0.50530
[20]	eval-auc:0.49870
[0]	eval-auc:0.50087
[35]	eval-auc:0.50328
[0]	eval-auc:0.50823
[24]	eval-auc:0.50793
[0]	eval-auc:0.49789
[34]	eval-auc:0.50065
[0]	eval-auc:0.50119
[31]	eval-auc:0.50042
Trial 6 complete
[0]	eval-auc:0.50606
[24]	eval-auc:0.50114
[0]	eval-auc:0.49292
[24]	eval-auc:0.48866
[0]	eval-auc:0.49895
[20]	eval-auc:0.49565
[0]	eval-auc:0.49629
[97]	eval-auc:0.50338
[0]	eval-auc:0.50835
[35]	eval-auc:0.50798
[0]	eval-auc:0.50120
[25]	eval-auc:0.49543
[0]	eval-auc:0.50004
[77]	eval-auc:0.50600
[0]	eval-auc:0.49707
[67]	eval-auc:0.51009
[0]	eval-auc:0.49688
[36]	eval-auc:0.49868
[0]	eval-auc:0.50282
[20]	eval-auc:0.50168
Trial 7 complete
[0]	eval-auc:0.50184
[38]	eval-auc:0.50378
[0]	eval-auc:0.49951
[20]	eval-auc:0.49086
[0]	eval-auc:0.50020
[28]	eval-auc:0.49675
[0]	eval-auc:0.49789
[27]	eval-auc:0.49798
[0]	eval-auc:0.50037
[23]	eval-auc:0.50625
[0]	eval-auc:0.50627
[19]	eval-auc:0.50287
[0]	eval-auc:0.49806
[52]	eval-auc:0.50412
[0]	eval-auc:0.50890
[33]	eval-auc:0.50536
[0]	eval-auc:0.49984
[47]	eval-auc:0.49875
[0]	eval-auc:0.49935
[42]	eval-auc:0.51064
Trial 8 complete
[0]	eval-auc:0.50729
[21]	eval-auc:0.50202
[0]	eval-auc:0.49919
[20]	eval-auc:0.49329
[0]	eval-auc:0.50068
[23]	eval-auc:0.49852
[0]	eval-auc:0.49822
[40]	eval-auc:0.50120
[0]	eval-auc:0.50037
[36]	eval-auc:0.50634
[0]	eval-auc:0.50627
[20]	eval-auc:0.50269
[0]	eval-auc:0.50265
[50]	eval-auc:0.50593
[0]	eval-auc:0.50724
[32]	eval-auc:0.51140
[0]	eval-auc:0.49773
[99]	eval-auc:0.50240
[0]	eval-auc:0.50367
[56]	eval-auc:0.50714
Trial 9 complete
[0]	eval-auc:0.50184
[49]	eval-auc:0.50817
[0]	eval-auc:0.49951
[19]	eval-auc:0.49854
[0]	eval-auc:0.50020
[22]	eval-auc:0.49988
[0]	eval-auc:0.49789
[20]	eval-auc:0.49757
[0]	eval-auc:0.50037
[24]	eval-auc:0.50780
[0]	eval-auc:0.50627
[25]	eval-auc:0.50485
[0]	eval-auc:0.49806
[38]	eval-auc:0.50008
[0]	eval-auc:0.50890
[69]	eval-auc:0.50569
[0]	eval-auc:0.49984
[20]	eval-auc:0.49789
[0]	eval-auc:0.49935
[35]	eval-auc:0.50839
Trial 10 complete
[0]	eval-auc:0.50636
[52]	eval-auc:0.50644
[0]	eval-auc:0.49324
[19]	eval-auc:0.48880
[0]	eval-auc:0.50039
[20]	eval-auc:0.49084
[0]	eval-auc:0.49629
[39]	eval-auc:0.50278
[0]	eval-auc:0.50849
[27]	eval-auc:0.50283
[0]	eval-auc:0.49877
[28]	eval-auc:0.49706
[0]	eval-auc:0.49904
[31]	eval-auc:0.50020
[0]	eval-auc:0.50736
[33]	eval-auc:0.50929
[0]	eval-auc:0.49442
[24]	eval-auc:0.49787
[0]	eval-auc:0.50416
[33]	eval-auc:0.50198
Trial 11 complete
[0]	eval-auc:0.50464
[22]	eval-auc:0.50300
[0]	eval-auc:0.49887
[19]	eval-auc:0.49038
[0]	eval-auc:0.49987
[22]	eval-auc:0.49432
[0]	eval-auc:0.49757
[38]	eval-auc:0.49957
[0]	eval-auc:0.50514
[40]	eval-auc:0.50915
[0]	eval-auc:0.50532
[19]	eval-auc:0.50398
[0]	eval-auc:0.50087
[45]	eval-auc:0.50358
[0]	eval-auc:0.50823
[25]	eval-auc:0.50599
[0]	eval-auc:0.49789
[38]	eval-auc:0.50146
[0]	eval-auc:0.50119
[36]	eval-auc:0.50056
Trial 12 complete
[0]	eval-auc:0.50464
[39]	eval-auc:0.50285
[0]	eval-auc:0.49887
[19]	eval-auc:0.49086
[0]	eval-auc:0.49987
[23]	eval-auc:0.49805
[0]	eval-auc:0.49757
[23]	eval-auc:0.49717
[0]	eval-auc:0.50514
[21]	eval-auc:0.50746
[0]	eval-auc:0.50532
[20]	eval-auc:0.50240
[0]	eval-auc:0.50087
[59]	eval-auc:0.50203
[0]	eval-auc:0.50823
[34]	eval-auc:0.50630
[0]	eval-auc:0.49789
[53]	eval-auc:0.49988
[0]	eval-auc:0.50119
[47]	eval-auc:0.51062
Trial 13 complete
[0]	eval-auc:0.50542
[22]	eval-auc:0.50065
[0]	eval-auc:0.49475
[20]	eval-auc:0.49237
[0]	eval-auc:0.49942
[21]	eval-auc:0.49489
[0]	eval-auc:0.49596
[33]	eval-auc:0.50369
[0]	eval-auc:0.51025
[23]	eval-auc:0.50466
[0]	eval-auc:0.50007
[21]	eval-auc:0.49636
[0]	eval-auc:0.49904
[24]	eval-auc:0.50038
[0]	eval-auc:0.49431
[28]	eval-auc:0.50945
[0]	eval-auc:0.49442
[23]	eval-auc:0.50303
[0]	eval-auc:0.50448
[25]	eval-auc:0.50154
Trial 14 complete
[0]	eval-auc:0.50911
[30]	eval-auc:0.50776
[0]	eval-auc:0.49919
[19]	eval-auc:0.49379
[0]	eval-auc:0.50528
[20]	eval-auc:0.50450
[0]	eval-auc:0.49854
[35]	eval-auc:0.49991
[0]	eval-auc:0.50940
[24]	eval-auc:0.50898
[0]	eval-auc:0.50021
[44]	eval-auc:0.50348
[0]	eval-auc:0.50012
[20]	eval-auc:0.49932
[0]	eval-auc:0.50169
[38]	eval-auc:0.50623
[0]	eval-auc:0.49676
[34]	eval-auc:0.49708
[0]	eval-auc:0.50254
[21]	eval-auc:0.49929
Trial 15 complete
[0]	eval-auc:0.50480
[24]	eval-auc:0.49975
[0]	eval-auc:0.49358
[20]	eval-auc:0.48833
[0]	eval-auc:0.49990
[20]	eval-auc:0.49612
[0]	eval-auc:0.49644
[31]	eval-auc:0.50244
[0]	eval-auc:0.50943
[42]	eval-auc:0.50764
[0]	eval-auc:0.50054
[22]	eval-auc:0.49547
[0]	eval-auc:0.49738
[55]	eval-auc:0.50422
[0]	eval-auc:0.50738
[25]	eval-auc:0.50752
[0]	eval-auc:0.49442
[46]	eval-auc:0.49738
[0]	eval-auc:0.49940
[47]	eval-auc:0.50123
Trial 16 complete
[0]	eval-auc:0.50464
[22]	eval-auc:0.50849
[0]	eval-auc:0.49887
[20]	eval-auc:0.49757
[0]	eval-auc:0.49987
[35]	eval-auc:0.50385
[0]	eval-auc:0.49757
[27]	eval-auc:0.49841
[0]	eval-auc:0.50514
[34]	eval-auc:0.50597
[0]	eval-auc:0.50532
[20]	eval-auc:0.50293
[0]	eval-auc:0.50087
[19]	eval-auc:0.49992
[0]	eval-auc:0.50823
[20]	eval-auc:0.50499
[0]	eval-auc:0.49789
[20]	eval-auc:0.49773
[0]	eval-auc:0.50119
[29]	eval-auc:0.50869
Trial 17 complete
[0]	eval-auc:0.50464
[21]	eval-auc:0.50944
[0]	eval-auc:0.49887
[19]	eval-auc:0.49757
[0]	eval-auc:0.49987
[29]	eval-auc:0.50384
[0]	eval-auc:0.49757
[28]	eval-auc:0.49841
[0]	eval-auc:0.50514
[33]	eval-auc:0.50597
[0]	eval-auc:0.50532
[19]	eval-auc:0.50325
[0]	eval-auc:0.50087
[23]	eval-auc:0.50024
[0]	eval-auc:0.50823
[19]	eval-auc:0.50499
[0]	eval-auc:0.49789
[40]	eval-auc:0.49806
[0]	eval-auc:0.50119
[43]	eval-auc:0.50869
Trial 18 complete
[0]	eval-auc:0.50880
[20]	eval-auc:0.50759
[0]	eval-auc:0.49919
[19]	eval-auc:0.49149
[0]	eval-auc:0.50450
[20]	eval-auc:0.50286
[0]	eval-auc:0.50068
[65]	eval-auc:0.50359
[0]	eval-auc:0.50958
[62]	eval-auc:0.50897
[0]	eval-auc:0.50005
[60]	eval-auc:0.49819
[0]	eval-auc:0.50230
[75]	eval-auc:0.50460
[0]	eval-auc:0.50300
[30]	eval-auc:0.50596
[0]	eval-auc:0.50037
[72]	eval-auc:0.50134
[0]	eval-auc:0.50238
[66]	eval-auc:0.50046
Trial 19 complete
[0]	eval-auc:0.50184
[33]	eval-auc:0.50849
[0]	eval-auc:0.49951
[20]	eval-auc:0.49854
[0]	eval-auc:0.50020
[21]	eval-auc:0.49988
[0]	eval-auc:0.49789
[19]	eval-auc:0.49757
[0]	eval-auc:0.50037
[24]	eval-auc:0.50780
[0]	eval-auc:0.50627
[25]	eval-auc:0.50485
[0]	eval-auc:0.49806
[40]	eval-auc:0.50009
[0]	eval-auc:0.50890
[72]	eval-auc:0.50569
[0]	eval-auc:0.49984
[19]	eval-auc:0.49789
[0]	eval-auc:0.49935
[51]	eval-auc:0.50838
Trial 20 complete
[0]	eval-auc:0.50913
[23]	eval-auc:0.50120
[0]	eval-auc:0.49919
[19]	eval-auc:0.49076
[0]	eval-auc:0.50498
[19]	eval-auc:0.49814
[0]	eval-auc:0.49757
[41]	eval-auc:0.50309
[0]	eval-auc:0.50929
[31]	eval-auc:0.50496
[0]	eval-auc:0.50495
[23]	eval-auc:0.50195
[0]	eval-auc:0.50183
[53]	eval-auc:0.50900
[0]	eval-auc:0.51254
[21]	eval-auc:0.51034
[0]	eval-auc:0.50038
[27]	eval-auc:0.50057
[0]	eval-auc:0.50255
[32]	eval-auc:0.49922
Trial 21 complete
[0]	eval-auc:0.50184
[54]	eval-auc:0.50817
[0]	eval-auc:0.49951
[19]	eval-auc:0.49951
[0]	eval-auc:0.50020
[21]	eval-auc:0.49988
[0]	eval-auc:0.49789
[19]	eval-auc:0.49757
[0]	eval-auc:0.50037
[37]	eval-auc:0.50780
[0]	eval-auc:0.50627
[26]	eval-auc:0.50516
[0]	eval-auc:0.49806
[21]	eval-auc:0.50087
[0]	eval-auc:0.50890
[55]	eval-auc:0.51402
[0]	eval-auc:0.49984
[20]	eval-auc:0.49789
[0]	eval-auc:0.49935
[34]	eval-auc:0.50839
Trial 22 complete
[0]	eval-auc:0.50464
[22]	eval-auc:0.50196
[0]	eval-auc:0.49887
[20]	eval-auc:0.48802
[0]	eval-auc:0.49987
[29]	eval-auc:0.49499
[0]	eval-auc:0.49757
[41]	eval-auc:0.50370
[0]	eval-auc:0.50514
[39]	eval-auc:0.50915
[0]	eval-auc:0.50532
[19]	eval-auc:0.49598
[0]	eval-auc:0.50087
[34]	eval-auc:0.50661
[0]	eval-auc:0.50823
[24]	eval-auc:0.50915
[0]	eval-auc:0.49789
[35]	eval-auc:0.50146
[0]	eval-auc:0.50119
[50]	eval-auc:0.50055
Trial 23 complete
[0]	eval-auc:0.50944
[21]	eval-auc:0.50603
[0]	eval-auc:0.49919
[20]	eval-auc:0.49330
[0]	eval-auc:0.50576
[19]	eval-auc:0.50337
[0]	eval-auc:0.49789
[26]	eval-auc:0.49926
[0]	eval-auc:0.50911
[30]	eval-auc:0.50905
[0]	eval-auc:0.50544
[20]	eval-auc:0.50322
[0]	eval-auc:0.50183
[19]	eval-auc:0.50086
[0]	eval-auc:0.50727
[38]	eval-auc:0.50412
[0]	eval-auc:0.49676
[27]	eval-auc:0.49842
[0]	eval-auc:0.50302
[33]	eval-auc:0.50931
Trial 24 complete
[0]	eval-auc:0.50665
[23]	eval-auc:0.50875
[0]	eval-auc:0.49854
[20]	eval-auc:0.49676
[0]	eval-auc:0.50004
[26]	eval-auc:0.50000
[0]	eval-auc:0.49789
[29]	eval-auc:0.49750
[0]	eval-auc:0.50496
[24]	eval-auc:0.50795
[0]	eval-auc:0.50445
[22]	eval-auc:0.50328
[0]	eval-auc:0.50233
[20]	eval-auc:0.50107
[0]	eval-auc:0.50708
[48]	eval-auc:0.51126
[0]	eval-auc:0.49838
[27]	eval-auc:0.49711
[0]	eval-auc:0.50271
[51]	eval-auc:0.50977
Trial 25 complete
[0]	eval-auc:0.50416
[22]	eval-auc:0.50035
[0]	eval-auc:0.49356
[20]	eval-auc:0.48864
[0]	eval-auc:0.49863
[20]	eval-auc:0.49549
[0]	eval-auc:0.49710
[63]	eval-auc:0.50275
[0]	eval-auc:0.50927
[22]	eval-auc:0.51038
[0]	eval-auc:0.50087
[23]	eval-auc:0.49674
[0]	eval-auc:0.50004
[99]	eval-auc:0.50912
[0]	eval-auc:0.50812
[25]	eval-auc:0.50844
[0]	eval-auc:0.49635
[32]	eval-auc:0.49899
[0]	eval-auc:0.50462
[19]	eval-auc:0.50167
Trial 26 complete
[0]	eval-auc:0.50464
[22]	eval-auc:0.50282
[0]	eval-auc:0.49887
[19]	eval-auc:0.48857
[0]	eval-auc:0.49987
[22]	eval-auc:0.50004
[0]	eval-auc:0.49757
[46]	eval-auc:0.50181
[0]	eval-auc:0.50514
[37]	eval-auc:0.50887
[0]	eval-auc:0.50532
[35]	eval-auc:0.49901
[0]	eval-auc:0.50087
[40]	eval-auc:0.50361
[0]	eval-auc:0.50823
[27]	eval-auc:0.50859
[0]	eval-auc:0.49789
[38]	eval-auc:0.50145
[0]	eval-auc:0.50119
[36]	eval-auc:0.51108
Trial 27 complete
[0]	eval-auc:0.50944
[20]	eval-auc:0.49905
[0]	eval-auc:0.49854
[19]	eval-auc:0.48926
[0]	eval-auc:0.50561
[19]	eval-auc:0.49588
[0]	eval-auc:0.49887
[37]	eval-auc:0.50211
[0]	eval-auc:0.50479
[32]	eval-auc:0.50911
[0]	eval-auc:0.50559
[19]	eval-auc:0.49809
[0]	eval-auc:0.50005
[35]	eval-auc:0.50582
[0]	eval-auc:0.49678
[22]	eval-auc:0.50856
[0]	eval-auc:0.49692
[34]	eval-auc:0.50177
[0]	eval-auc:0.50319
[20]	eval-auc:0.50058
Trial 28 complete
[0]	eval-auc:0.50574
[24]	eval-auc:0.50142
[0]	eval-auc:0.49340
[19]	eval-auc:0.48920
[0]	eval-auc:0.49990
[20]	eval-auc:0.49423
[0]	eval-auc:0.50085
[28]	eval-auc:0.50263
[0]	eval-auc:0.50786
[45]	eval-auc:0.50270
[0]	eval-auc:0.49894
[37]	eval-auc:0.50011
[0]	eval-auc:0.49905
[44]	eval-auc:0.50600
[0]	eval-auc:0.50506
[30]	eval-auc:0.50719
[0]	eval-auc:0.49377
[35]	eval-auc:0.49629
[0]	eval-auc:0.50400
[21]	eval-auc:0.49582
Trial 29 complete
[0]	eval-auc:0.50591
[20]	eval-auc:0.50523
[0]	eval-auc:0.49357
[20]	eval-auc:0.49123
[0]	eval-auc:0.49990
[20]	eval-auc:0.49085
[0]	eval-auc:0.49644
[37]	eval-auc:0.50276
[0]	eval-auc:0.50943
[29]	eval-auc:0.50287
[0]	eval-auc:0.50054
[20]	eval-auc:0.49421
[0]	eval-auc:0.49904
[32]	eval-auc:0.50657
[0]	eval-auc:0.50736
[31]	eval-auc:0.50930
[0]	eval-auc:0.49441
[34]	eval-auc:0.49692
[0]	eval-auc:0.49940
[29]	eval-auc:0.50153
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:17:58,219 - INFO - Success: XGBoost - openml__Amazon_employee_access__34539_75pct_missing
Output:
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__Amazon_employee_access__34539_75pct_missing', model_name='XGBoost')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 1 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 2 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 3 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 4 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 5 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 6 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 7 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 8 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 9 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 10 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 11 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 12 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 13 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 14 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 15 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 16 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 17 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 18 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 19 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 20 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 21 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 22 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 23 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 24 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 25 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 26 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 27 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 28 complete
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Trial 29 complete
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[19]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
[0]	eval-auc:0.50000
[20]	eval-auc:0.50000
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:18:35,196 - INFO - Success: RandomForest - openml__credit-g__31_100pct
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__credit-g__31_100pct', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:18:36,466 - INFO - Success: RandomForest - openml__credit-g__31_25pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__credit-g__31_25pct_missing', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 1 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 2 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 3 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 4 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 5 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 6 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 7 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 8 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 9 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 10 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 11 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 12 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 13 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 14 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 15 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 16 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 17 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 18 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 19 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 20 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 21 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 22 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 23 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 24 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 25 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 26 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 27 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 28 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 29 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:18:37,582 - INFO - Success: RandomForest - openml__credit-g__31_50pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__credit-g__31_50pct_missing', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 1 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 2 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 3 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 4 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 5 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 6 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 7 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 8 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 9 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 10 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 11 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 12 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 13 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 14 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 15 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 16 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 17 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 18 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 19 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 20 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 21 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 22 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 23 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 24 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 25 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 26 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 27 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 28 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 29 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:18:38,712 - INFO - Success: RandomForest - openml__credit-g__31_75pct_missing
Output:
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__credit-g__31_75pct_missing', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 1 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 2 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 3 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 4 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 5 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 6 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 7 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 8 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 9 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 10 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 11 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 12 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 13 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 14 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 15 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 16 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 17 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 18 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 19 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 20 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 21 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 22 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 23 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 24 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 25 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 26 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 27 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 28 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 29 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:19:08,211 - INFO - Success: RandomForest - openml__diabetes__37_100pct
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__diabetes__37_100pct', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:19:37,346 - INFO - Success: RandomForest - openml__diabetes__37_25pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__diabetes__37_25pct_missing', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:20:06,716 - INFO - Success: RandomForest - openml__diabetes__37_50pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__diabetes__37_50pct_missing', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:20:37,474 - INFO - Success: RandomForest - openml__diabetes__37_75pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__diabetes__37_75pct_missing', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:22:17,743 - INFO - Success: RandomForest - openml__adult__7592_100pct
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__adult__7592_100pct', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:22:19,784 - INFO - Success: RandomForest - openml__adult__7592_25pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__adult__7592_25pct_missing', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 1 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 2 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 3 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 4 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 5 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 6 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 7 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 8 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 9 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 10 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 11 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 12 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 13 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 14 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 15 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 16 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 17 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 18 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 19 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 20 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 21 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 22 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 23 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 24 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 25 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 26 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 27 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 28 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 29 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:22:21,472 - INFO - Success: RandomForest - openml__adult__7592_50pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__adult__7592_50pct_missing', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 1 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 2 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 3 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 4 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 5 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 6 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 7 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 8 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 9 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 10 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 11 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 12 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 13 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 14 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 15 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 16 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 17 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 18 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 19 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 20 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 21 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 22 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 23 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 24 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 25 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 26 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 27 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 28 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 29 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:22:23,067 - INFO - Success: RandomForest - openml__adult__7592_75pct_missing
Output:
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__adult__7592_75pct_missing', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 1 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 2 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 3 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 4 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 5 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 6 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 7 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 8 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 9 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 10 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 11 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 12 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 13 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 14 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 15 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 16 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 17 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 18 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 19 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 20 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 21 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 22 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 23 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 24 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 25 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 26 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 27 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 28 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 29 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:27:24,423 - INFO - Success: RandomForest - openml__spambase__43_100pct
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__spambase__43_100pct', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:32:24,484 - INFO - Success: RandomForest - openml__spambase__43_25pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__spambase__43_25pct_missing', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:37:20,567 - INFO - Success: RandomForest - openml__spambase__43_50pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__spambase__43_50pct_missing', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:42:08,098 - INFO - Success: RandomForest - openml__spambase__43_75pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__spambase__43_75pct_missing', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:43:29,113 - INFO - Success: RandomForest - openml__Amazon_employee_access__34539_100pct
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__Amazon_employee_access__34539_100pct', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:43:30,370 - INFO - Success: RandomForest - openml__Amazon_employee_access__34539_25pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__Amazon_employee_access__34539_25pct_missing', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 1 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 2 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 3 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 4 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 5 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 6 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 7 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 8 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 9 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 10 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 11 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 12 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 13 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 14 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 15 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 16 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 17 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 18 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 19 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 20 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 21 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 22 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 23 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 24 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 25 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 26 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 27 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 28 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 29 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:43:31,203 - INFO - Success: RandomForest - openml__Amazon_employee_access__34539_50pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__Amazon_employee_access__34539_50pct_missing', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 1 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 2 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 3 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 4 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 5 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 6 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 7 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 8 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 9 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 10 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 11 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 12 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 13 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 14 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 15 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 16 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 17 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 18 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 19 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 20 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 21 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 22 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 23 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 24 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 25 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 26 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 27 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 28 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 29 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:43:31,996 - INFO - Success: RandomForest - openml__Amazon_employee_access__34539_75pct_missing
Output:
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__Amazon_employee_access__34539_75pct_missing', model_name='RandomForest')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 1 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 2 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 3 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 4 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 5 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 6 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 7 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 8 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 9 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 10 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 11 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 12 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 13 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 14 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 15 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 16 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 17 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 18 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 19 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 20 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 21 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 22 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 23 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 24 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 25 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 26 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 27 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 28 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 29 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 348, in fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:43:59,375 - INFO - Success: KNN - openml__credit-g__31_100pct
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__credit-g__31_100pct', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:44:00,665 - INFO - Success: KNN - openml__credit-g__31_25pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__credit-g__31_25pct_missing', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 1 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 2 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 3 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 4 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 5 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 6 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 7 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 8 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 9 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 10 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 11 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 12 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 13 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 14 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 15 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 16 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 17 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 18 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 19 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 20 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 21 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 22 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 23 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 24 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 25 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 26 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 27 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 28 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 29 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:44:01,772 - INFO - Success: KNN - openml__credit-g__31_50pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__credit-g__31_50pct_missing', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 1 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 2 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 3 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 4 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 5 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 6 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 7 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 8 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 9 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 10 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 11 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 12 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 13 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 14 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 15 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 16 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 17 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 18 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 19 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 20 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 21 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 22 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 23 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 24 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 25 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 26 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 27 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 28 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 29 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:44:02,825 - INFO - Success: KNN - openml__credit-g__31_75pct_missing
Output:
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__credit-g__31_75pct_missing', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 1 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 2 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 3 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 4 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 5 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 6 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 7 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 8 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 9 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 10 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 11 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 12 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 13 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 14 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 15 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 16 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 17 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 18 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 19 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 20 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 21 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 22 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 23 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 24 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 25 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 26 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 27 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 28 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 29 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:44:26,438 - INFO - Success: KNN - openml__diabetes__37_100pct
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__diabetes__37_100pct', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:44:51,847 - INFO - Success: KNN - openml__diabetes__37_25pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__diabetes__37_25pct_missing', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:45:16,308 - INFO - Success: KNN - openml__diabetes__37_50pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__diabetes__37_50pct_missing', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:45:36,125 - INFO - Success: KNN - openml__diabetes__37_75pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__diabetes__37_75pct_missing', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:51:50,244 - INFO - Success: KNN - openml__adult__7592_100pct
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__adult__7592_100pct', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:51:52,266 - INFO - Success: KNN - openml__adult__7592_25pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__adult__7592_25pct_missing', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 1 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 2 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 3 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 4 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 5 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 6 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 7 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 8 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 9 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 10 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 11 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 12 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 13 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 14 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 15 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 16 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 17 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 18 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 19 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 20 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 21 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 22 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 23 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 24 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 25 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 26 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 27 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 28 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 29 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:51:53,799 - INFO - Success: KNN - openml__adult__7592_50pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__adult__7592_50pct_missing', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 1 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 2 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 3 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 4 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 5 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 6 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 7 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 8 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 9 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 10 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 11 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 12 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 13 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 14 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 15 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 16 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 17 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 18 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 19 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 20 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 21 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 22 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 23 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 24 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 25 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 26 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 27 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 28 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 29 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:51:55,475 - INFO - Success: KNN - openml__adult__7592_75pct_missing
Output:
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__adult__7592_75pct_missing', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 1 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 2 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 3 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 4 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 5 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 6 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 7 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 8 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 9 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 10 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 11 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 12 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 13 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 14 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 15 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 16 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 17 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 18 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 19 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 20 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 21 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 22 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 23 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 24 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 25 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 26 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 27 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 28 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 29 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 10:56:55,560 - INFO - Success: KNN - openml__spambase__43_100pct
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__spambase__43_100pct', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 11:02:56,671 - INFO - Success: KNN - openml__spambase__43_25pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__spambase__43_25pct_missing', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 11:09:10,587 - INFO - Success: KNN - openml__spambase__43_50pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__spambase__43_50pct_missing', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 11:15:24,579 - INFO - Success: KNN - openml__spambase__43_75pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__spambase__43_75pct_missing', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 11:18:18,510 - INFO - Success: KNN - openml__Amazon_employee_access__34539_100pct
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__Amazon_employee_access__34539_100pct', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Trial 1 complete
Trial 2 complete
Trial 3 complete
Trial 4 complete
Trial 5 complete
Trial 6 complete
Trial 7 complete
Trial 8 complete
Trial 9 complete
Trial 10 complete
Trial 11 complete
Trial 12 complete
Trial 13 complete
Trial 14 complete
Trial 15 complete
Trial 16 complete
Trial 17 complete
Trial 18 complete
Trial 19 complete
Trial 20 complete
Trial 21 complete
Trial 22 complete
Trial 23 complete
Trial 24 complete
Trial 25 complete
Trial 26 complete
Trial 27 complete
Trial 28 complete
Trial 29 complete
Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 11:18:19,873 - INFO - Success: KNN - openml__Amazon_employee_access__34539_25pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__Amazon_employee_access__34539_25pct_missing', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 1 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 2 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 3 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 4 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 5 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 6 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 7 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 8 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 9 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 10 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 11 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 12 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 13 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 14 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 15 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 16 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 17 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 18 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 19 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 20 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 21 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 22 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 23 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 24 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 25 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 26 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 27 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 28 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 29 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 11:18:20,773 - INFO - Success: KNN - openml__Amazon_employee_access__34539_50pct_missing
Output:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__Amazon_employee_access__34539_50pct_missing', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 1 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 2 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 3 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 4 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 5 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 6 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 7 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 8 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 9 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 10 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 11 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 12 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 13 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 14 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 15 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 16 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 17 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 18 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 19 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 20 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 21 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 22 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 23 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 24 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 25 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 26 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 27 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 28 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 29 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 11:18:21,640 - INFO - Success: KNN - openml__Amazon_employee_access__34539_75pct_missing
Output:
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__Amazon_employee_access__34539_75pct_missing', model_name='KNN')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 1 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 2 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 3 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 4 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 5 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 6 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 7 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 8 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 9 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 10 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 11 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 12 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 13 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 14 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 15 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 16 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 17 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 18 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 19 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 20 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 21 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 22 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 23 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 24 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 25 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 26 complete
caught exception during cross-validation...
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/numpy/lib/nanfunctions.py:1384: RuntimeWarning: All-NaN slice encountered
  return _nanquantile_unchecked(
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 27 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 28 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 29 complete
caught exception during cross-validation...
Traceback (most recent call last):
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_experiment.py", line 151, in __call__
    result = cross_validation(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/tabzilla_utils.py", line 247, in cross_validation
    loss_history, val_loss_history = curr_model.fit(
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/baseline_models.py", line 81, in fit
    return super().fit(X, y, X_val, y_val)
  File "/scratch2/victoriaflores/transformers/tabzilla/TabZilla/models/basemodel.py", line 100, in fit
    self.model.fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 1151, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 228, in fit
    return self._fit(X, y)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 456, in _fit
    X, y = self._validate_data(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/base.py", line 621, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1147, in check_X_y
    X = check_array(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 959, in check_array
    _assert_all_finite(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 124, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/scratch2/victoriaflores/transformers/tabzilla/lib/python3.10/site-packages/sklearn/utils/validation.py", line 173, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Trial 30 complete
trials complete. results written to subdirectories within /scratch2/victoriaflores/transformers/tabzilla/TabZilla/results

2025-04-28 12:09:01,059 - ERROR - Failed: SAINT - openml__credit-g__31_100pct
Error:
ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', dataset_dir='datasets/openml__credit-g__31_100pct', model_name='SAINT')
EXPERIMENT ARGS: Namespace(experiment_config='tabzilla_experiment_config_gpu.yml', output_dir='./results/', write_predictions=False, use_gpu=True, gpu_ids=[0], data_parallel=True, n_random_trials=30, hparam_seed=0, n_opt_trials=0, batch_size=128, val_batch_size=256, scale_numerical_features='Quantile', early_stopping_rounds=20, epochs=100, logging_period=100, experiment_time_limit=36000, trial_time_limit=7200, subset_rows=-1, subset_features=-1, subset_rows_method='random', subset_features_method='random', subset_random_seed=0)
evaluating 30 random hyperparameter samples...
Using dim 64 and batch size 128
Using dim 64 and batch size 128
Epoch 0 loss 0.6052717566490173
Epoch 1 loss 0.5751456618309021
Epoch 2 loss 0.5606940984725952
Epoch 3 loss 0.5588306784629822
Epoch 4 loss 0.5751361846923828
Epoch 5 loss 0.5938608646392822
Epoch 6 loss 0.560238242149353
Epoch 7 loss 0.5672314167022705
Epoch 8 loss 0.5796080231666565
Epoch 9 loss 0.5682594776153564
Epoch 10 loss 0.6013324856758118
Epoch 11 loss 0.5769307017326355
Epoch 12 loss 0.582585871219635
Epoch 13 loss 0.600836992263794
Epoch 14 loss 0.6292024850845337
Epoch 15 loss 0.6051023602485657
Epoch 16 loss 0.6087343692779541
Epoch 17 loss 0.6329094171524048
Epoch 18 loss 0.6599454879760742
Epoch 19 loss 0.6715019345283508
Epoch 20 loss 0.7120989561080933
Epoch 21 loss 0.7974857687950134
Epoch 22 loss 0.7538079619407654
Epoch 23 loss 0.7109063267707825
Epoch 24 loss 0.736318051815033
Validation loss has not improved for 20 steps!
Early stopping applies.
Using dim 64 and batch size 128
Epoch 0 loss 0.5902747511863708
Epoch 1 loss 0.5694360733032227
Epoch 2 loss 0.5576945543289185
Epoch 3 loss 0.5679153800010681
Epoch 4 loss 0.5928471088409424
Epoch 5 loss 0.596099853515625
Epoch 6 loss 0.5712698101997375
Epoch 7 loss 0.5681859850883484
Epoch 8 loss 0.5709980130195618
Epoch 9 loss 0.5647029280662537
Epoch 10 loss 0.5831543803215027
Epoch 11 loss 0.5828651785850525
Epoch 12 loss 0.5923829078674316
Epoch 13 loss 0.6057497262954712
Epoch 14 loss 0.6007317304611206
Epoch 15 loss 0.6130310297012329
Epoch 16 loss 0.5949865579605103
Epoch 17 loss 0.6223616600036621
Epoch 18 loss 0.6327498555183411
Epoch 